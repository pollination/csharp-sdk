/* 
 * Pollination Server
 *
 * Pollination Server OpenAPI Defintion
 *
 * The version of the OpenAPI document: 0.9.6
 * Contact: info@pollination.cloud
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using PollinationSDK.Client;
using PollinationSDK.Api;
using PollinationSDK.Model;

namespace PollinationSDK.Test
{
    /// <summary>
    ///  Class for testing SimulationsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class SimulationsApiTests
    {
        private SimulationsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new SimulationsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of SimulationsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' SimulationsApi
            //Assert.IsInstanceOf(typeof(SimulationsApi), instance);
        }

        
        /// <summary>
        /// Test CreateSimulation
        /// </summary>
        [Test]
        public void CreateSimulationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string name = null;
            //SubmitSimulation submitSimulation = null;
            //string authorization = null;
            //var response = instance.CreateSimulation(owner, name, submitSimulation, authorization);
            //Assert.IsInstanceOf(typeof(CreatedContent), response, "response is CreatedContent");
        }
        
        /// <summary>
        /// Test DownloadSimulationArtifact
        /// </summary>
        [Test]
        public void DownloadSimulationArtifactTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string name = null;
            //string simulationId = null;
            //string path = null;
            //var response = instance.DownloadSimulationArtifact(owner, name, simulationId, path);
            //Assert.IsInstanceOf(typeof(Object), response, "response is Object");
        }
        
        /// <summary>
        /// Test GetSimulation
        /// </summary>
        [Test]
        public void GetSimulationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string name = null;
            //string simulationId = null;
            //var response = instance.GetSimulation(owner, name, simulationId);
            //Assert.IsInstanceOf(typeof(SimulationStatus), response, "response is SimulationStatus");
        }
        
        /// <summary>
        /// Test GetSimulationInputs
        /// </summary>
        [Test]
        public void GetSimulationInputsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string name = null;
            //string simulationId = null;
            //var response = instance.GetSimulationInputs(owner, name, simulationId);
            //Assert.IsInstanceOf(typeof(Object), response, "response is Object");
        }
        
        /// <summary>
        /// Test GetSimulationLogs
        /// </summary>
        [Test]
        public void GetSimulationLogsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string name = null;
            //string simulationId = null;
            //var response = instance.GetSimulationLogs(owner, name, simulationId);
            //Assert.IsInstanceOf(typeof(Object), response, "response is Object");
        }
        
        /// <summary>
        /// Test GetSimulationOutputArtifact
        /// </summary>
        [Test]
        public void GetSimulationOutputArtifactTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string name = null;
            //string simulationId = null;
            //string artifactName = null;
            //var response = instance.GetSimulationOutputArtifact(owner, name, simulationId, artifactName);
            //Assert.IsInstanceOf(typeof(Object), response, "response is Object");
        }
        
        /// <summary>
        /// Test GetSimulationOutputs
        /// </summary>
        [Test]
        public void GetSimulationOutputsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string name = null;
            //string simulationId = null;
            //var response = instance.GetSimulationOutputs(owner, name, simulationId);
            //Assert.IsInstanceOf(typeof(Object), response, "response is Object");
        }
        
        /// <summary>
        /// Test GetSimulationTaskLogs
        /// </summary>
        [Test]
        public void GetSimulationTaskLogsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string name = null;
            //string simulationId = null;
            //string taskId = null;
            //var response = instance.GetSimulationTaskLogs(owner, name, simulationId, taskId);
            //Assert.IsInstanceOf(typeof(string), response, "response is string");
        }
        
        /// <summary>
        /// Test ListSimulationArtifacts
        /// </summary>
        [Test]
        public void ListSimulationArtifactsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string name = null;
            //string simulationId = null;
            //int page = null;
            //int perPage = null;
            //List<string> path = null;
            //var response = instance.ListSimulationArtifacts(owner, name, simulationId, page, perPage, path);
            //Assert.IsInstanceOf(typeof(List<FileMeta>), response, "response is List<FileMeta>");
        }
        
        /// <summary>
        /// Test ListSimulations
        /// </summary>
        [Test]
        public void ListSimulationsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string name = null;
            //int page = null;
            //int perPage = null;
            //List<string> id = null;
            //List<string> status = null;
            //var response = instance.ListSimulations(owner, name, page, perPage, id, status);
            //Assert.IsInstanceOf(typeof(SimulationList), response, "response is SimulationList");
        }
        
        /// <summary>
        /// Test ResumeSimulation
        /// </summary>
        [Test]
        public void ResumeSimulationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string name = null;
            //string simulationId = null;
            //var response = instance.ResumeSimulation(owner, name, simulationId);
            //Assert.IsInstanceOf(typeof(Accepted), response, "response is Accepted");
        }
        
        /// <summary>
        /// Test StopSimulation
        /// </summary>
        [Test]
        public void StopSimulationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string name = null;
            //string simulationId = null;
            //var response = instance.StopSimulation(owner, name, simulationId);
            //Assert.IsInstanceOf(typeof(Accepted), response, "response is Accepted");
        }
        
        /// <summary>
        /// Test SuspendSimulation
        /// </summary>
        [Test]
        public void SuspendSimulationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string name = null;
            //string simulationId = null;
            //var response = instance.SuspendSimulation(owner, name, simulationId);
            //Assert.IsInstanceOf(typeof(Accepted), response, "response is Accepted");
        }
        
    }

}
