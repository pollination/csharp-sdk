/* 
 * Pollination Server
 *
 * Pollination Server OpenAPI Defintion
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: info@pollination.cloud
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using PollinationSDK.Client;
using PollinationSDK.Api;
using PollinationSDK.Model;

namespace PollinationSDK.Test
{
    /// <summary>
    ///  Class for testing RegistriesApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class RegistriesApiTests
    {
        private RegistriesApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new RegistriesApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of RegistriesApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' RegistriesApi
            //Assert.IsInstanceOf(typeof(RegistriesApi), instance);
        }

        
        /// <summary>
        /// Test GetPackage
        /// </summary>
        [Test]
        public void GetPackageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string type = null;
            //string name = null;
            //string digest = null;
            //var response = instance.GetPackage(owner, type, name, digest);
            //Assert.IsInstanceOf(typeof(AnyType), response, "response is AnyType");
        }
        
        /// <summary>
        /// Test GetRegistryIndex
        /// </summary>
        [Test]
        public void GetRegistryIndexTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //var response = instance.GetRegistryIndex(owner);
            //Assert.IsInstanceOf(typeof(RepositoryIndex), response, "response is RepositoryIndex");
        }
        
        /// <summary>
        /// Test PostOperator
        /// </summary>
        [Test]
        public void PostOperatorTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //System.IO.Stream package = null;
            //var response = instance.PostOperator(owner, package);
            //Assert.IsInstanceOf(typeof(AnyType), response, "response is AnyType");
        }
        
        /// <summary>
        /// Test PostRecipe
        /// </summary>
        [Test]
        public void PostRecipeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //System.IO.Stream package = null;
            //string authorization = null;
            //var response = instance.PostRecipe(owner, package, authorization);
            //Assert.IsInstanceOf(typeof(AnyType), response, "response is AnyType");
        }
        
    }

}
