/* 
 * Pollination Server
 *
 * Pollination Server OpenAPI Defintion
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: info@pollination.cloud
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using PollinationSDK.Client;
using PollinationSDK.Api;
using PollinationSDK.Model;

namespace PollinationSDK.Test
{
    /// <summary>
    ///  Class for testing ProjectsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class ProjectsApiTests
    {
        private ProjectsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new ProjectsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of ProjectsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' ProjectsApi
            //Assert.IsInstanceOf(typeof(ProjectsApi), instance);
        }

        
        /// <summary>
        /// Test CreateProject
        /// </summary>
        [Test]
        public void CreateProjectTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //PatchProjectDto patchProjectDto = null;
            //var response = instance.CreateProject(owner, patchProjectDto);
            //Assert.IsInstanceOf(typeof(CreatedContent), response, "response is CreatedContent");
        }
        
        /// <summary>
        /// Test DeleteProject
        /// </summary>
        [Test]
        public void DeleteProjectTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string name = null;
            //instance.DeleteProject(owner, name);
            
        }
        
        /// <summary>
        /// Test DeleteProjectOrgPermission
        /// </summary>
        [Test]
        public void DeleteProjectOrgPermissionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string name = null;
            //ProjectPolicySubjectDto projectPolicySubjectDto = null;
            //instance.DeleteProjectOrgPermission(owner, name, projectPolicySubjectDto);
            
        }
        
        /// <summary>
        /// Test GetProject
        /// </summary>
        [Test]
        public void GetProjectTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string name = null;
            //var response = instance.GetProject(owner, name);
            //Assert.IsInstanceOf(typeof(ProjectDto), response, "response is ProjectDto");
        }
        
        /// <summary>
        /// Test GetProjectAccessPermissions
        /// </summary>
        [Test]
        public void GetProjectAccessPermissionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string name = null;
            //var response = instance.GetProjectAccessPermissions(owner, name);
            //Assert.IsInstanceOf(typeof(List<ProjectAccessPolicyDto>), response, "response is List<ProjectAccessPolicyDto>");
        }
        
        /// <summary>
        /// Test ListProjects
        /// </summary>
        [Test]
        public void ListProjectsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? perPage = null;
            //List<string> id = null;
            //List<string> name = null;
            //List<string> owner = null;
            //bool? _public = null;
            //List<string> _operator = null;
            //var response = instance.ListProjects(page, perPage, id, name, owner, _public, _operator);
            //Assert.IsInstanceOf(typeof(List<ProjectDto>), response, "response is List<ProjectDto>");
        }
        
        /// <summary>
        /// Test Update
        /// </summary>
        [Test]
        public void UpdateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string name = null;
            //PatchProjectDto patchProjectDto = null;
            //var response = instance.Update(owner, name, patchProjectDto);
            //Assert.IsInstanceOf(typeof(UpdateAccepted), response, "response is UpdateAccepted");
        }
        
        /// <summary>
        /// Test UpsertProjectPermission
        /// </summary>
        [Test]
        public void UpsertProjectPermissionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string name = null;
            //ProjectAccessPolicyDto projectAccessPolicyDto = null;
            //var response = instance.UpsertProjectPermission(owner, name, projectAccessPolicyDto);
            //Assert.IsInstanceOf(typeof(UpdateAccepted), response, "response is UpdateAccepted");
        }
        
    }

}
