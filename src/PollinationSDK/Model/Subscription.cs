/* 
 * pollination-server
 *
 * Pollination Server OpenAPI Definition
 *
 * Contact: info@pollination.cloud
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

extern alias LBTNewtonsoft;  extern alias LBTRestSharp; using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using LBTNewtonsoft::Newtonsoft.Json;
using LBTNewtonsoft::Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;


namespace PollinationSDK
{
    /// <summary>
    /// Subscription
    /// </summary>
    [DataContract(Name = "Subscription")]
    public partial class Subscription : OpenAPIGenBaseModel, IEquatable<Subscription>, IValidatableObject
    {
        /// <summary>
        /// The type of subscription
        /// </summary>
        /// <value>The type of subscription</value>
        [DataMember(Name="plan_type")]
        public PlanType PlanType { get; set; }   
        /// <summary>
        /// Initializes a new instance of the <see cref="Subscription" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Subscription() 
        { 
            // Set non-required readonly properties with defaultValue
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Subscription" /> class.
        /// </summary>
        /// <param name="id">The unique ID of this subscription (required).</param>
        /// <param name="owner">The owner of the repository (required).</param>
        /// <param name="periodStart">The start of the current subscription period (required).</param>
        /// <param name="periodEnd">The end of the current subscription period (required).</param>
        /// <param name="planSlug">The slug of the plan used to create this subscription (required).</param>
        /// <param name="externalId">The ID of this subscription.</param>
        /// <param name="planMultiplier">The number of times to multiply the plan limit by (default to 1).</param>
        /// <param name="billingInfo">The billing info for the subscription.</param>
        public Subscription
        (
           Guid id, AccountPublic owner, DateTime periodStart, DateTime periodEnd, string planSlug, // Required parameters
           string externalId= default, int planMultiplier = 1, BillingInfo billingInfo= default// Optional parameters
        ) : base()// BaseClass
        {
            this.Id = id;
            // to ensure "owner" is required (not null)
            this.Owner = owner ?? throw new ArgumentNullException("owner is a required property for Subscription and cannot be null");
            this.PeriodStart = periodStart;
            this.PeriodEnd = periodEnd;
            // to ensure "planSlug" is required (not null)
            this.PlanSlug = planSlug ?? throw new ArgumentNullException("planSlug is a required property for Subscription and cannot be null");
            this.ExternalId = externalId;
            this.PlanMultiplier = planMultiplier;
            this.BillingInfo = billingInfo;

            // Set non-required readonly properties with defaultValue
        }


        /// <summary>
        /// The unique ID of this subscription
        /// </summary>
        /// <value>The unique ID of this subscription</value>
        [DataMember(Name = "id", IsRequired = true)]
        public Guid Id { get; set; } 
        /// <summary>
        /// The owner of the repository
        /// </summary>
        /// <value>The owner of the repository</value>
        [DataMember(Name = "owner", IsRequired = true)]
        public AccountPublic Owner { get; set; } 
        /// <summary>
        /// The start of the current subscription period
        /// </summary>
        /// <value>The start of the current subscription period</value>
        [DataMember(Name = "period_start", IsRequired = true)]
        public DateTime PeriodStart { get; set; } 
        /// <summary>
        /// The end of the current subscription period
        /// </summary>
        /// <value>The end of the current subscription period</value>
        [DataMember(Name = "period_end", IsRequired = true)]
        public DateTime PeriodEnd { get; set; } 
        /// <summary>
        /// The slug of the plan used to create this subscription
        /// </summary>
        /// <value>The slug of the plan used to create this subscription</value>
        [DataMember(Name = "plan_slug", IsRequired = true)]
        public string PlanSlug { get; set; } 
        /// <summary>
        /// The ID of this subscription
        /// </summary>
        /// <value>The ID of this subscription</value>
        [DataMember(Name = "external_id")]
        public string ExternalId { get; set; } 
        /// <summary>
        /// The number of times to multiply the plan limit by
        /// </summary>
        /// <value>The number of times to multiply the plan limit by</value>
        [DataMember(Name = "plan_multiplier")]
        public int PlanMultiplier { get; set; }  = 1;
        /// <summary>
        /// The billing info for the subscription
        /// </summary>
        /// <value>The billing info for the subscription</value>
        [DataMember(Name = "billing_info")]
        public BillingInfo BillingInfo { get; set; } 

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            return "Subscription";
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString(bool detailed)
        {
            if (!detailed)
                return this.ToString();
            
            var sb = new StringBuilder();
            sb.Append("Subscription:\n");
            sb.Append("  Type: ").Append(this.Type).Append("\n");
            sb.Append("  Id: ").Append(this.Id).Append("\n");
            sb.Append("  Owner: ").Append(this.Owner).Append("\n");
            sb.Append("  PeriodStart: ").Append(this.PeriodStart).Append("\n");
            sb.Append("  PeriodEnd: ").Append(this.PeriodEnd).Append("\n");
            sb.Append("  PlanSlug: ").Append(this.PlanSlug).Append("\n");
            sb.Append("  ExternalId: ").Append(this.ExternalId).Append("\n");
            sb.Append("  PlanMultiplier: ").Append(this.PlanMultiplier).Append("\n");
            sb.Append("  BillingInfo: ").Append(this.BillingInfo).Append("\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the object from JSON string
        /// </summary>
        /// <returns>Subscription object</returns>
        public static Subscription FromJson(string json)
        {
            var obj = JsonConvert.DeserializeObject<Subscription>(json, JsonSetting.AnyOfConvertSetting);
            if (obj == null)
                return null;
            return obj.Type.ToLower() == obj.GetType().Name.ToLower() ? obj : null;
        }

        /// <summary>
        /// Creates a new instance with the same properties.
        /// </summary>
        /// <returns>Subscription object</returns>
        public virtual Subscription DuplicateSubscription()
        {
            return FromJson(this.ToJson());
        }

        /// <summary>
        /// Creates a new instance with the same properties.
        /// </summary>
        /// <returns>OpenAPIGenBaseModel</returns>
        public override OpenAPIGenBaseModel Duplicate()
        {
            return DuplicateSubscription();
        }

        /// <summary>
        /// Creates a new instance with the same properties.
        /// </summary>
        /// <returns>OpenAPIGenBaseModel</returns>
        public override OpenAPIGenBaseModel DuplicateOpenAPIGenBaseModel()
        {
            return DuplicateSubscription();
        }
     
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            input = input is AnyOf anyOf ? anyOf.Obj : input;
            return this.Equals(input as Subscription);
        }

        /// <summary>
        /// Returns true if Subscription instances are equal
        /// </summary>
        /// <param name="input">Instance of Subscription to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Subscription input)
        {
            if (input == null)
                return false;
            return base.Equals(input) && 
                    Extension.Equals(this.Id, input.Id) && 
                    Extension.Equals(this.Owner, input.Owner) && 
                    Extension.Equals(this.Type, input.Type) && 
                    Extension.Equals(this.PeriodStart, input.PeriodStart) && 
                    Extension.Equals(this.PeriodEnd, input.PeriodEnd) && 
                    Extension.Equals(this.PlanSlug, input.PlanSlug) && 
                    Extension.Equals(this.ExternalId, input.ExternalId) && 
                    Extension.Equals(this.PlanMultiplier, input.PlanMultiplier) && 
                    Extension.Equals(this.BillingInfo, input.BillingInfo);
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Owner != null)
                    hashCode = hashCode * 59 + this.Owner.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.PeriodStart != null)
                    hashCode = hashCode * 59 + this.PeriodStart.GetHashCode();
                if (this.PeriodEnd != null)
                    hashCode = hashCode * 59 + this.PeriodEnd.GetHashCode();
                if (this.PlanSlug != null)
                    hashCode = hashCode * 59 + this.PlanSlug.GetHashCode();
                if (this.ExternalId != null)
                    hashCode = hashCode * 59 + this.ExternalId.GetHashCode();
                if (this.PlanMultiplier != null)
                    hashCode = hashCode * 59 + this.PlanMultiplier.GetHashCode();
                if (this.BillingInfo != null)
                    hashCode = hashCode * 59 + this.BillingInfo.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in base.BaseValidate(validationContext)) yield return x;
            yield break;
        }
    }
}
