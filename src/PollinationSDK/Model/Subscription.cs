/* 
 * pollination-server
 *
 * Pollination Server OpenAPI Definition
 *
 * Contact: info@pollination.cloud
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;


namespace PollinationSDK
{
    /// <summary>
    /// Subscription
    /// </summary>
    [DataContract(Name = "Subscription")]
    public partial class Subscription : ExternalResource, IEquatable<Subscription>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Subscription" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Subscription() 
        { 
            // Set non-required readonly properties with defaultValue
            this.Type = "Subscription";
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Subscription" /> class.
        /// </summary>
        /// <param name="cancelAtPeriodEnd">cancelAtPeriodEnd (required).</param>
        /// <param name="currentPeriodStart">currentPeriodStart (required).</param>
        /// <param name="currentPeriodEnd">currentPeriodEnd (required).</param>
        /// <param name="customer">customer (required).</param>
        /// <param name="items">items (required).</param>
        /// <param name="latestInvoice">latestInvoice (required).</param>
        /// <param name="defaultPaymentMethod">defaultPaymentMethod.</param>
        /// <param name="schedule">schedule.</param>
        /// <param name="discount">discount.</param>
        /// <param name="id">id (required).</param>
        /// <param name="metadata">metadata.</param>
        public Subscription
        (
            string id, bool cancelAtPeriodEnd, DateTime currentPeriodStart, DateTime currentPeriodEnd, string customer, SubscriptionItemList items, string latestInvoice, // Required parameters
            Object metadata= default, string defaultPaymentMethod= default, string schedule= default, Discount discount= default // Optional parameters
        ) : base(id: id, metadata: metadata)// BaseClass
        {
            this.CancelAtPeriodEnd = cancelAtPeriodEnd;
            this.CurrentPeriodStart = currentPeriodStart;
            this.CurrentPeriodEnd = currentPeriodEnd;
            // to ensure "customer" is required (not null)
            this.Customer = customer ?? throw new ArgumentNullException("customer is a required property for Subscription and cannot be null");
            // to ensure "items" is required (not null)
            this.Items = items ?? throw new ArgumentNullException("items is a required property for Subscription and cannot be null");
            // to ensure "latestInvoice" is required (not null)
            this.LatestInvoice = latestInvoice ?? throw new ArgumentNullException("latestInvoice is a required property for Subscription and cannot be null");
            this.DefaultPaymentMethod = defaultPaymentMethod;
            this.Schedule = schedule;
            this.Discount = discount;

            // Set non-required readonly properties with defaultValue
            this.Type = "Subscription";
        }

        //============================================== is ReadOnly 
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = true)]
        public override string Type { get; protected internal set; }  = "Subscription";

        /// <summary>
        /// Gets or Sets CancelAtPeriodEnd
        /// </summary>
        [DataMember(Name = "cancel_at_period_end", IsRequired = true, EmitDefaultValue = false)]
        public bool CancelAtPeriodEnd { get; set; } 
        /// <summary>
        /// Gets or Sets CurrentPeriodStart
        /// </summary>
        [DataMember(Name = "current_period_start", IsRequired = true, EmitDefaultValue = false)]
        public DateTime CurrentPeriodStart { get; set; } 
        /// <summary>
        /// Gets or Sets CurrentPeriodEnd
        /// </summary>
        [DataMember(Name = "current_period_end", IsRequired = true, EmitDefaultValue = false)]
        public DateTime CurrentPeriodEnd { get; set; } 
        /// <summary>
        /// Gets or Sets Customer
        /// </summary>
        [DataMember(Name = "customer", IsRequired = true, EmitDefaultValue = false)]
        public string Customer { get; set; } 
        /// <summary>
        /// Gets or Sets Items
        /// </summary>
        [DataMember(Name = "items", IsRequired = true, EmitDefaultValue = false)]
        public SubscriptionItemList Items { get; set; } 
        /// <summary>
        /// Gets or Sets LatestInvoice
        /// </summary>
        [DataMember(Name = "latest_invoice", IsRequired = true, EmitDefaultValue = false)]
        public string LatestInvoice { get; set; } 
        /// <summary>
        /// Gets or Sets DefaultPaymentMethod
        /// </summary>
        [DataMember(Name = "default_payment_method", EmitDefaultValue = false)]
        public string DefaultPaymentMethod { get; set; } 
        /// <summary>
        /// Gets or Sets Schedule
        /// </summary>
        [DataMember(Name = "schedule", EmitDefaultValue = false)]
        public string Schedule { get; set; } 
        /// <summary>
        /// Gets or Sets Discount
        /// </summary>
        [DataMember(Name = "discount", EmitDefaultValue = false)]
        public Discount Discount { get; set; } 

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            return "Subscription";
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString(bool detailed)
        {
            if (!detailed)
                return this.ToString();
            
            var sb = new StringBuilder();
            sb.Append("Subscription:\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  CancelAtPeriodEnd: ").Append(CancelAtPeriodEnd).Append("\n");
            sb.Append("  CurrentPeriodStart: ").Append(CurrentPeriodStart).Append("\n");
            sb.Append("  CurrentPeriodEnd: ").Append(CurrentPeriodEnd).Append("\n");
            sb.Append("  Customer: ").Append(Customer).Append("\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("  LatestInvoice: ").Append(LatestInvoice).Append("\n");
            sb.Append("  DefaultPaymentMethod: ").Append(DefaultPaymentMethod).Append("\n");
            sb.Append("  Schedule: ").Append(Schedule).Append("\n");
            sb.Append("  Discount: ").Append(Discount).Append("\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the object from JSON string
        /// </summary>
        /// <returns>Subscription object</returns>
        public static Subscription FromJson(string json)
        {
            var obj = JsonConvert.DeserializeObject<Subscription>(json, JsonSetting.AnyOfConvertSetting);
            if (obj == null)
                return null;
            return obj.Type.ToLower() == obj.GetType().Name.ToLower() ? obj : null;
        }

        /// <summary>
        /// Creates a new instance with the same properties.
        /// </summary>
        /// <returns>Subscription object</returns>
        public virtual Subscription DuplicateSubscription()
        {
            return FromJson(this.ToJson());
        }

        /// <summary>
        /// Creates a new instance with the same properties.
        /// </summary>
        /// <returns>OpenAPIGenBaseModel</returns>
        public override OpenAPIGenBaseModel Duplicate()
        {
            return DuplicateSubscription();
        }

        /// <summary>
        /// Creates a new instance with the same properties.
        /// </summary>
        /// <returns>OpenAPIGenBaseModel</returns>
        public override ExternalResource DuplicateExternalResource()
        {
            return DuplicateSubscription();
        }
     
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            input = input is AnyOf anyOf ? anyOf.Obj : input;
            return this.Equals(input as Subscription);
        }

        /// <summary>
        /// Returns true if Subscription instances are equal
        /// </summary>
        /// <param name="input">Instance of Subscription to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Subscription input)
        {
            if (input == null)
                return false;
            return base.Equals(input) && 
                (
                    this.CancelAtPeriodEnd == input.CancelAtPeriodEnd ||
                    (this.CancelAtPeriodEnd != null &&
                    this.CancelAtPeriodEnd.Equals(input.CancelAtPeriodEnd))
                ) && base.Equals(input) && 
                (
                    this.CurrentPeriodStart == input.CurrentPeriodStart ||
                    (this.CurrentPeriodStart != null &&
                    this.CurrentPeriodStart.Equals(input.CurrentPeriodStart))
                ) && base.Equals(input) && 
                (
                    this.CurrentPeriodEnd == input.CurrentPeriodEnd ||
                    (this.CurrentPeriodEnd != null &&
                    this.CurrentPeriodEnd.Equals(input.CurrentPeriodEnd))
                ) && base.Equals(input) && 
                (
                    this.Customer == input.Customer ||
                    (this.Customer != null &&
                    this.Customer.Equals(input.Customer))
                ) && base.Equals(input) && 
                (
                    this.Items == input.Items ||
                    (this.Items != null &&
                    this.Items.Equals(input.Items))
                ) && base.Equals(input) && 
                (
                    this.LatestInvoice == input.LatestInvoice ||
                    (this.LatestInvoice != null &&
                    this.LatestInvoice.Equals(input.LatestInvoice))
                ) && base.Equals(input) && 
                (
                    this.DefaultPaymentMethod == input.DefaultPaymentMethod ||
                    (this.DefaultPaymentMethod != null &&
                    this.DefaultPaymentMethod.Equals(input.DefaultPaymentMethod))
                ) && base.Equals(input) && 
                (
                    this.Schedule == input.Schedule ||
                    (this.Schedule != null &&
                    this.Schedule.Equals(input.Schedule))
                ) && base.Equals(input) && 
                (
                    this.Discount == input.Discount ||
                    (this.Discount != null &&
                    this.Discount.Equals(input.Discount))
                ) && base.Equals(input) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.CancelAtPeriodEnd != null)
                    hashCode = hashCode * 59 + this.CancelAtPeriodEnd.GetHashCode();
                if (this.CurrentPeriodStart != null)
                    hashCode = hashCode * 59 + this.CurrentPeriodStart.GetHashCode();
                if (this.CurrentPeriodEnd != null)
                    hashCode = hashCode * 59 + this.CurrentPeriodEnd.GetHashCode();
                if (this.Customer != null)
                    hashCode = hashCode * 59 + this.Customer.GetHashCode();
                if (this.Items != null)
                    hashCode = hashCode * 59 + this.Items.GetHashCode();
                if (this.LatestInvoice != null)
                    hashCode = hashCode * 59 + this.LatestInvoice.GetHashCode();
                if (this.DefaultPaymentMethod != null)
                    hashCode = hashCode * 59 + this.DefaultPaymentMethod.GetHashCode();
                if (this.Schedule != null)
                    hashCode = hashCode * 59 + this.Schedule.GetHashCode();
                if (this.Discount != null)
                    hashCode = hashCode * 59 + this.Discount.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            foreach(var x in base.BaseValidate(validationContext)) yield return x;

            
            // Type (string) pattern
            Regex regexType = new Regex(@"^Subscription$", RegexOptions.CultureInvariant);
            if (false == regexType.Match(this.Type).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Type, must match a pattern of " + regexType, new [] { "Type" });
            }

            yield break;
        }
    }
}
