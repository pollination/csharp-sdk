/* 
 * pollination-server
 *
 * Pollination Server OpenAPI Definition
 *
 * The version of the OpenAPI document: 0.24.0
 * Contact: info@pollination.cloud
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = PollinationSDK.Client.OpenAPIDateConverter;

namespace PollinationSDK.Model
{
    /// <summary>
    /// PollinationSubscription
    /// </summary>
    [DataContract]
    public partial class PollinationSubscription :  IEquatable<PollinationSubscription>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PollinationSubscription" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PollinationSubscription() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PollinationSubscription" /> class.
        /// </summary>
        /// <param name="accountId">The ID of the account this subscription applies to (required).</param>
        /// <param name="currentPeriodEnd">The end of the current subscription period (required).</param>
        /// <param name="currentPeriodStart">The_start of the current subscription period (required).</param>
        /// <param name="externalId">The ID of this subscription.</param>
        /// <param name="id">The unique ID of this subscription.</param>
        /// <param name="quotaExtensions">A list of quota extension plans for a given subscription.</param>
        /// <param name="subscriptionPlan">A subscription plan (required).</param>
        public PollinationSubscription
        (
           Guid accountId, DateTime currentPeriodEnd, DateTime currentPeriodStart, SubscriptionPlan subscriptionPlan, // Required parameters
           string externalId= default, Guid id= default, List<QuotaExtension> quotaExtensions= default // Optional parameters
        )// BaseClass
        {
            // to ensure "accountId" is required (not null)
            if (accountId == null)
            {
                throw new InvalidDataException("accountId is a required property for PollinationSubscription and cannot be null");
            }
            else
            {
                this.AccountId = accountId;
            }
            
            // to ensure "currentPeriodEnd" is required (not null)
            if (currentPeriodEnd == null)
            {
                throw new InvalidDataException("currentPeriodEnd is a required property for PollinationSubscription and cannot be null");
            }
            else
            {
                this.CurrentPeriodEnd = currentPeriodEnd;
            }
            
            // to ensure "currentPeriodStart" is required (not null)
            if (currentPeriodStart == null)
            {
                throw new InvalidDataException("currentPeriodStart is a required property for PollinationSubscription and cannot be null");
            }
            else
            {
                this.CurrentPeriodStart = currentPeriodStart;
            }
            
            // to ensure "subscriptionPlan" is required (not null)
            if (subscriptionPlan == null)
            {
                throw new InvalidDataException("subscriptionPlan is a required property for PollinationSubscription and cannot be null");
            }
            else
            {
                this.SubscriptionPlan = subscriptionPlan;
            }
            
            this.ExternalId = externalId;
            this.Id = id;
            this.QuotaExtensions = quotaExtensions;

            // Set non-required readonly properties with defaultValue
        }
        
        /// <summary>
        /// The ID of the account this subscription applies to
        /// </summary>
        /// <value>The ID of the account this subscription applies to</value>
        [DataMember(Name="account_id", EmitDefaultValue=false)]
        [JsonProperty("account_id")]
        public Guid AccountId { get; set; } 
        /// <summary>
        /// The end of the current subscription period
        /// </summary>
        /// <value>The end of the current subscription period</value>
        [DataMember(Name="current_period_end", EmitDefaultValue=false)]
        [JsonProperty("current_period_end")]
        public DateTime CurrentPeriodEnd { get; set; } 
        /// <summary>
        /// The_start of the current subscription period
        /// </summary>
        /// <value>The_start of the current subscription period</value>
        [DataMember(Name="current_period_start", EmitDefaultValue=false)]
        [JsonProperty("current_period_start")]
        public DateTime CurrentPeriodStart { get; set; } 
        /// <summary>
        /// The ID of this subscription
        /// </summary>
        /// <value>The ID of this subscription</value>
        [DataMember(Name="external_id", EmitDefaultValue=false)]
        [JsonProperty("external_id")]
        public string ExternalId { get; set; } 
        /// <summary>
        /// The unique ID of this subscription
        /// </summary>
        /// <value>The unique ID of this subscription</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        [JsonProperty("id")]
        public Guid Id { get; set; } 
        /// <summary>
        /// A list of quota extension plans for a given subscription
        /// </summary>
        /// <value>A list of quota extension plans for a given subscription</value>
        [DataMember(Name="quota_extensions", EmitDefaultValue=false)]
        [JsonProperty("quota_extensions")]
        public List<QuotaExtension> QuotaExtensions { get; set; } 
        /// <summary>
        /// A subscription plan
        /// </summary>
        /// <value>A subscription plan</value>
        [DataMember(Name="subscription_plan", EmitDefaultValue=false)]
        [JsonProperty("subscription_plan")]
        public SubscriptionPlan SubscriptionPlan { get; set; } 
        
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PollinationSubscription {\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  CurrentPeriodEnd: ").Append(CurrentPeriodEnd).Append("\n");
            sb.Append("  CurrentPeriodStart: ").Append(CurrentPeriodStart).Append("\n");
            sb.Append("  ExternalId: ").Append(ExternalId).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  QuotaExtensions: ").Append(QuotaExtensions).Append("\n");
            sb.Append("  SubscriptionPlan: ").Append(SubscriptionPlan).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented, JsonSetting.ConvertSetting);
        }

        /// <summary>
        /// Returns the object from JSON string
        /// </summary>
        /// <returns>PollinationSubscription object</returns>
        public static PollinationSubscription FromJson(string json)
        {
            var obj = JsonConvert.DeserializeObject<PollinationSubscription>(json, JsonSetting.ConvertSetting);
            return obj;
        }

        /// <summary>
        /// Creates a new instance with the same properties.
        /// </summary>
        /// <returns>PollinationSubscription object</returns>
        public PollinationSubscription DuplicatePollinationSubscription()
        {
            return FromJson(this.ToJson());
        }
     
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PollinationSubscription);
        }

        /// <summary>
        /// Returns true if PollinationSubscription instances are equal
        /// </summary>
        /// <param name="input">Instance of PollinationSubscription to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PollinationSubscription input)
        {
            if (input == null)
                return false;
            return 
                (
                    this.AccountId == input.AccountId ||
                    (this.AccountId != null &&
                    this.AccountId.Equals(input.AccountId))
                ) && 
                (
                    this.CurrentPeriodEnd == input.CurrentPeriodEnd ||
                    (this.CurrentPeriodEnd != null &&
                    this.CurrentPeriodEnd.Equals(input.CurrentPeriodEnd))
                ) && 
                (
                    this.CurrentPeriodStart == input.CurrentPeriodStart ||
                    (this.CurrentPeriodStart != null &&
                    this.CurrentPeriodStart.Equals(input.CurrentPeriodStart))
                ) && 
                (
                    this.ExternalId == input.ExternalId ||
                    (this.ExternalId != null &&
                    this.ExternalId.Equals(input.ExternalId))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.QuotaExtensions == input.QuotaExtensions ||
                    this.QuotaExtensions != null &&
                    input.QuotaExtensions != null &&
                    this.QuotaExtensions.SequenceEqual(input.QuotaExtensions)
                ) && 
                (
                    this.SubscriptionPlan == input.SubscriptionPlan ||
                    (this.SubscriptionPlan != null &&
                    this.SubscriptionPlan.Equals(input.SubscriptionPlan))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccountId != null)
                    hashCode = hashCode * 59 + this.AccountId.GetHashCode();
                if (this.CurrentPeriodEnd != null)
                    hashCode = hashCode * 59 + this.CurrentPeriodEnd.GetHashCode();
                if (this.CurrentPeriodStart != null)
                    hashCode = hashCode * 59 + this.CurrentPeriodStart.GetHashCode();
                if (this.ExternalId != null)
                    hashCode = hashCode * 59 + this.ExternalId.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.QuotaExtensions != null)
                    hashCode = hashCode * 59 + this.QuotaExtensions.GetHashCode();
                if (this.SubscriptionPlan != null)
                    hashCode = hashCode * 59 + this.SubscriptionPlan.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
