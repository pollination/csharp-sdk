/* 
 * Pollination Server
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.5.28
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;


namespace PollinationSDK.Model
{
    /// <summary>
    /// Recipe metadata information.
    /// </summary>
    [DataContract]
    public partial class QueenbeeRecipeMetadataMetaData :  IEquatable<QueenbeeRecipeMetadataMetaData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="QueenbeeRecipeMetadataMetaData" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected QueenbeeRecipeMetadataMetaData() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="QueenbeeRecipeMetadataMetaData" /> class.
        /// </summary>
        /// <param name="name">Recipe name. Make it descriptive and helpful ;) (required).</param>
        /// <param name="tag">The tag of the recipe (required).</param>
        /// <param name="keywords">A list of keywords to search the recipe by.</param>
        /// <param name="maintainers">A list of maintainers for the recipe.</param>
        /// <param name="home">The URL of this recipe&#39;s home page.</param>
        /// <param name="sources">A list of URLs to source code for this project.</param>
        /// <param name="icon">A URL to an SVG or PNG image to be used as an icon.</param>
        /// <param name="deprecated">Whether this recipe is deprecated.</param>
        /// <param name="description">A description of what this recipe does.</param>
        /// <param name="license">The license information..</param>
        public QueenbeeRecipeMetadataMetaData
        (
           string name, string tag, // Required parameters
           List<string> keywords= default, List<QueenbeeRecipeMetadataMaintainer> maintainers= default, string home= default, List<string> sources= default, string icon= default, bool deprecated= default, string description= default, License license= default// Optional parameters
        )// BaseClass
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for QueenbeeRecipeMetadataMetaData and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            
            // to ensure "tag" is required (not null)
            if (tag == null)
            {
                throw new InvalidDataException("tag is a required property for QueenbeeRecipeMetadataMetaData and cannot be null");
            }
            else
            {
                this.Tag = tag;
            }
            
            this.Keywords = keywords;
            this.Maintainers = maintainers;
            this.Home = home;
            this.Sources = sources;
            this.Icon = icon;
            this.Deprecated = deprecated;
            this.Description = description;
            this.License = license;

            // Set non-required readonly properties with defaultValue
        }
        
        /// <summary>
        /// Recipe name. Make it descriptive and helpful ;)
        /// </summary>
        /// <value>Recipe name. Make it descriptive and helpful ;)</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        [JsonProperty("name")]
        public string Name { get; set; } 
        /// <summary>
        /// The tag of the recipe
        /// </summary>
        /// <value>The tag of the recipe</value>
        [DataMember(Name="tag", EmitDefaultValue=false)]
        [JsonProperty("tag")]
        public string Tag { get; set; } 
        /// <summary>
        /// A list of keywords to search the recipe by
        /// </summary>
        /// <value>A list of keywords to search the recipe by</value>
        [DataMember(Name="keywords", EmitDefaultValue=false)]
        [JsonProperty("keywords")]
        public List<string> Keywords { get; set; } 
        /// <summary>
        /// A list of maintainers for the recipe
        /// </summary>
        /// <value>A list of maintainers for the recipe</value>
        [DataMember(Name="maintainers", EmitDefaultValue=false)]
        [JsonProperty("maintainers")]
        public List<QueenbeeRecipeMetadataMaintainer> Maintainers { get; set; } 
        /// <summary>
        /// The URL of this recipe&#39;s home page
        /// </summary>
        /// <value>The URL of this recipe&#39;s home page</value>
        [DataMember(Name="home", EmitDefaultValue=false)]
        [JsonProperty("home")]
        public string Home { get; set; } 
        /// <summary>
        /// A list of URLs to source code for this project
        /// </summary>
        /// <value>A list of URLs to source code for this project</value>
        [DataMember(Name="sources", EmitDefaultValue=false)]
        [JsonProperty("sources")]
        public List<string> Sources { get; set; } 
        /// <summary>
        /// A URL to an SVG or PNG image to be used as an icon
        /// </summary>
        /// <value>A URL to an SVG or PNG image to be used as an icon</value>
        [DataMember(Name="icon", EmitDefaultValue=false)]
        [JsonProperty("icon")]
        public string Icon { get; set; } 
        /// <summary>
        /// Whether this recipe is deprecated
        /// </summary>
        /// <value>Whether this recipe is deprecated</value>
        [DataMember(Name="deprecated", EmitDefaultValue=false)]
        [JsonProperty("deprecated")]
        public bool Deprecated { get; set; } 
        /// <summary>
        /// A description of what this recipe does
        /// </summary>
        /// <value>A description of what this recipe does</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        [JsonProperty("description")]
        public string Description { get; set; } 
        /// <summary>
        /// The license information.
        /// </summary>
        /// <value>The license information.</value>
        [DataMember(Name="license", EmitDefaultValue=false)]
        [JsonProperty("license")]
        public License License { get; set; } 
        
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class QueenbeeRecipeMetadataMetaData {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Tag: ").Append(Tag).Append("\n");
            sb.Append("  Keywords: ").Append(Keywords).Append("\n");
            sb.Append("  Maintainers: ").Append(Maintainers).Append("\n");
            sb.Append("  Home: ").Append(Home).Append("\n");
            sb.Append("  Sources: ").Append(Sources).Append("\n");
            sb.Append("  Icon: ").Append(Icon).Append("\n");
            sb.Append("  Deprecated: ").Append(Deprecated).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  License: ").Append(License).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
     
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as QueenbeeRecipeMetadataMetaData);
        }

        /// <summary>
        /// Returns true if QueenbeeRecipeMetadataMetaData instances are equal
        /// </summary>
        /// <param name="input">Instance of QueenbeeRecipeMetadataMetaData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(QueenbeeRecipeMetadataMetaData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Tag == input.Tag ||
                    (this.Tag != null &&
                    this.Tag.Equals(input.Tag))
                ) && 
                (
                    this.Keywords == input.Keywords ||
                    this.Keywords != null &&
                    input.Keywords != null &&
                    this.Keywords.SequenceEqual(input.Keywords)
                ) && 
                (
                    this.Maintainers == input.Maintainers ||
                    this.Maintainers != null &&
                    input.Maintainers != null &&
                    this.Maintainers.SequenceEqual(input.Maintainers)
                ) && 
                (
                    this.Home == input.Home ||
                    (this.Home != null &&
                    this.Home.Equals(input.Home))
                ) && 
                (
                    this.Sources == input.Sources ||
                    this.Sources != null &&
                    input.Sources != null &&
                    this.Sources.SequenceEqual(input.Sources)
                ) && 
                (
                    this.Icon == input.Icon ||
                    (this.Icon != null &&
                    this.Icon.Equals(input.Icon))
                ) && 
                (
                    this.Deprecated == input.Deprecated ||
                    (this.Deprecated != null &&
                    this.Deprecated.Equals(input.Deprecated))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.License == input.License ||
                    (this.License != null &&
                    this.License.Equals(input.License))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Tag != null)
                    hashCode = hashCode * 59 + this.Tag.GetHashCode();
                if (this.Keywords != null)
                    hashCode = hashCode * 59 + this.Keywords.GetHashCode();
                if (this.Maintainers != null)
                    hashCode = hashCode * 59 + this.Maintainers.GetHashCode();
                if (this.Home != null)
                    hashCode = hashCode * 59 + this.Home.GetHashCode();
                if (this.Sources != null)
                    hashCode = hashCode * 59 + this.Sources.GetHashCode();
                if (this.Icon != null)
                    hashCode = hashCode * 59 + this.Icon.GetHashCode();
                if (this.Deprecated != null)
                    hashCode = hashCode * 59 + this.Deprecated.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.License != null)
                    hashCode = hashCode * 59 + this.License.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
