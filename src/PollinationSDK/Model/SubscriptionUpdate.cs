/* 
 * pollination-server
 *
 * Pollination Server OpenAPI Definition
 *
 * The version of the OpenAPI document: 0.22.0
 * Contact: info@pollination.cloud
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = PollinationSDK.Client.OpenAPIDateConverter;

namespace PollinationSDK.Model
{
    /// <summary>
    /// SubscriptionUpdate
    /// </summary>
    [DataContract]
    public partial class SubscriptionUpdate :  IEquatable<SubscriptionUpdate>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SubscriptionUpdate" /> class.
        /// </summary>
        /// <param name="promotionCode">A promotion code to apply a discount to the subscription.</param>
        /// <param name="toAdd">The items to add.</param>
        /// <param name="toDelete">The items to delete.</param>
        /// <param name="toSubscribe">The Pollination plan to subscribe to.</param>
        /// <param name="toUpdate">The items to update.</param>
        public SubscriptionUpdate
        (
           // Required parameters
           string promotionCode= default, List<NewSubscriptionItem> toAdd= default, List<SubscriptionItem> toDelete= default, Price toSubscribe= default, List<SubscriptionItem> toUpdate= default// Optional parameters
        )// BaseClass
        {
            this.PromotionCode = promotionCode;
            this.ToAdd = toAdd;
            this.ToDelete = toDelete;
            this.ToSubscribe = toSubscribe;
            this.ToUpdate = toUpdate;

            // Set non-required readonly properties with defaultValue
        }
        
        /// <summary>
        /// A promotion code to apply a discount to the subscription
        /// </summary>
        /// <value>A promotion code to apply a discount to the subscription</value>
        [DataMember(Name="promotion_code", EmitDefaultValue=false)]
        [JsonProperty("promotion_code")]
        public string PromotionCode { get; set; } 
        /// <summary>
        /// The items to add
        /// </summary>
        /// <value>The items to add</value>
        [DataMember(Name="to_add", EmitDefaultValue=false)]
        [JsonProperty("to_add")]
        public List<NewSubscriptionItem> ToAdd { get; set; } 
        /// <summary>
        /// The items to delete
        /// </summary>
        /// <value>The items to delete</value>
        [DataMember(Name="to_delete", EmitDefaultValue=false)]
        [JsonProperty("to_delete")]
        public List<SubscriptionItem> ToDelete { get; set; } 
        /// <summary>
        /// The Pollination plan to subscribe to
        /// </summary>
        /// <value>The Pollination plan to subscribe to</value>
        [DataMember(Name="to_subscribe", EmitDefaultValue=false)]
        [JsonProperty("to_subscribe")]
        public Price ToSubscribe { get; set; } 
        /// <summary>
        /// The items to update
        /// </summary>
        /// <value>The items to update</value>
        [DataMember(Name="to_update", EmitDefaultValue=false)]
        [JsonProperty("to_update")]
        public List<SubscriptionItem> ToUpdate { get; set; } 
        
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SubscriptionUpdate {\n");
            sb.Append("  PromotionCode: ").Append(PromotionCode).Append("\n");
            sb.Append("  ToAdd: ").Append(ToAdd).Append("\n");
            sb.Append("  ToDelete: ").Append(ToDelete).Append("\n");
            sb.Append("  ToSubscribe: ").Append(ToSubscribe).Append("\n");
            sb.Append("  ToUpdate: ").Append(ToUpdate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented, JsonSetting.ConvertSetting);
        }

        /// <summary>
        /// Returns the object from JSON string
        /// </summary>
        /// <returns>SubscriptionUpdate object</returns>
        public static SubscriptionUpdate FromJson(string json)
        {
            var obj = JsonConvert.DeserializeObject<SubscriptionUpdate>(json, JsonSetting.ConvertSetting);
            return obj;
        }

        /// <summary>
        /// Creates a new instance with the same properties.
        /// </summary>
        /// <returns>SubscriptionUpdate object</returns>
        public SubscriptionUpdate DuplicateSubscriptionUpdate()
        {
            return FromJson(this.ToJson());
        }
     
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SubscriptionUpdate);
        }

        /// <summary>
        /// Returns true if SubscriptionUpdate instances are equal
        /// </summary>
        /// <param name="input">Instance of SubscriptionUpdate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SubscriptionUpdate input)
        {
            if (input == null)
                return false;
            return 
                (
                    this.PromotionCode == input.PromotionCode ||
                    (this.PromotionCode != null &&
                    this.PromotionCode.Equals(input.PromotionCode))
                ) && 
                (
                    this.ToAdd == input.ToAdd ||
                    this.ToAdd != null &&
                    input.ToAdd != null &&
                    this.ToAdd.SequenceEqual(input.ToAdd)
                ) && 
                (
                    this.ToDelete == input.ToDelete ||
                    this.ToDelete != null &&
                    input.ToDelete != null &&
                    this.ToDelete.SequenceEqual(input.ToDelete)
                ) && 
                (
                    this.ToSubscribe == input.ToSubscribe ||
                    (this.ToSubscribe != null &&
                    this.ToSubscribe.Equals(input.ToSubscribe))
                ) && 
                (
                    this.ToUpdate == input.ToUpdate ||
                    this.ToUpdate != null &&
                    input.ToUpdate != null &&
                    this.ToUpdate.SequenceEqual(input.ToUpdate)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PromotionCode != null)
                    hashCode = hashCode * 59 + this.PromotionCode.GetHashCode();
                if (this.ToAdd != null)
                    hashCode = hashCode * 59 + this.ToAdd.GetHashCode();
                if (this.ToDelete != null)
                    hashCode = hashCode * 59 + this.ToDelete.GetHashCode();
                if (this.ToSubscribe != null)
                    hashCode = hashCode * 59 + this.ToSubscribe.GetHashCode();
                if (this.ToUpdate != null)
                    hashCode = hashCode * 59 + this.ToUpdate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
