/* 
 * pollination-server
 *
 * Pollination Server OpenAPI Definition
 *
 * The version of the OpenAPI document: 0.18.0-beta.5
 * Contact: info@pollination.cloud
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = PollinationSDK.Client.OpenAPIDateConverter;

namespace PollinationSDK.Model
{
    /// <summary>
    /// SubscriptionUpdate
    /// </summary>
    [DataContract]
    public partial class SubscriptionUpdate :  IEquatable<SubscriptionUpdate>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SubscriptionUpdate" /> class.
        /// </summary>
        /// <param name="add">The items to add.</param>
        /// <param name="delete">The items to delete.</param>
        /// <param name="update">The items to update.</param>
        public SubscriptionUpdate
        (
           // Required parameters
           List<NewSubscriptionItem> add= default, List<SubscriptionItem> delete= default, List<SubscriptionItem> update= default// Optional parameters
        )// BaseClass
        {
            this.Add = add;
            this.Delete = delete;
            this.Update = update;

            // Set non-required readonly properties with defaultValue
        }
        
        /// <summary>
        /// The items to add
        /// </summary>
        /// <value>The items to add</value>
        [DataMember(Name="add", EmitDefaultValue=false)]
        [JsonProperty("add")]
        public List<NewSubscriptionItem> Add { get; set; } 
        /// <summary>
        /// The items to delete
        /// </summary>
        /// <value>The items to delete</value>
        [DataMember(Name="delete", EmitDefaultValue=false)]
        [JsonProperty("delete")]
        public List<SubscriptionItem> Delete { get; set; } 
        /// <summary>
        /// The items to update
        /// </summary>
        /// <value>The items to update</value>
        [DataMember(Name="update", EmitDefaultValue=false)]
        [JsonProperty("update")]
        public List<SubscriptionItem> Update { get; set; } 
        
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SubscriptionUpdate {\n");
            sb.Append("  Add: ").Append(Add).Append("\n");
            sb.Append("  Delete: ").Append(Delete).Append("\n");
            sb.Append("  Update: ").Append(Update).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented, JsonSetting.ConvertSetting);
        }

        /// <summary>
        /// Returns the object from JSON string
        /// </summary>
        /// <returns>SubscriptionUpdate object</returns>
        public static SubscriptionUpdate FromJson(string json)
        {
            var obj = JsonConvert.DeserializeObject<SubscriptionUpdate>(json, JsonSetting.ConvertSetting);
            return obj;
        }

        /// <summary>
        /// Creates a new instance with the same properties.
        /// </summary>
        /// <returns>SubscriptionUpdate object</returns>
        public SubscriptionUpdate DuplicateSubscriptionUpdate()
        {
            return FromJson(this.ToJson());
        }
     
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SubscriptionUpdate);
        }

        /// <summary>
        /// Returns true if SubscriptionUpdate instances are equal
        /// </summary>
        /// <param name="input">Instance of SubscriptionUpdate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SubscriptionUpdate input)
        {
            if (input == null)
                return false;
            return 
                (
                    this.Add == input.Add ||
                    this.Add != null &&
                    input.Add != null &&
                    this.Add.SequenceEqual(input.Add)
                ) && 
                (
                    this.Delete == input.Delete ||
                    this.Delete != null &&
                    input.Delete != null &&
                    this.Delete.SequenceEqual(input.Delete)
                ) && 
                (
                    this.Update == input.Update ||
                    this.Update != null &&
                    input.Update != null &&
                    this.Update.SequenceEqual(input.Update)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Add != null)
                    hashCode = hashCode * 59 + this.Add.GetHashCode();
                if (this.Delete != null)
                    hashCode = hashCode * 59 + this.Delete.GetHashCode();
                if (this.Update != null)
                    hashCode = hashCode * 59 + this.Update.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
