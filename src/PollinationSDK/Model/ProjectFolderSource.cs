/* 
 * Pollination Server
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.5.32
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;


namespace PollinationSDK.Model
{
    /// <summary>
    /// Project Folder Source  This is the path to a folder where files and folders can be sourced. In the context of a desktop run Workflow this folder will correspond to a local folder. In the context of a workflow run on Pollination this folder will correspond to a Project scoped folder.
    /// </summary>
    [DataContract]
    public partial class ProjectFolderSource :  IEquatable<ProjectFolderSource>, IValidatableObject
    {
        /// <summary>
        /// Defines Type
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum ProjectFolder for value: project-folder
            /// </summary>
            [EnumMember(Value = "project-folder")]
            ProjectFolder = 1

        }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum Type { get; set; }   
        /// <summary>
        /// Initializes a new instance of the <see cref="ProjectFolderSource" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ProjectFolderSource() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ProjectFolderSource" /> class.
        /// </summary>
        /// <param name="type">type (required).</param>
        /// <param name="path">For a local filesystem this can be \&quot;C:\\Users\\me\\simulations\\test\&quot;. This will correspond to the run specific folder ..</param>
        public ProjectFolderSource
        (
           TypeEnum type, // Required parameters
           string path= default// Optional parameters
        )// BaseClass
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for ProjectFolderSource and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            
            this.Path = path;

            // Set non-required readonly properties with defaultValue
        }
        
        /// <summary>
        /// For a local filesystem this can be \&quot;C:\\Users\\me\\simulations\\test\&quot;. This will correspond to the run specific folder .
        /// </summary>
        /// <value>For a local filesystem this can be \&quot;C:\\Users\\me\\simulations\\test\&quot;. This will correspond to the run specific folder .</value>
        [DataMember(Name="path", EmitDefaultValue=false)]
        [JsonProperty("path")]
        public string Path { get; set; } 
        
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProjectFolderSource {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented, JsonSetting.ConvertSetting);
        }

        /// <summary>
        /// Returns the object from JSON string
        /// </summary>
        /// <returns>ProjectFolderSource object</returns>
        public static ProjectFolderSource FromJson(string json)
        {
            var obj = JsonConvert.DeserializeObject<ProjectFolderSource>(json, JsonSetting.ConvertSetting);
            return obj;
        }

        /// <summary>
        /// Creates a new instance with the same properties.
        /// </summary>
        /// <returns>ProjectFolderSource object</returns>
        public ProjectFolderSource DuplicateProjectFolderSource()
        {
            return FromJson(this.ToJson());
        }
     
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProjectFolderSource);
        }

        /// <summary>
        /// Returns true if ProjectFolderSource instances are equal
        /// </summary>
        /// <param name="input">Instance of ProjectFolderSource to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProjectFolderSource input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Path == input.Path ||
                    (this.Path != null &&
                    this.Path.Equals(input.Path))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Path != null)
                    hashCode = hashCode * 59 + this.Path.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
