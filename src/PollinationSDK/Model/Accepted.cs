/* 
 * Pollination Server
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.5.28
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;


namespace PollinationSDK.Model
{
    /// <summary>
    /// Accepted request response.
    /// </summary>
    [DataContract]
    public partial class Accepted :  IEquatable<Accepted>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Accepted" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Accepted() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Accepted" /> class.
        /// </summary>
        /// <param name="url">Url to access the requested resource. (required).</param>
        /// <param name="message"> A human readable message (default to &quot;The request is accepted. Use url to access the resource once ready.&quot;).</param>
        public Accepted
        (
           string url, // Required parameters
           string message = "The request is accepted. Use url to access the resource once ready."// Optional parameters
        )// BaseClass
        {
            // to ensure "url" is required (not null)
            if (url == null)
            {
                throw new InvalidDataException("url is a required property for Accepted and cannot be null");
            }
            else
            {
                this.Url = url;
            }
            
            // use default value if no "message" provided
            if (message == null)
            {
                this.Message ="The request is accepted. Use url to access the resource once ready.";
            }
            else
            {
                this.Message = message;
            }

            // Set non-required readonly properties with defaultValue
        }
        
        /// <summary>
        /// Url to access the requested resource.
        /// </summary>
        /// <value>Url to access the requested resource.</value>
        [DataMember(Name="url", EmitDefaultValue=false)]
        [JsonProperty("url")]
        public string Url { get; set; } 
        /// <summary>
        ///  A human readable message
        /// </summary>
        /// <value> A human readable message</value>
        [DataMember(Name="message", EmitDefaultValue=false)]
        [JsonProperty("message")]
        public string Message { get; set; }  = "The request is accepted. Use url to access the resource once ready.";
        
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Accepted {\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
     
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Accepted);
        }

        /// <summary>
        /// Returns true if Accepted instances are equal
        /// </summary>
        /// <param name="input">Instance of Accepted to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Accepted input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                ) && 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Url != null)
                    hashCode = hashCode * 59 + this.Url.GetHashCode();
                if (this.Message != null)
                    hashCode = hashCode * 59 + this.Message.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Url (string) maxLength
            if(this.Url != null && this.Url.Length > 2083)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Url, length must be less than 2083.", new [] { "Url" });
            }

            // Url (string) minLength
            if(this.Url != null && this.Url.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Url, length must be greater than 1.", new [] { "Url" });
            }

            yield break;
        }
    }
}
