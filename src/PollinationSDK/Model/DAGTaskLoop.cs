/* 
 * Pollination Server
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.7.6
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;


namespace PollinationSDK.Model
{
    /// <summary>
    /// Loop configuration for the task.  This will run the template provided multiple times and in parallel relative to an input or task parameter which should be a list.
    /// </summary>
    [DataContract]
    public partial class DAGTaskLoop :  IEquatable<DAGTaskLoop>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DAGTaskLoop" /> class.
        /// </summary>
        /// <param name="from">from.</param>
        /// <param name="value">A list of values or JSON objects to loop over..</param>
        /// <param name="control">Parameters to control some loop behavior for this task.</param>
        public DAGTaskLoop
        (
           // Required parameters
           Object from= default, List<Object> value= default, LoopControl control= default// Optional parameters
        )// BaseClass
        {
            this.From = from;
            this.Value = value;
            this.Control = control;

            // Set non-required readonly properties with defaultValue
        }
        
        /// <summary>
        /// Gets or Sets From
        /// </summary>
        [DataMember(Name="from", EmitDefaultValue=false)]
        [JsonProperty("from")]
        public Object From { get; set; } 
        /// <summary>
        /// A list of values or JSON objects to loop over.
        /// </summary>
        /// <value>A list of values or JSON objects to loop over.</value>
        [DataMember(Name="value", EmitDefaultValue=false)]
        [JsonProperty("value")]
        public List<Object> Value { get; set; } 
        /// <summary>
        /// Parameters to control some loop behavior for this task
        /// </summary>
        /// <value>Parameters to control some loop behavior for this task</value>
        [DataMember(Name="control", EmitDefaultValue=false)]
        [JsonProperty("control")]
        public LoopControl Control { get; set; } 
        
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DAGTaskLoop {\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  Control: ").Append(Control).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented, JsonSetting.ConvertSetting);
        }

        /// <summary>
        /// Returns the object from JSON string
        /// </summary>
        /// <returns>DAGTaskLoop object</returns>
        public static DAGTaskLoop FromJson(string json)
        {
            var obj = JsonConvert.DeserializeObject<DAGTaskLoop>(json, JsonSetting.ConvertSetting);
            return obj;
        }

        /// <summary>
        /// Creates a new instance with the same properties.
        /// </summary>
        /// <returns>DAGTaskLoop object</returns>
        public DAGTaskLoop DuplicateDAGTaskLoop()
        {
            return FromJson(this.ToJson());
        }
     
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DAGTaskLoop);
        }

        /// <summary>
        /// Returns true if DAGTaskLoop instances are equal
        /// </summary>
        /// <param name="input">Instance of DAGTaskLoop to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DAGTaskLoop input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.From == input.From ||
                    (this.From != null &&
                    this.From.Equals(input.From))
                ) && 
                (
                    this.Value == input.Value ||
                    this.Value != null &&
                    input.Value != null &&
                    this.Value.SequenceEqual(input.Value)
                ) && 
                (
                    this.Control == input.Control ||
                    (this.Control != null &&
                    this.Control.Equals(input.Control))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.From != null)
                    hashCode = hashCode * 59 + this.From.GetHashCode();
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                if (this.Control != null)
                    hashCode = hashCode * 59 + this.Control.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
