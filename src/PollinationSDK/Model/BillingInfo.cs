/* 
 * pollination-server
 *
 * Pollination Server OpenAPI Definition
 *
 * Contact: info@pollination.cloud
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

extern alias LBTNewtonsoft;  extern alias LBTRestSharp; using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using LBTNewtonsoft::Newtonsoft.Json;
using LBTNewtonsoft::Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;


namespace PollinationSDK
{
    /// <summary>
    /// BillingInfo
    /// </summary>
    [DataContract(Name = "BillingInfo")]
    public partial class BillingInfo : OpenAPIGenBaseModel, IEquatable<BillingInfo>, IValidatableObject
    {
        /// <summary>
        /// The reason the subscription was paused
        /// </summary>
        /// <value>The reason the subscription was paused</value>
        [DataMember(Name="paused_reason")]
        public PausedReason PausedReason { get; set; }   
        /// <summary>
        /// Initializes a new instance of the <see cref="BillingInfo" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BillingInfo() 
        { 
            // Set non-required readonly properties with defaultValue
            this.Type = "BillingInfo";
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="BillingInfo" /> class.
        /// </summary>
        /// <param name="userEmail">The email used for billing on this subscription (required).</param>
        /// <param name="updateUrl">The url to update the billing info (required).</param>
        /// <param name="cancelUrl">The url to cancel the subscription (required).</param>
        /// <param name="signupDate">The date the subscription was created (required).</param>
        /// <param name="paymentInformation">The payment method used (required).</param>
        /// <param name="lastPayment">The last payment made (required).</param>
        /// <param name="nextPayment">The last payment made.</param>
        /// <param name="pausedAt">The date the subscription was paused.</param>
        /// <param name="pausedFrom">The date the subscription will be paused from.</param>
        /// <param name="pausedReason">The reason the subscription was paused.</param>
        public BillingInfo
        (
           string userEmail, string updateUrl, string cancelUrl, DateTime signupDate, PaymentMethod paymentInformation, SubscriptionPayment lastPayment, // Required parameters
           SubscriptionPayment nextPayment= default, DateTime pausedAt= default, DateTime pausedFrom= default, PausedReason pausedReason= default // Optional parameters
        ) : base()// BaseClass
        {
            // to ensure "userEmail" is required (not null)
            this.UserEmail = userEmail ?? throw new ArgumentNullException("userEmail is a required property for BillingInfo and cannot be null");
            // to ensure "updateUrl" is required (not null)
            this.UpdateUrl = updateUrl ?? throw new ArgumentNullException("updateUrl is a required property for BillingInfo and cannot be null");
            // to ensure "cancelUrl" is required (not null)
            this.CancelUrl = cancelUrl ?? throw new ArgumentNullException("cancelUrl is a required property for BillingInfo and cannot be null");
            this.SignupDate = signupDate;
            // to ensure "paymentInformation" is required (not null)
            this.PaymentInformation = paymentInformation ?? throw new ArgumentNullException("paymentInformation is a required property for BillingInfo and cannot be null");
            // to ensure "lastPayment" is required (not null)
            this.LastPayment = lastPayment ?? throw new ArgumentNullException("lastPayment is a required property for BillingInfo and cannot be null");
            this.NextPayment = nextPayment;
            this.PausedAt = pausedAt;
            this.PausedFrom = pausedFrom;
            this.PausedReason = pausedReason;

            // Set non-required readonly properties with defaultValue
            this.Type = "BillingInfo";
        }

        //============================================== is ReadOnly 
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type")]
        public override string Type { get; protected set; }  = "BillingInfo";

        /// <summary>
        /// The email used for billing on this subscription
        /// </summary>
        /// <value>The email used for billing on this subscription</value>
        [DataMember(Name = "user_email", IsRequired = true)]
        public string UserEmail { get; set; } 
        /// <summary>
        /// The url to update the billing info
        /// </summary>
        /// <value>The url to update the billing info</value>
        [DataMember(Name = "update_url", IsRequired = true)]
        public string UpdateUrl { get; set; } 
        /// <summary>
        /// The url to cancel the subscription
        /// </summary>
        /// <value>The url to cancel the subscription</value>
        [DataMember(Name = "cancel_url", IsRequired = true)]
        public string CancelUrl { get; set; } 
        /// <summary>
        /// The date the subscription was created
        /// </summary>
        /// <value>The date the subscription was created</value>
        [DataMember(Name = "signup_date", IsRequired = true)]
        public DateTime SignupDate { get; set; } 
        /// <summary>
        /// The payment method used
        /// </summary>
        /// <value>The payment method used</value>
        [DataMember(Name = "payment_information", IsRequired = true)]
        public PaymentMethod PaymentInformation { get; set; } 
        /// <summary>
        /// The last payment made
        /// </summary>
        /// <value>The last payment made</value>
        [DataMember(Name = "last_payment", IsRequired = true)]
        public SubscriptionPayment LastPayment { get; set; } 
        /// <summary>
        /// The last payment made
        /// </summary>
        /// <value>The last payment made</value>
        [DataMember(Name = "next_payment")]
        public SubscriptionPayment NextPayment { get; set; } 
        /// <summary>
        /// The date the subscription was paused
        /// </summary>
        /// <value>The date the subscription was paused</value>
        [DataMember(Name = "paused_at")]
        public DateTime PausedAt { get; set; } 
        /// <summary>
        /// The date the subscription will be paused from
        /// </summary>
        /// <value>The date the subscription will be paused from</value>
        [DataMember(Name = "paused_from")]
        public DateTime PausedFrom { get; set; } 

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            return "BillingInfo";
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString(bool detailed)
        {
            if (!detailed)
                return this.ToString();
            
            var sb = new StringBuilder();
            sb.Append("BillingInfo:\n");
            sb.Append("  Type: ").Append(this.Type).Append("\n");
            sb.Append("  UserEmail: ").Append(this.UserEmail).Append("\n");
            sb.Append("  UpdateUrl: ").Append(this.UpdateUrl).Append("\n");
            sb.Append("  CancelUrl: ").Append(this.CancelUrl).Append("\n");
            sb.Append("  SignupDate: ").Append(this.SignupDate).Append("\n");
            sb.Append("  PaymentInformation: ").Append(this.PaymentInformation).Append("\n");
            sb.Append("  LastPayment: ").Append(this.LastPayment).Append("\n");
            sb.Append("  NextPayment: ").Append(this.NextPayment).Append("\n");
            sb.Append("  PausedAt: ").Append(this.PausedAt).Append("\n");
            sb.Append("  PausedFrom: ").Append(this.PausedFrom).Append("\n");
            sb.Append("  PausedReason: ").Append(this.PausedReason).Append("\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the object from JSON string
        /// </summary>
        /// <returns>BillingInfo object</returns>
        public static BillingInfo FromJson(string json)
        {
            var obj = JsonConvert.DeserializeObject<BillingInfo>(json, JsonSetting.AnyOfConvertSetting);
            if (obj == null)
                return null;
            return obj.Type.ToLower() == obj.GetType().Name.ToLower() ? obj : null;
        }

        /// <summary>
        /// Creates a new instance with the same properties.
        /// </summary>
        /// <returns>BillingInfo object</returns>
        public virtual BillingInfo DuplicateBillingInfo()
        {
            return FromJson(this.ToJson());
        }

        /// <summary>
        /// Creates a new instance with the same properties.
        /// </summary>
        /// <returns>OpenAPIGenBaseModel</returns>
        public override OpenAPIGenBaseModel Duplicate()
        {
            return DuplicateBillingInfo();
        }

        /// <summary>
        /// Creates a new instance with the same properties.
        /// </summary>
        /// <returns>OpenAPIGenBaseModel</returns>
        public override OpenAPIGenBaseModel DuplicateOpenAPIGenBaseModel()
        {
            return DuplicateBillingInfo();
        }
     
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            input = input is AnyOf anyOf ? anyOf.Obj : input;
            return this.Equals(input as BillingInfo);
        }

        /// <summary>
        /// Returns true if BillingInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of BillingInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BillingInfo input)
        {
            if (input == null)
                return false;
            return base.Equals(input) && 
                    Extension.Equals(this.UserEmail, input.UserEmail) && 
                    Extension.Equals(this.UpdateUrl, input.UpdateUrl) && 
                    Extension.Equals(this.CancelUrl, input.CancelUrl) && 
                    Extension.Equals(this.SignupDate, input.SignupDate) && 
                    Extension.Equals(this.PaymentInformation, input.PaymentInformation) && 
                    Extension.Equals(this.LastPayment, input.LastPayment) && 
                    Extension.Equals(this.NextPayment, input.NextPayment) && 
                    Extension.Equals(this.PausedAt, input.PausedAt) && 
                    Extension.Equals(this.PausedFrom, input.PausedFrom) && 
                    Extension.Equals(this.PausedReason, input.PausedReason) && 
                    Extension.Equals(this.Type, input.Type);
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.UserEmail != null)
                    hashCode = hashCode * 59 + this.UserEmail.GetHashCode();
                if (this.UpdateUrl != null)
                    hashCode = hashCode * 59 + this.UpdateUrl.GetHashCode();
                if (this.CancelUrl != null)
                    hashCode = hashCode * 59 + this.CancelUrl.GetHashCode();
                if (this.SignupDate != null)
                    hashCode = hashCode * 59 + this.SignupDate.GetHashCode();
                if (this.PaymentInformation != null)
                    hashCode = hashCode * 59 + this.PaymentInformation.GetHashCode();
                if (this.LastPayment != null)
                    hashCode = hashCode * 59 + this.LastPayment.GetHashCode();
                if (this.NextPayment != null)
                    hashCode = hashCode * 59 + this.NextPayment.GetHashCode();
                if (this.PausedAt != null)
                    hashCode = hashCode * 59 + this.PausedAt.GetHashCode();
                if (this.PausedFrom != null)
                    hashCode = hashCode * 59 + this.PausedFrom.GetHashCode();
                if (this.PausedReason != null)
                    hashCode = hashCode * 59 + this.PausedReason.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in base.BaseValidate(validationContext)) yield return x;

            
            // Type (string) pattern
            Regex regexType = new Regex(@"^BillingInfo$", RegexOptions.CultureInvariant);
            if (this.Type != null && false == regexType.Match(this.Type).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Type, must match a pattern of " + regexType, new [] { "Type" });
            }

            yield break;
        }
    }
}
