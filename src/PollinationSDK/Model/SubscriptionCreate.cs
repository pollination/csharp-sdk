/* 
 * pollination-server
 *
 * Pollination Server OpenAPI Definition
 *
 * Contact: info@pollination.cloud
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;


namespace PollinationSDK
{
    /// <summary>
    /// SubscriptionCreate
    /// </summary>
    [DataContract(Name = "SubscriptionCreate")]
    public partial class SubscriptionCreate : OpenAPIGenBaseModel, IEquatable<SubscriptionCreate>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SubscriptionCreate" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SubscriptionCreate() 
        { 
            // Set non-required readonly properties with defaultValue
            this.Type = "SubscriptionCreate";
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="SubscriptionCreate" /> class.
        /// </summary>
        /// <param name="account">The name of the account to create subscription for (required).</param>
        /// <param name="planId">The ID of the plan to subscribe to (required).</param>
        /// <param name="quantity">The number of subscriptions to create (default to 1).</param>
        public SubscriptionCreate
        (
           string account, int planId, // Required parameters
           int quantity = 1 // Optional parameters
        ) : base()// BaseClass
        {
            // to ensure "account" is required (not null)
            this.Account = account ?? throw new ArgumentNullException("account is a required property for SubscriptionCreate and cannot be null");
            this.PlanId = planId;
            this.Quantity = quantity;

            // Set non-required readonly properties with defaultValue
            this.Type = "SubscriptionCreate";
        }

        //============================================== is ReadOnly 
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type")]
        public override string Type { get; protected set; }  = "SubscriptionCreate";

        /// <summary>
        /// The name of the account to create subscription for
        /// </summary>
        /// <value>The name of the account to create subscription for</value>
        [DataMember(Name = "account", IsRequired = true)]
        public string Account { get; set; } 
        /// <summary>
        /// The ID of the plan to subscribe to
        /// </summary>
        /// <value>The ID of the plan to subscribe to</value>
        [DataMember(Name = "plan_id", IsRequired = true)]
        public int PlanId { get; set; } 
        /// <summary>
        /// The number of subscriptions to create
        /// </summary>
        /// <value>The number of subscriptions to create</value>
        [DataMember(Name = "quantity")]
        public int Quantity { get; set; }  = 1;

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            return "SubscriptionCreate";
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString(bool detailed)
        {
            if (!detailed)
                return this.ToString();
            
            var sb = new StringBuilder();
            sb.Append("SubscriptionCreate:\n");
            sb.Append("  Type: ").Append(this.Type).Append("\n");
            sb.Append("  Account: ").Append(this.Account).Append("\n");
            sb.Append("  PlanId: ").Append(this.PlanId).Append("\n");
            sb.Append("  Quantity: ").Append(this.Quantity).Append("\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the object from JSON string
        /// </summary>
        /// <returns>SubscriptionCreate object</returns>
        public static SubscriptionCreate FromJson(string json)
        {
            var obj = JsonConvert.DeserializeObject<SubscriptionCreate>(json, JsonSetting.AnyOfConvertSetting);
            if (obj == null)
                return null;
            return obj.Type.ToLower() == obj.GetType().Name.ToLower() ? obj : null;
        }

        /// <summary>
        /// Creates a new instance with the same properties.
        /// </summary>
        /// <returns>SubscriptionCreate object</returns>
        public virtual SubscriptionCreate DuplicateSubscriptionCreate()
        {
            return FromJson(this.ToJson());
        }

        /// <summary>
        /// Creates a new instance with the same properties.
        /// </summary>
        /// <returns>OpenAPIGenBaseModel</returns>
        public override OpenAPIGenBaseModel Duplicate()
        {
            return DuplicateSubscriptionCreate();
        }

        /// <summary>
        /// Creates a new instance with the same properties.
        /// </summary>
        /// <returns>OpenAPIGenBaseModel</returns>
        public override OpenAPIGenBaseModel DuplicateOpenAPIGenBaseModel()
        {
            return DuplicateSubscriptionCreate();
        }
     
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            input = input is AnyOf anyOf ? anyOf.Obj : input;
            return this.Equals(input as SubscriptionCreate);
        }

        /// <summary>
        /// Returns true if SubscriptionCreate instances are equal
        /// </summary>
        /// <param name="input">Instance of SubscriptionCreate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SubscriptionCreate input)
        {
            if (input == null)
                return false;
            return base.Equals(input) && 
                    Extension.Equals(this.Account, input.Account) && 
                    Extension.Equals(this.PlanId, input.PlanId) && 
                    Extension.Equals(this.Quantity, input.Quantity) && 
                    Extension.Equals(this.Type, input.Type);
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.Account != null)
                    hashCode = hashCode * 59 + this.Account.GetHashCode();
                if (this.PlanId != null)
                    hashCode = hashCode * 59 + this.PlanId.GetHashCode();
                if (this.Quantity != null)
                    hashCode = hashCode * 59 + this.Quantity.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in base.BaseValidate(validationContext)) yield return x;

            
            // Type (string) pattern
            Regex regexType = new Regex(@"^SubscriptionCreate$", RegexOptions.CultureInvariant);
            if (this.Type != null && false == regexType.Match(this.Type).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Type, must match a pattern of " + regexType, new [] { "Type" });
            }

            yield break;
        }
    }
}
