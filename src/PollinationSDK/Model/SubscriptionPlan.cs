/* 
 * pollination-server
 *
 * Pollination Server OpenAPI Definition
 *
 * Contact: info@pollination.cloud
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;


namespace PollinationSDK
{
    /// <summary>
    /// A Subscription plan
    /// </summary>
    [DataContract(Name = "SubscriptionPlan")]
    public partial class SubscriptionPlan : OpenAPIGenBaseModel, IEquatable<SubscriptionPlan>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SubscriptionPlan" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SubscriptionPlan() 
        { 
            // Set non-required readonly properties with defaultValue
            this.Type = "SubscriptionPlan";
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="SubscriptionPlan" /> class.
        /// </summary>
        /// <param name="slug">A slug of the config plan used to create this subscription (required).</param>
        /// <param name="name">A name of the config plan used to create this subscription (required).</param>
        /// <param name="accountTypes">The types of account to which the plan can be applied (required).</param>
        /// <param name="quotas">A list of quota plans for a given subscription.</param>
        public SubscriptionPlan
        (
           string slug, string name, List<AccountType> accountTypes, // Required parameters
           List<QuotaPlan> quotas= default // Optional parameters
        ) : base()// BaseClass
        {
            // to ensure "slug" is required (not null)
            this.Slug = slug ?? throw new ArgumentNullException("slug is a required property for SubscriptionPlan and cannot be null");
            // to ensure "name" is required (not null)
            this.Name = name ?? throw new ArgumentNullException("name is a required property for SubscriptionPlan and cannot be null");
            // to ensure "accountTypes" is required (not null)
            this.AccountTypes = accountTypes ?? throw new ArgumentNullException("accountTypes is a required property for SubscriptionPlan and cannot be null");
            this.Quotas = quotas;

            // Set non-required readonly properties with defaultValue
            this.Type = "SubscriptionPlan";
        }

        //============================================== is ReadOnly 
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = true)]
        public override string Type { get; protected internal set; }  = "SubscriptionPlan";

        /// <summary>
        /// A slug of the config plan used to create this subscription
        /// </summary>
        /// <value>A slug of the config plan used to create this subscription</value>
        [DataMember(Name = "slug", IsRequired = true, EmitDefaultValue = false)]
        public string Slug { get; set; } 
        /// <summary>
        /// A name of the config plan used to create this subscription
        /// </summary>
        /// <value>A name of the config plan used to create this subscription</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = false)]
        public string Name { get; set; } 
        /// <summary>
        /// The types of account to which the plan can be applied
        /// </summary>
        /// <value>The types of account to which the plan can be applied</value>
        [DataMember(Name = "account_types", IsRequired = true, EmitDefaultValue = false)]
        public List<AccountType> AccountTypes { get; set; } 
        /// <summary>
        /// A list of quota plans for a given subscription
        /// </summary>
        /// <value>A list of quota plans for a given subscription</value>
        [DataMember(Name = "quotas", EmitDefaultValue = false)]
        public List<QuotaPlan> Quotas { get; set; } 

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            return "SubscriptionPlan";
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString(bool detailed)
        {
            if (!detailed)
                return this.ToString();
            
            var sb = new StringBuilder();
            sb.Append("SubscriptionPlan:\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Slug: ").Append(Slug).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  AccountTypes: ").Append(AccountTypes).Append("\n");
            sb.Append("  Quotas: ").Append(Quotas).Append("\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the object from JSON string
        /// </summary>
        /// <returns>SubscriptionPlan object</returns>
        public static SubscriptionPlan FromJson(string json)
        {
            var obj = JsonConvert.DeserializeObject<SubscriptionPlan>(json, JsonSetting.AnyOfConvertSetting);
            if (obj == null)
                return null;
            return obj.Type.ToLower() == obj.GetType().Name.ToLower() ? obj : null;
        }

        /// <summary>
        /// Creates a new instance with the same properties.
        /// </summary>
        /// <returns>SubscriptionPlan object</returns>
        public virtual SubscriptionPlan DuplicateSubscriptionPlan()
        {
            return FromJson(this.ToJson());
        }

        /// <summary>
        /// Creates a new instance with the same properties.
        /// </summary>
        /// <returns>OpenAPIGenBaseModel</returns>
        public override OpenAPIGenBaseModel Duplicate()
        {
            return DuplicateSubscriptionPlan();
        }

        /// <summary>
        /// Creates a new instance with the same properties.
        /// </summary>
        /// <returns>OpenAPIGenBaseModel</returns>
        public override OpenAPIGenBaseModel DuplicateOpenAPIGenBaseModel()
        {
            return DuplicateSubscriptionPlan();
        }
     
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            input = input is AnyOf anyOf ? anyOf.Obj : input;
            return this.Equals(input as SubscriptionPlan);
        }

        /// <summary>
        /// Returns true if SubscriptionPlan instances are equal
        /// </summary>
        /// <param name="input">Instance of SubscriptionPlan to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SubscriptionPlan input)
        {
            if (input == null)
                return false;
            return base.Equals(input) && 
                (
                    this.Slug == input.Slug ||
                    (this.Slug != null &&
                    this.Slug.Equals(input.Slug))
                ) && base.Equals(input) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && base.Equals(input) && 
                (
                    this.AccountTypes == input.AccountTypes ||
                    this.AccountTypes != null &&
                    input.AccountTypes != null &&
                    this.AccountTypes.SequenceEqual(input.AccountTypes)
                ) && base.Equals(input) && 
                (
                    this.Quotas == input.Quotas ||
                    this.Quotas != null &&
                    input.Quotas != null &&
                    this.Quotas.SequenceEqual(input.Quotas)
                ) && base.Equals(input) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.Slug != null)
                    hashCode = hashCode * 59 + this.Slug.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.AccountTypes != null)
                    hashCode = hashCode * 59 + this.AccountTypes.GetHashCode();
                if (this.Quotas != null)
                    hashCode = hashCode * 59 + this.Quotas.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in base.BaseValidate(validationContext)) yield return x;

            
            // Type (string) pattern
            Regex regexType = new Regex(@"^SubscriptionPlan$", RegexOptions.CultureInvariant);
            if (false == regexType.Match(this.Type).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Type, must match a pattern of " + regexType, new [] { "Type" });
            }

            yield break;
        }
    }
}
