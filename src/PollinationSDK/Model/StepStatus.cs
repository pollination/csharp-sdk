/* 
 * pollination-server
 *
 * Pollination Server OpenAPI Definition
 *
 * The version of the OpenAPI document: 0.16.0
 * Contact: info@pollination.cloud
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using JsonSubTypes;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = PollinationSDK.Client.OpenAPIDateConverter;

namespace PollinationSDK.Model
{
    /// <summary>
    /// The Status of a Job Step
    /// </summary>
    [DataContract]
    [JsonConverter(typeof(JsonSubtypes), "type")]
    public partial class StepStatus : OpenAPIGenBaseModel,  IEquatable<StepStatus>, IValidatableObject
    {
        /// <summary>
        /// The type of step this status is for. Can be \&quot;Function\&quot;, \&quot;DAG\&quot; or \&quot;Loop\&quot;
        /// </summary>
        /// <value>The type of step this status is for. Can be \&quot;Function\&quot;, \&quot;DAG\&quot; or \&quot;Loop\&quot;</value>
        [DataMember(Name="status_type", EmitDefaultValue=true)]
        public StatusType StatusType { get; set; }
        /// <summary>
        /// The status of this step.
        /// </summary>
        /// <value>The status of this step.</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StepStatusEnum? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="StepStatus" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected StepStatus() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="StepStatus" /> class.
        /// </summary>
        /// <param name="inputs">The inputs used by this step. (required).</param>
        /// <param name="outputs">The outputs produced by this step. (required).</param>
        /// <param name="startedAt">The time at which the task was started (required).</param>
        /// <param name="id">The step unique ID (required).</param>
        /// <param name="name">A human readable name for the step. Usually defined by the DAG task name but can be extended if the step is part of a loop for example. This name is unique within the boundary of the DAG/Job that generated it. (required).</param>
        /// <param name="statusType">The type of step this status is for. Can be \&quot;Function\&quot;, \&quot;DAG\&quot; or \&quot;Loop\&quot; (required).</param>
        /// <param name="templateRef">The name of the template that spawned this step (required).</param>
        /// <param name="childrenIds">A list of child step IDs (required).</param>
        /// <param name="outboundSteps">A list of the last step to ran in the context of this step. In the case of a DAG or a job this will be the last step that has been executed. It will remain empty for functions. (required).</param>
        /// <param name="annotations">An optional dictionary to add annotations to inputs. These annotations will be used by the client side libraries..</param>
        /// <param name="message">Any message produced by the task. Usually error/debugging hints..</param>
        /// <param name="finishedAt">The time at which the task was completed.</param>
        /// <param name="source">Source url for the status object. It can be a recipe or a function..</param>
        /// <param name="status">The status of this step..</param>
        /// <param name="command">The command used to run this step. Only applies to Function steps..</param>
        /// <param name="boundaryId">This indicates the step ID of the associated template root             step in which this step belongs to. A DAG step will have the id of the             parent DAG for example..</param>
        public StepStatus(List<AnyOf<StepStringInput,StepIntegerInput,StepNumberInput,StepBooleanInput,StepFolderInput,StepFileInput,StepPathInput,StepArrayInput,StepJSONObjectInput>> inputs = default(List<AnyOf<StepStringInput,StepIntegerInput,StepNumberInput,StepBooleanInput,StepFolderInput,StepFileInput,StepPathInput,StepArrayInput,StepJSONObjectInput>>), List<AnyOf<StepStringOutput,StepIntegerOutput,StepNumberOutput,StepBooleanOutput,StepFolderOutput,StepFileOutput,StepPathOutput,StepArrayOutput,StepJSONObjectOutput>> outputs = default(List<AnyOf<StepStringOutput,StepIntegerOutput,StepNumberOutput,StepBooleanOutput,StepFolderOutput,StepFileOutput,StepPathOutput,StepArrayOutput,StepJSONObjectOutput>>), DateTime startedAt = default(DateTime), string id = default(string), string name = default(string), StatusType statusType = default(StatusType), string templateRef = default(string), List<string> childrenIds = default(List<string>), List<string> outboundSteps = default(List<string>), Dictionary<string, string> annotations = default(Dictionary<string, string>), string message = default(string), DateTime finishedAt = default(DateTime), string source = default(string), StepStatusEnum? status = default(StepStatusEnum?), string command = default(string), string boundaryId = default(string)) : base()
        {
            // to ensure "inputs" is required (not null)
            if (inputs == null)
            {
                throw new InvalidDataException("inputs is a required property for StepStatus and cannot be null");
            }
            else
            {
                this.Inputs = inputs;
            }
            
            // to ensure "outputs" is required (not null)
            if (outputs == null)
            {
                throw new InvalidDataException("outputs is a required property for StepStatus and cannot be null");
            }
            else
            {
                this.Outputs = outputs;
            }
            
            // to ensure "startedAt" is required (not null)
            if (startedAt == null)
            {
                throw new InvalidDataException("startedAt is a required property for StepStatus and cannot be null");
            }
            else
            {
                this.StartedAt = startedAt;
            }
            
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new InvalidDataException("id is a required property for StepStatus and cannot be null");
            }
            else
            {
                this.Id = id;
            }
            
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for StepStatus and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            
            // to ensure "statusType" is required (not null)
            if (statusType == null)
            {
                throw new InvalidDataException("statusType is a required property for StepStatus and cannot be null");
            }
            else
            {
                this.StatusType = statusType;
            }
            
            // to ensure "templateRef" is required (not null)
            if (templateRef == null)
            {
                throw new InvalidDataException("templateRef is a required property for StepStatus and cannot be null");
            }
            else
            {
                this.TemplateRef = templateRef;
            }
            
            // to ensure "childrenIds" is required (not null)
            if (childrenIds == null)
            {
                throw new InvalidDataException("childrenIds is a required property for StepStatus and cannot be null");
            }
            else
            {
                this.ChildrenIds = childrenIds;
            }
            
            // to ensure "outboundSteps" is required (not null)
            if (outboundSteps == null)
            {
                throw new InvalidDataException("outboundSteps is a required property for StepStatus and cannot be null");
            }
            else
            {
                this.OutboundSteps = outboundSteps;
            }
            
            this.Annotations = annotations;
            this.Message = message;
            this.FinishedAt = finishedAt;
            this.Source = source;
            this.Status = status;
            this.Command = command;
            this.BoundaryId = boundaryId;
        }
        
        /// <summary>
        /// The inputs used by this step.
        /// </summary>
        /// <value>The inputs used by this step.</value>
        [DataMember(Name="inputs", EmitDefaultValue=true)]
        public List<AnyOf<StepStringInput,StepIntegerInput,StepNumberInput,StepBooleanInput,StepFolderInput,StepFileInput,StepPathInput,StepArrayInput,StepJSONObjectInput>> Inputs { get; set; }

        /// <summary>
        /// The outputs produced by this step.
        /// </summary>
        /// <value>The outputs produced by this step.</value>
        [DataMember(Name="outputs", EmitDefaultValue=true)]
        public List<AnyOf<StepStringOutput,StepIntegerOutput,StepNumberOutput,StepBooleanOutput,StepFolderOutput,StepFileOutput,StepPathOutput,StepArrayOutput,StepJSONObjectOutput>> Outputs { get; set; }

        /// <summary>
        /// The time at which the task was started
        /// </summary>
        /// <value>The time at which the task was started</value>
        [DataMember(Name="started_at", EmitDefaultValue=true)]
        public DateTime StartedAt { get; set; }

        /// <summary>
        /// The step unique ID
        /// </summary>
        /// <value>The step unique ID</value>
        [DataMember(Name="id", EmitDefaultValue=true)]
        public string Id { get; set; }

        /// <summary>
        /// A human readable name for the step. Usually defined by the DAG task name but can be extended if the step is part of a loop for example. This name is unique within the boundary of the DAG/Job that generated it.
        /// </summary>
        /// <value>A human readable name for the step. Usually defined by the DAG task name but can be extended if the step is part of a loop for example. This name is unique within the boundary of the DAG/Job that generated it.</value>
        [DataMember(Name="name", EmitDefaultValue=true)]
        public string Name { get; set; }


        /// <summary>
        /// The name of the template that spawned this step
        /// </summary>
        /// <value>The name of the template that spawned this step</value>
        [DataMember(Name="template_ref", EmitDefaultValue=true)]
        public string TemplateRef { get; set; }

        /// <summary>
        /// A list of child step IDs
        /// </summary>
        /// <value>A list of child step IDs</value>
        [DataMember(Name="children_ids", EmitDefaultValue=true)]
        public List<string> ChildrenIds { get; set; }

        /// <summary>
        /// A list of the last step to ran in the context of this step. In the case of a DAG or a job this will be the last step that has been executed. It will remain empty for functions.
        /// </summary>
        /// <value>A list of the last step to ran in the context of this step. In the case of a DAG or a job this will be the last step that has been executed. It will remain empty for functions.</value>
        [DataMember(Name="outbound_steps", EmitDefaultValue=true)]
        public List<string> OutboundSteps { get; set; }

        /// <summary>
        /// An optional dictionary to add annotations to inputs. These annotations will be used by the client side libraries.
        /// </summary>
        /// <value>An optional dictionary to add annotations to inputs. These annotations will be used by the client side libraries.</value>
        [DataMember(Name="annotations", EmitDefaultValue=false)]
        public Dictionary<string, string> Annotations { get; set; }

        /// <summary>
        /// Any message produced by the task. Usually error/debugging hints.
        /// </summary>
        /// <value>Any message produced by the task. Usually error/debugging hints.</value>
        [DataMember(Name="message", EmitDefaultValue=false)]
        public string Message { get; set; }

        /// <summary>
        /// The time at which the task was completed
        /// </summary>
        /// <value>The time at which the task was completed</value>
        [DataMember(Name="finished_at", EmitDefaultValue=false)]
        public DateTime FinishedAt { get; set; }

        /// <summary>
        /// Source url for the status object. It can be a recipe or a function.
        /// </summary>
        /// <value>Source url for the status object. It can be a recipe or a function.</value>
        [DataMember(Name="source", EmitDefaultValue=false)]
        public string Source { get; set; }


        /// <summary>
        /// The command used to run this step. Only applies to Function steps.
        /// </summary>
        /// <value>The command used to run this step. Only applies to Function steps.</value>
        [DataMember(Name="command", EmitDefaultValue=false)]
        public string Command { get; set; }

        /// <summary>
        /// This indicates the step ID of the associated template root             step in which this step belongs to. A DAG step will have the id of the             parent DAG for example.
        /// </summary>
        /// <value>This indicates the step ID of the associated template root             step in which this step belongs to. A DAG step will have the id of the             parent DAG for example.</value>
        [DataMember(Name="boundary_id", EmitDefaultValue=false)]
        public string BoundaryId { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StepStatus {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Inputs: ").Append(Inputs).Append("\n");
            sb.Append("  Outputs: ").Append(Outputs).Append("\n");
            sb.Append("  StartedAt: ").Append(StartedAt).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  StatusType: ").Append(StatusType).Append("\n");
            sb.Append("  TemplateRef: ").Append(TemplateRef).Append("\n");
            sb.Append("  ChildrenIds: ").Append(ChildrenIds).Append("\n");
            sb.Append("  OutboundSteps: ").Append(OutboundSteps).Append("\n");
            sb.Append("  Annotations: ").Append(Annotations).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  FinishedAt: ").Append(FinishedAt).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Command: ").Append(Command).Append("\n");
            sb.Append("  BoundaryId: ").Append(BoundaryId).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StepStatus);
        }

        /// <summary>
        /// Returns true if StepStatus instances are equal
        /// </summary>
        /// <param name="input">Instance of StepStatus to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StepStatus input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.Inputs == input.Inputs ||
                    this.Inputs != null &&
                    input.Inputs != null &&
                    this.Inputs.SequenceEqual(input.Inputs)
                ) && base.Equals(input) && 
                (
                    this.Outputs == input.Outputs ||
                    this.Outputs != null &&
                    input.Outputs != null &&
                    this.Outputs.SequenceEqual(input.Outputs)
                ) && base.Equals(input) && 
                (
                    this.StartedAt == input.StartedAt ||
                    (this.StartedAt != null &&
                    this.StartedAt.Equals(input.StartedAt))
                ) && base.Equals(input) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && base.Equals(input) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && base.Equals(input) && 
                (
                    this.StatusType == input.StatusType ||
                    (this.StatusType != null &&
                    this.StatusType.Equals(input.StatusType))
                ) && base.Equals(input) && 
                (
                    this.TemplateRef == input.TemplateRef ||
                    (this.TemplateRef != null &&
                    this.TemplateRef.Equals(input.TemplateRef))
                ) && base.Equals(input) && 
                (
                    this.ChildrenIds == input.ChildrenIds ||
                    this.ChildrenIds != null &&
                    input.ChildrenIds != null &&
                    this.ChildrenIds.SequenceEqual(input.ChildrenIds)
                ) && base.Equals(input) && 
                (
                    this.OutboundSteps == input.OutboundSteps ||
                    this.OutboundSteps != null &&
                    input.OutboundSteps != null &&
                    this.OutboundSteps.SequenceEqual(input.OutboundSteps)
                ) && base.Equals(input) && 
                (
                    this.Annotations == input.Annotations ||
                    this.Annotations != null &&
                    input.Annotations != null &&
                    this.Annotations.SequenceEqual(input.Annotations)
                ) && base.Equals(input) && 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                ) && base.Equals(input) && 
                (
                    this.FinishedAt == input.FinishedAt ||
                    (this.FinishedAt != null &&
                    this.FinishedAt.Equals(input.FinishedAt))
                ) && base.Equals(input) && 
                (
                    this.Source == input.Source ||
                    (this.Source != null &&
                    this.Source.Equals(input.Source))
                ) && base.Equals(input) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && base.Equals(input) && 
                (
                    this.Command == input.Command ||
                    (this.Command != null &&
                    this.Command.Equals(input.Command))
                ) && base.Equals(input) && 
                (
                    this.BoundaryId == input.BoundaryId ||
                    (this.BoundaryId != null &&
                    this.BoundaryId.Equals(input.BoundaryId))
                ) && base.Equals(input) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.Inputs != null)
                    hashCode = hashCode * 59 + this.Inputs.GetHashCode();
                if (this.Outputs != null)
                    hashCode = hashCode * 59 + this.Outputs.GetHashCode();
                if (this.StartedAt != null)
                    hashCode = hashCode * 59 + this.StartedAt.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.StatusType != null)
                    hashCode = hashCode * 59 + this.StatusType.GetHashCode();
                if (this.TemplateRef != null)
                    hashCode = hashCode * 59 + this.TemplateRef.GetHashCode();
                if (this.ChildrenIds != null)
                    hashCode = hashCode * 59 + this.ChildrenIds.GetHashCode();
                if (this.OutboundSteps != null)
                    hashCode = hashCode * 59 + this.OutboundSteps.GetHashCode();
                if (this.Annotations != null)
                    hashCode = hashCode * 59 + this.Annotations.GetHashCode();
                if (this.Message != null)
                    hashCode = hashCode * 59 + this.Message.GetHashCode();
                if (this.FinishedAt != null)
                    hashCode = hashCode * 59 + this.FinishedAt.GetHashCode();
                if (this.Source != null)
                    hashCode = hashCode * 59 + this.Source.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.Command != null)
                    hashCode = hashCode * 59 + this.Command.GetHashCode();
                if (this.BoundaryId != null)
                    hashCode = hashCode * 59 + this.BoundaryId.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in base.BaseValidate(validationContext)) yield return x;

            
            // Type (string) pattern
            Regex regexType = new Regex(@"^StepStatus$", RegexOptions.CultureInvariant);
            if (false == regexType.Match(this.Type).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Type, must match a pattern of " + regexType, new [] { "Type" });
            }

            yield break;
        }
    }

}
