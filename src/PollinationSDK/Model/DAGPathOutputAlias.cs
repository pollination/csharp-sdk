/* 
 * pollination-server
 *
 * Pollination Server OpenAPI Definition
 *
 * The version of the OpenAPI document: 0.16.0
 * Contact: info@pollination.cloud
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using JsonSubTypes;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = PollinationSDK.Client.OpenAPIDateConverter;

namespace PollinationSDK.Model
{
    /// <summary>
    /// DAG alias path output.
    /// </summary>
    [DataContract]
    [JsonConverter(typeof(JsonSubtypes), "type")]
    public partial class DAGPathOutputAlias : DAGArtifactOutputAlias,  IEquatable<DAGPathOutputAlias>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DAGPathOutputAlias" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DAGPathOutputAlias() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DAGPathOutputAlias" /> class.
        /// </summary>
        /// <param name="from">Reference to a file, folder or a task output. Task output must either be a file or a folder. (required).</param>
        public DAGPathOutputAlias(AnyOf<TaskReference,FileReference,FolderReference> from = default(AnyOf<TaskReference,FileReference,FolderReference>), string name = default(string), Dictionary<string, string> annotations = default(Dictionary<string, string>), string description = default(string), List<string> platform = default(List<string>), List<IOAliasHandler> handler = default(List<IOAliasHandler>), bool required = true) : base()
        {
            // to ensure "from" is required (not null)
            if (from == null)
            {
                throw new InvalidDataException("from is a required property for DAGPathOutputAlias and cannot be null");
            }
            else
            {
                this.From = from;
            }
            
        }
        
        /// <summary>
        /// Reference to a file, folder or a task output. Task output must either be a file or a folder.
        /// </summary>
        /// <value>Reference to a file, folder or a task output. Task output must either be a file or a folder.</value>
        [DataMember(Name="from", EmitDefaultValue=true)]
        public AnyOf<TaskReference,FileReference,FolderReference> From { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DAGPathOutputAlias {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DAGPathOutputAlias);
        }

        /// <summary>
        /// Returns true if DAGPathOutputAlias instances are equal
        /// </summary>
        /// <param name="input">Instance of DAGPathOutputAlias to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DAGPathOutputAlias input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.From == input.From ||
                    (this.From != null &&
                    this.From.Equals(input.From))
                ) && base.Equals(input) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.From != null)
                    hashCode = hashCode * 59 + this.From.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in base.BaseValidate(validationContext)) yield return x;

            
            // Type (string) pattern
            Regex regexType = new Regex(@"^DAGPathOutputAlias$", RegexOptions.CultureInvariant);
            if (false == regexType.Match(this.Type).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Type, must match a pattern of " + regexType, new [] { "Type" });
            }

            yield break;
        }
    }

}
