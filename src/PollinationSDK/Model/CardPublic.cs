/* 
 * pollination-server
 *
 * Pollination Server OpenAPI Definition
 *
 * Contact: info@pollination.cloud
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;


namespace PollinationSDK
{
    /// <summary>
    /// CardPublic
    /// </summary>
    [DataContract(Name = "CardPublic")]
    public partial class CardPublic : OpenAPIGenBaseModel, IEquatable<CardPublic>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CardPublic" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CardPublic() 
        { 
            // Set non-required readonly properties with defaultValue
            this.Type = "CardPublic";
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="CardPublic" /> class.
        /// </summary>
        /// <param name="last4">The last four digits of the card (required).</param>
        /// <param name="expMonth">The month the card expires (required).</param>
        /// <param name="expYear">The year the card expires (required).</param>
        public CardPublic
        (
           string last4, int expMonth, int expYear// Required parameters
           // Optional parameters
        ) : base()// BaseClass
        {
            // to ensure "last4" is required (not null)
            this.Last4 = last4 ?? throw new ArgumentNullException("last4 is a required property for CardPublic and cannot be null");
            this.ExpMonth = expMonth;
            this.ExpYear = expYear;

            // Set non-required readonly properties with defaultValue
            this.Type = "CardPublic";
        }

        //============================================== is ReadOnly 
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = true)]
        public string Type { get; protected internal set; }  = "CardPublic";

        /// <summary>
        /// The last four digits of the card
        /// </summary>
        /// <value>The last four digits of the card</value>
        [DataMember(Name = "last4", IsRequired = true, EmitDefaultValue = false)]
        public string Last4 { get; set; } 
        /// <summary>
        /// The month the card expires
        /// </summary>
        /// <value>The month the card expires</value>
        [DataMember(Name = "exp_month", IsRequired = true, EmitDefaultValue = false)]
        public int ExpMonth { get; set; } 
        /// <summary>
        /// The year the card expires
        /// </summary>
        /// <value>The year the card expires</value>
        [DataMember(Name = "exp_year", IsRequired = true, EmitDefaultValue = false)]
        public int ExpYear { get; set; } 

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            return "CardPublic";
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString(bool detailed)
        {
            if (!detailed)
                return this.ToString();
            
            var sb = new StringBuilder();
            sb.Append("CardPublic:\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Last4: ").Append(Last4).Append("\n");
            sb.Append("  ExpMonth: ").Append(ExpMonth).Append("\n");
            sb.Append("  ExpYear: ").Append(ExpYear).Append("\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the object from JSON string
        /// </summary>
        /// <returns>CardPublic object</returns>
        public static CardPublic FromJson(string json)
        {
            var obj = JsonConvert.DeserializeObject<CardPublic>(json, JsonSetting.AnyOfConvertSetting);
            if (obj == null)
                return null;
            return obj.Type.ToLower() == obj.GetType().Name.ToLower() ? obj : null;
        }

        /// <summary>
        /// Creates a new instance with the same properties.
        /// </summary>
        /// <returns>CardPublic object</returns>
        public virtual CardPublic DuplicateCardPublic()
        {
            return FromJson(this.ToJson());
        }

        /// <summary>
        /// Creates a new instance with the same properties.
        /// </summary>
        /// <returns>OpenAPIGenBaseModel</returns>
        public override OpenAPIGenBaseModel Duplicate()
        {
            return DuplicateCardPublic();
        }

        /// <summary>
        /// Creates a new instance with the same properties.
        /// </summary>
        /// <returns>OpenAPIGenBaseModel</returns>
        public override OpenAPIGenBaseModel DuplicateOpenAPIGenBaseModel()
        {
            return DuplicateCardPublic();
        }
     
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            input = input is AnyOf anyOf ? anyOf.Obj : input;
            return this.Equals(input as CardPublic);
        }

        /// <summary>
        /// Returns true if CardPublic instances are equal
        /// </summary>
        /// <param name="input">Instance of CardPublic to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CardPublic input)
        {
            if (input == null)
                return false;
            return base.Equals(input) && 
                (
                    this.Last4 == input.Last4 ||
                    (this.Last4 != null &&
                    this.Last4.Equals(input.Last4))
                ) && base.Equals(input) && 
                (
                    this.ExpMonth == input.ExpMonth ||
                    (this.ExpMonth != null &&
                    this.ExpMonth.Equals(input.ExpMonth))
                ) && base.Equals(input) && 
                (
                    this.ExpYear == input.ExpYear ||
                    (this.ExpYear != null &&
                    this.ExpYear.Equals(input.ExpYear))
                ) && base.Equals(input) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.Last4 != null)
                    hashCode = hashCode * 59 + this.Last4.GetHashCode();
                if (this.ExpMonth != null)
                    hashCode = hashCode * 59 + this.ExpMonth.GetHashCode();
                if (this.ExpYear != null)
                    hashCode = hashCode * 59 + this.ExpYear.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in base.BaseValidate(validationContext)) yield return x;

            
            // Type (string) pattern
            Regex regexType = new Regex(@"^CardPublic$", RegexOptions.CultureInvariant);
            if (false == regexType.Match(this.Type).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Type, must match a pattern of " + regexType, new [] { "Type" });
            }

            yield break;
        }
    }
}
