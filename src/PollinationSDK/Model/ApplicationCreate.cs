/* 
 * pollination-server
 *
 * Pollination Server OpenAPI Definition
 *
 * Contact: info@pollination.cloud
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;


namespace PollinationSDK
{
    /// <summary>
    /// ApplicationCreate
    /// </summary>
    [DataContract(Name = "ApplicationCreate")]
    public partial class ApplicationCreate : OpenAPIGenBaseModel, IEquatable<ApplicationCreate>, IValidatableObject
    {
        /// <summary>
        /// The SDK used to build the application
        /// </summary>
        /// <value>The SDK used to build the application</value>
        [DataMember(Name="sdk")]
        public SDKEnum Sdk { get; set; } = SDKEnum.Streamlit;
        /// <summary>
        /// Initializes a new instance of the <see cref="ApplicationCreate" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ApplicationCreate() 
        { 
            // Set non-required readonly properties with defaultValue
            this.Type = "ApplicationCreate";
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ApplicationCreate" /> class.
        /// </summary>
        /// <param name="name">The name of the application. Must be unique to a given owner (required).</param>
        /// <param name="description">A description of the application (default to &quot;&quot;).</param>
        /// <param name="_public">Whether or not a application is publicly viewable (default to true).</param>
        /// <param name="keywords">A list of keywords associated with the application.</param>
        /// <param name="image">An image associated with the application (default to &quot;https://picsum.photos/400&quot;).</param>
        /// <param name="source">A link to the source code of the application.</param>
        /// <param name="license">The license of the application.</param>
        /// <param name="sdk">The SDK used to build the application.</param>
        /// <param name="isPaid">Whether or not the application is paid (default to false).</param>
        /// <param name="deploymentConfig">The deployment configuration for the application.</param>
        public ApplicationCreate
        (
           string name, // Required parameters
           string description = "", bool _public = true, List<string> keywords= default, string image = "https://picsum.photos/400", string source= default, string license= default, SDKEnum sdk= SDKEnum.Streamlit, bool isPaid = false, DeploymentConfig deploymentConfig= default // Optional parameters
        ) : base()// BaseClass
        {
            // to ensure "name" is required (not null)
            this.Name = name ?? throw new ArgumentNullException("name is a required property for ApplicationCreate and cannot be null");
            // use default value if no "description" provided
            this.Description = description ?? "";
            this.Public = _public;
            this.Keywords = keywords;
            // use default value if no "image" provided
            this.Image = image ?? "https://picsum.photos/400";
            this.Source = source;
            this.License = license;
            this.Sdk = sdk;
            this.IsPaid = isPaid;
            this.DeploymentConfig = deploymentConfig;

            // Set non-required readonly properties with defaultValue
            this.Type = "ApplicationCreate";
        }

        //============================================== is ReadOnly 
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type")]
        public override string Type { get; protected set; }  = "ApplicationCreate";

        /// <summary>
        /// The name of the application. Must be unique to a given owner
        /// </summary>
        /// <value>The name of the application. Must be unique to a given owner</value>
        [DataMember(Name = "name", IsRequired = true)]
        public string Name { get; set; } 
        /// <summary>
        /// A description of the application
        /// </summary>
        /// <value>A description of the application</value>
        [DataMember(Name = "description")]
        public string Description { get; set; }  = "";
        /// <summary>
        /// Whether or not a application is publicly viewable
        /// </summary>
        /// <value>Whether or not a application is publicly viewable</value>
        [DataMember(Name = "public")]
        public bool Public { get; set; }  = true;
        /// <summary>
        /// A list of keywords associated with the application
        /// </summary>
        /// <value>A list of keywords associated with the application</value>
        [DataMember(Name = "keywords")]
        public List<string> Keywords { get; set; } 
        /// <summary>
        /// An image associated with the application
        /// </summary>
        /// <value>An image associated with the application</value>
        [DataMember(Name = "image")]
        public string Image { get; set; }  = "https://picsum.photos/400";
        /// <summary>
        /// A link to the source code of the application
        /// </summary>
        /// <value>A link to the source code of the application</value>
        [DataMember(Name = "source")]
        public string Source { get; set; } 
        /// <summary>
        /// The license of the application
        /// </summary>
        /// <value>The license of the application</value>
        [DataMember(Name = "license")]
        public string License { get; set; } 
        /// <summary>
        /// Whether or not the application is paid
        /// </summary>
        /// <value>Whether or not the application is paid</value>
        [DataMember(Name = "is_paid")]
        public bool IsPaid { get; set; }  = false;
        /// <summary>
        /// The deployment configuration for the application
        /// </summary>
        /// <value>The deployment configuration for the application</value>
        [DataMember(Name = "deployment_config")]
        public DeploymentConfig DeploymentConfig { get; set; } 

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            return "ApplicationCreate";
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString(bool detailed)
        {
            if (!detailed)
                return this.ToString();
            
            var sb = new StringBuilder();
            sb.Append("ApplicationCreate:\n");
            sb.Append("  Type: ").Append(this.Type).Append("\n");
            sb.Append("  Name: ").Append(this.Name).Append("\n");
            sb.Append("  Description: ").Append(this.Description).Append("\n");
            sb.Append("  Public: ").Append(this.Public).Append("\n");
            sb.Append("  Keywords: ").Append(this.Keywords).Append("\n");
            sb.Append("  Image: ").Append(this.Image).Append("\n");
            sb.Append("  Source: ").Append(this.Source).Append("\n");
            sb.Append("  License: ").Append(this.License).Append("\n");
            sb.Append("  Sdk: ").Append(this.Sdk).Append("\n");
            sb.Append("  IsPaid: ").Append(this.IsPaid).Append("\n");
            sb.Append("  DeploymentConfig: ").Append(this.DeploymentConfig).Append("\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the object from JSON string
        /// </summary>
        /// <returns>ApplicationCreate object</returns>
        public static ApplicationCreate FromJson(string json)
        {
            var obj = JsonConvert.DeserializeObject<ApplicationCreate>(json, JsonSetting.AnyOfConvertSetting);
            if (obj == null)
                return null;
            return obj.Type.ToLower() == obj.GetType().Name.ToLower() ? obj : null;
        }

        /// <summary>
        /// Creates a new instance with the same properties.
        /// </summary>
        /// <returns>ApplicationCreate object</returns>
        public virtual ApplicationCreate DuplicateApplicationCreate()
        {
            return FromJson(this.ToJson());
        }

        /// <summary>
        /// Creates a new instance with the same properties.
        /// </summary>
        /// <returns>OpenAPIGenBaseModel</returns>
        public override OpenAPIGenBaseModel Duplicate()
        {
            return DuplicateApplicationCreate();
        }

        /// <summary>
        /// Creates a new instance with the same properties.
        /// </summary>
        /// <returns>OpenAPIGenBaseModel</returns>
        public override OpenAPIGenBaseModel DuplicateOpenAPIGenBaseModel()
        {
            return DuplicateApplicationCreate();
        }
     
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            input = input is AnyOf anyOf ? anyOf.Obj : input;
            return this.Equals(input as ApplicationCreate);
        }

        /// <summary>
        /// Returns true if ApplicationCreate instances are equal
        /// </summary>
        /// <param name="input">Instance of ApplicationCreate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ApplicationCreate input)
        {
            if (input == null)
                return false;
            return base.Equals(input) && 
                    Extension.Equals(this.Name, input.Name) && 
                    Extension.Equals(this.Description, input.Description) && 
                    Extension.Equals(this.Public, input.Public) && 
                (
                    this.Keywords == input.Keywords ||
                    Extension.AllEquals(this.Keywords, input.Keywords)
                ) && 
                    Extension.Equals(this.Image, input.Image) && 
                    Extension.Equals(this.Source, input.Source) && 
                    Extension.Equals(this.License, input.License) && 
                    Extension.Equals(this.Sdk, input.Sdk) && 
                    Extension.Equals(this.IsPaid, input.IsPaid) && 
                    Extension.Equals(this.DeploymentConfig, input.DeploymentConfig) && 
                    Extension.Equals(this.Type, input.Type);
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Public != null)
                    hashCode = hashCode * 59 + this.Public.GetHashCode();
                if (this.Keywords != null)
                    hashCode = hashCode * 59 + this.Keywords.GetHashCode();
                if (this.Image != null)
                    hashCode = hashCode * 59 + this.Image.GetHashCode();
                if (this.Source != null)
                    hashCode = hashCode * 59 + this.Source.GetHashCode();
                if (this.License != null)
                    hashCode = hashCode * 59 + this.License.GetHashCode();
                if (this.Sdk != null)
                    hashCode = hashCode * 59 + this.Sdk.GetHashCode();
                if (this.IsPaid != null)
                    hashCode = hashCode * 59 + this.IsPaid.GetHashCode();
                if (this.DeploymentConfig != null)
                    hashCode = hashCode * 59 + this.DeploymentConfig.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in base.BaseValidate(validationContext)) yield return x;

            
            // Type (string) pattern
            Regex regexType = new Regex(@"^ApplicationCreate$", RegexOptions.CultureInvariant);
            if (this.Type != null && false == regexType.Match(this.Type).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Type, must match a pattern of " + regexType, new [] { "Type" });
            }

            yield break;
        }
    }
}
