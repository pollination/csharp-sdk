/* 
 * pollination-server
 *
 * Pollination Server OpenAPI Definition
 *
 * Contact: info@pollination.cloud
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;


namespace PollinationSDK
{
    /// <summary>
    /// AccountPublic
    /// </summary>
    [DataContract(Name = "AccountPublic")]
    public partial class AccountPublic : OpenAPIGenBaseModel, IEquatable<AccountPublic>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AccountPublic" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AccountPublic() 
        { 
            // Set non-required readonly properties with defaultValue
            this.Type = "AccountPublic";
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="AccountPublic" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="accountType">accountType (required).</param>
        /// <param name="name">name (required).</param>
        /// <param name="displayName">displayName.</param>
        /// <param name="description">description.</param>
        /// <param name="pictureUrl">https://robohash.org/ladybugbot.</param>
        public AccountPublic
        (
           string id, string accountType, string name, // Required parameters
           string displayName= default, string description= default, string pictureUrl= default // Optional parameters
        ) : base()// BaseClass
        {
            // to ensure "id" is required (not null)
            this.Id = id ?? throw new ArgumentNullException("id is a required property for AccountPublic and cannot be null");
            // to ensure "accountType" is required (not null)
            this.AccountType = accountType ?? throw new ArgumentNullException("accountType is a required property for AccountPublic and cannot be null");
            // to ensure "name" is required (not null)
            this.Name = name ?? throw new ArgumentNullException("name is a required property for AccountPublic and cannot be null");
            this.DisplayName = displayName;
            this.Description = description;
            this.PictureUrl = pictureUrl;

            // Set non-required readonly properties with defaultValue
            this.Type = "AccountPublic";
        }

        //============================================== is ReadOnly 
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type")]
        public override string Type { get; protected set; }  = "AccountPublic";

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", IsRequired = true)]
        public string Id { get; set; } 
        /// <summary>
        /// Gets or Sets AccountType
        /// </summary>
        [DataMember(Name = "account_type", IsRequired = true)]
        public string AccountType { get; set; } 
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true)]
        public string Name { get; set; } 
        /// <summary>
        /// Gets or Sets DisplayName
        /// </summary>
        [DataMember(Name = "display_name")]
        public string DisplayName { get; set; } 
        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description")]
        public string Description { get; set; } 
        /// <summary>
        /// https://robohash.org/ladybugbot
        /// </summary>
        /// <value>https://robohash.org/ladybugbot</value>
        [DataMember(Name = "picture_url")]
        public string PictureUrl { get; set; } 

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            return "AccountPublic";
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString(bool detailed)
        {
            if (!detailed)
                return this.ToString();
            
            var sb = new StringBuilder();
            sb.Append("AccountPublic:\n");
            sb.Append("  Type: ").Append(this.Type).Append("\n");
            sb.Append("  Id: ").Append(this.Id).Append("\n");
            sb.Append("  AccountType: ").Append(this.AccountType).Append("\n");
            sb.Append("  Name: ").Append(this.Name).Append("\n");
            sb.Append("  DisplayName: ").Append(this.DisplayName).Append("\n");
            sb.Append("  Description: ").Append(this.Description).Append("\n");
            sb.Append("  PictureUrl: ").Append(this.PictureUrl).Append("\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the object from JSON string
        /// </summary>
        /// <returns>AccountPublic object</returns>
        public static AccountPublic FromJson(string json)
        {
            var obj = JsonConvert.DeserializeObject<AccountPublic>(json, JsonSetting.AnyOfConvertSetting);
            if (obj == null)
                return null;
            return obj.Type.ToLower() == obj.GetType().Name.ToLower() ? obj : null;
        }

        /// <summary>
        /// Creates a new instance with the same properties.
        /// </summary>
        /// <returns>AccountPublic object</returns>
        public virtual AccountPublic DuplicateAccountPublic()
        {
            return FromJson(this.ToJson());
        }

        /// <summary>
        /// Creates a new instance with the same properties.
        /// </summary>
        /// <returns>OpenAPIGenBaseModel</returns>
        public override OpenAPIGenBaseModel Duplicate()
        {
            return DuplicateAccountPublic();
        }

        /// <summary>
        /// Creates a new instance with the same properties.
        /// </summary>
        /// <returns>OpenAPIGenBaseModel</returns>
        public override OpenAPIGenBaseModel DuplicateOpenAPIGenBaseModel()
        {
            return DuplicateAccountPublic();
        }
     
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            input = input is AnyOf anyOf ? anyOf.Obj : input;
            return this.Equals(input as AccountPublic);
        }

        /// <summary>
        /// Returns true if AccountPublic instances are equal
        /// </summary>
        /// <param name="input">Instance of AccountPublic to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AccountPublic input)
        {
            if (input == null)
                return false;
            return base.Equals(input) && 
                    Extension.Equals(this.Id, input.Id) && 
                    Extension.Equals(this.AccountType, input.AccountType) && 
                    Extension.Equals(this.Name, input.Name) && 
                    Extension.Equals(this.DisplayName, input.DisplayName) && 
                    Extension.Equals(this.Description, input.Description) && 
                    Extension.Equals(this.PictureUrl, input.PictureUrl) && 
                    Extension.Equals(this.Type, input.Type);
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.AccountType != null)
                    hashCode = hashCode * 59 + this.AccountType.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.DisplayName != null)
                    hashCode = hashCode * 59 + this.DisplayName.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.PictureUrl != null)
                    hashCode = hashCode * 59 + this.PictureUrl.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in base.BaseValidate(validationContext)) yield return x;

            
            // Type (string) pattern
            Regex regexType = new Regex(@"^AccountPublic$", RegexOptions.CultureInvariant);
            if (this.Type != null && false == regexType.Match(this.Type).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Type, must match a pattern of " + regexType, new [] { "Type" });
            }

            yield break;
        }
    }
}
