/* 
 * pollination-server
 *
 * Pollination Server OpenAPI Definition
 *
 * The version of the OpenAPI document: 0.16.0
 * Contact: info@pollination.cloud
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using JsonSubTypes;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = PollinationSDK.Client.OpenAPIDateConverter;

namespace PollinationSDK.Model
{
    /// <summary>
    /// Base class for all input types.
    /// </summary>
    [DataContract]
    [JsonConverter(typeof(JsonSubtypes), "type")]
    [JsonSubtypes.KnownSubType(typeof(DAGIntegerInputAlias), "DAGIntegerInputAlias")]
    [JsonSubtypes.KnownSubType(typeof(FunctionFolderInput), "FunctionFolderInput")]
    [JsonSubtypes.KnownSubType(typeof(FunctionBooleanInput), "FunctionBooleanInput")]
    [JsonSubtypes.KnownSubType(typeof(StepArrayInput), "StepArrayInput")]
    [JsonSubtypes.KnownSubType(typeof(DAGArrayInputAlias), "DAGArrayInputAlias")]
    [JsonSubtypes.KnownSubType(typeof(DAGArrayInput), "DAGArrayInput")]
    [JsonSubtypes.KnownSubType(typeof(FunctionJSONObjectInput), "FunctionJSONObjectInput")]
    [JsonSubtypes.KnownSubType(typeof(FunctionNumberInput), "FunctionNumberInput")]
    [JsonSubtypes.KnownSubType(typeof(FunctionArrayInput), "FunctionArrayInput")]
    [JsonSubtypes.KnownSubType(typeof(DAGNumberInputAlias), "DAGNumberInputAlias")]
    [JsonSubtypes.KnownSubType(typeof(StepFileInput), "StepFileInput")]
    [JsonSubtypes.KnownSubType(typeof(FunctionPathInput), "FunctionPathInput")]
    [JsonSubtypes.KnownSubType(typeof(StepJSONObjectInput), "StepJSONObjectInput")]
    [JsonSubtypes.KnownSubType(typeof(DAGBooleanInput), "DAGBooleanInput")]
    [JsonSubtypes.KnownSubType(typeof(DAGPathInputAlias), "DAGPathInputAlias")]
    [JsonSubtypes.KnownSubType(typeof(DAGFileInput), "DAGFileInput")]
    [JsonSubtypes.KnownSubType(typeof(StepPathInput), "StepPathInput")]
    [JsonSubtypes.KnownSubType(typeof(FunctionIntegerInput), "FunctionIntegerInput")]
    [JsonSubtypes.KnownSubType(typeof(DAGGenericInput), "DAGGenericInput")]
    [JsonSubtypes.KnownSubType(typeof(FunctionFileInput), "FunctionFileInput")]
    [JsonSubtypes.KnownSubType(typeof(DAGNumberInput), "DAGNumberInput")]
    [JsonSubtypes.KnownSubType(typeof(DAGJSONObjectInputAlias), "DAGJSONObjectInputAlias")]
    [JsonSubtypes.KnownSubType(typeof(StepIntegerInput), "StepIntegerInput")]
    [JsonSubtypes.KnownSubType(typeof(DAGIntegerInput), "DAGIntegerInput")]
    [JsonSubtypes.KnownSubType(typeof(DAGFolderInput), "DAGFolderInput")]
    [JsonSubtypes.KnownSubType(typeof(DAGPathInput), "DAGPathInput")]
    [JsonSubtypes.KnownSubType(typeof(DAGGenericInputAlias), "DAGGenericInputAlias")]
    [JsonSubtypes.KnownSubType(typeof(DAGBooleanInputAlias), "DAGBooleanInputAlias")]
    [JsonSubtypes.KnownSubType(typeof(DAGFileInputAlias), "DAGFileInputAlias")]
    [JsonSubtypes.KnownSubType(typeof(StepNumberInput), "StepNumberInput")]
    [JsonSubtypes.KnownSubType(typeof(DAGJSONObjectInput), "DAGJSONObjectInput")]
    [JsonSubtypes.KnownSubType(typeof(StepFolderInput), "StepFolderInput")]
    [JsonSubtypes.KnownSubType(typeof(StepBooleanInput), "StepBooleanInput")]
    [JsonSubtypes.KnownSubType(typeof(DAGFolderInputAlias), "DAGFolderInputAlias")]
    public partial class GenericInput : OpenAPIGenBaseModel,  IEquatable<GenericInput>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GenericInput" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GenericInput() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GenericInput" /> class.
        /// </summary>
        /// <param name="name">Input name. (required).</param>
        /// <param name="annotations">An optional dictionary to add annotations to inputs. These annotations will be used by the client side libraries..</param>
        /// <param name="description">Optional description for input..</param>
        public GenericInput(string name = default(string), Dictionary<string, string> annotations = default(Dictionary<string, string>), string description = default(string)) : base()
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for GenericInput and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            
            this.Annotations = annotations;
            this.Description = description;
        }
        
        /// <summary>
        /// Input name.
        /// </summary>
        /// <value>Input name.</value>
        [DataMember(Name="name", EmitDefaultValue=true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; private set; }

        /// <summary>
        /// An optional dictionary to add annotations to inputs. These annotations will be used by the client side libraries.
        /// </summary>
        /// <value>An optional dictionary to add annotations to inputs. These annotations will be used by the client side libraries.</value>
        [DataMember(Name="annotations", EmitDefaultValue=false)]
        public Dictionary<string, string> Annotations { get; set; }

        /// <summary>
        /// Optional description for input.
        /// </summary>
        /// <value>Optional description for input.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GenericInput {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Annotations: ").Append(Annotations).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GenericInput);
        }

        /// <summary>
        /// Returns true if GenericInput instances are equal
        /// </summary>
        /// <param name="input">Instance of GenericInput to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GenericInput input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && base.Equals(input) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && base.Equals(input) && 
                (
                    this.Annotations == input.Annotations ||
                    this.Annotations != null &&
                    input.Annotations != null &&
                    this.Annotations.SequenceEqual(input.Annotations)
                ) && base.Equals(input) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Annotations != null)
                    hashCode = hashCode * 59 + this.Annotations.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            foreach(var x in base.BaseValidate(validationContext)) yield return x;

            
            // Type (string) pattern
            Regex regexType = new Regex(@"^GenericInput$", RegexOptions.CultureInvariant);
            if (false == regexType.Match(this.Type).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Type, must match a pattern of " + regexType, new [] { "Type" });
            }

            yield break;
        }
    }

}
