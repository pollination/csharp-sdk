/* 
 * pollination-server
 *
 * Pollination Server OpenAPI Definition
 *
 * Contact: info@pollination.cloud
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;


namespace PollinationSDK
{
    /// <summary>
    /// Subscribe
    /// </summary>
    [DataContract(Name = "Subscribe")]
    public partial class Subscribe : IEquatable<Subscribe>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Subscribe" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Subscribe() 
        { 
            // Set non-required readonly properties with defaultValue
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Subscribe" /> class.
        /// </summary>
        /// <param name="plan">The initial plan with which to create the subscription (required).</param>
        public Subscribe
        (
           Price plan// Required parameters
           // Optional parameters
        )// BaseClass
        {
            // to ensure "plan" is required (not null)
            this.Plan = plan ?? throw new ArgumentNullException("plan is a required property for Subscribe and cannot be null");

            // Set non-required readonly properties with defaultValue
        }


        /// <summary>
        /// The initial plan with which to create the subscription
        /// </summary>
        /// <value>The initial plan with which to create the subscription</value>
        [DataMember(Name = "plan", IsRequired = true, EmitDefaultValue = false)]
        public Price Plan { get; set; } 

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            return "Subscribe";
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString(bool detailed)
        {
            if (!detailed)
                return this.ToString();
            
            var sb = new StringBuilder();
            sb.Append("Subscribe:\n");
            sb.Append("  Plan: ").Append(Plan).Append("\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the object from JSON string
        /// </summary>
        /// <returns>Subscribe object</returns>
        public static Subscribe FromJson(string json)
        {
            var obj = JsonConvert.DeserializeObject<Subscribe>(json, JsonSetting.AnyOfConvertSetting);
            if (obj == null)
                return null;
            return obj.Type.ToLower() == obj.GetType().Name.ToLower() ? obj : null;
        }

        /// <summary>
        /// Creates a new instance with the same properties.
        /// </summary>
        /// <returns>Subscribe object</returns>
        public virtual Subscribe DuplicateSubscribe()
        {
            return FromJson(this.ToJson());
        }

        /// <summary>
        /// Creates a new instance with the same properties.
        /// </summary>
        /// <returns>OpenAPIGenBaseModel</returns>
        public override OpenAPIGenBaseModel Duplicate()
        {
            return DuplicateSubscribe();
        }

     
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            input = input is AnyOf anyOf ? anyOf.Obj : input;
            return this.Equals(input as Subscribe);
        }

        /// <summary>
        /// Returns true if Subscribe instances are equal
        /// </summary>
        /// <param name="input">Instance of Subscribe to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Subscribe input)
        {
            if (input == null)
                return false;
            return 
                (
                    this.Plan == input.Plan ||
                    (this.Plan != null &&
                    this.Plan.Equals(input.Plan))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Plan != null)
                    hashCode = hashCode * 59 + this.Plan.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
