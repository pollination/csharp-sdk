/* 
 * pollination-server
 *
 * Pollination Server OpenAPI Definition
 *
 * The version of the OpenAPI document: 0.46.0
 * Contact: info@pollination.cloud
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = PollinationSDK.Client.OpenAPIDateConverter;

namespace PollinationSDK.Model
{
    /// <summary>
    /// BuildStatus
    /// </summary>
    [DataContract]
    public partial class BuildStatus :  IEquatable<BuildStatus>, IValidatableObject
    {
        /// <summary>
        /// The status of the build
        /// </summary>
        /// <value>The status of the build</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public BuildStatusEnum Status { get; set; }   
        /// <summary>
        /// Initializes a new instance of the <see cref="BuildStatus" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BuildStatus() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BuildStatus" /> class.
        /// </summary>
        /// <param name="createdAt">The date and time the build was created.</param>
        /// <param name="finishedAt">The date and time the build finished.</param>
        /// <param name="startedAt">The date and time the build started.</param>
        /// <param name="status">The status of the build (required).</param>
        public BuildStatus
        (
           BuildStatusEnum status, // Required parameters
           DateTime createdAt= default, DateTime finishedAt= default, DateTime startedAt= default // Optional parameters
        )// BaseClass
        {
            // to ensure "status" is required (not null)
            if (status == null)
            {
                throw new InvalidDataException("status is a required property for BuildStatus and cannot be null");
            }
            else
            {
                this.Status = status;
            }
            
            this.CreatedAt = createdAt;
            this.FinishedAt = finishedAt;
            this.StartedAt = startedAt;

            // Set non-required readonly properties with defaultValue
        }
        
        /// <summary>
        /// The date and time the build was created
        /// </summary>
        /// <value>The date and time the build was created</value>
        [DataMember(Name="created_at", EmitDefaultValue=false)]
        [JsonProperty("created_at")]
        public DateTime CreatedAt { get; set; } 
        /// <summary>
        /// The date and time the build finished
        /// </summary>
        /// <value>The date and time the build finished</value>
        [DataMember(Name="finished_at", EmitDefaultValue=false)]
        [JsonProperty("finished_at")]
        public DateTime FinishedAt { get; set; } 
        /// <summary>
        /// The date and time the build started
        /// </summary>
        /// <value>The date and time the build started</value>
        [DataMember(Name="started_at", EmitDefaultValue=false)]
        [JsonProperty("started_at")]
        public DateTime StartedAt { get; set; } 
        
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BuildStatus {\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  FinishedAt: ").Append(FinishedAt).Append("\n");
            sb.Append("  StartedAt: ").Append(StartedAt).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented, JsonSetting.ConvertSetting);
        }

        /// <summary>
        /// Returns the object from JSON string
        /// </summary>
        /// <returns>BuildStatus object</returns>
        public static BuildStatus FromJson(string json)
        {
            var obj = JsonConvert.DeserializeObject<BuildStatus>(json, JsonSetting.ConvertSetting);
            return obj;
        }

        /// <summary>
        /// Creates a new instance with the same properties.
        /// </summary>
        /// <returns>BuildStatus object</returns>
        public BuildStatus DuplicateBuildStatus()
        {
            return FromJson(this.ToJson());
        }
     
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BuildStatus);
        }

        /// <summary>
        /// Returns true if BuildStatus instances are equal
        /// </summary>
        /// <param name="input">Instance of BuildStatus to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BuildStatus input)
        {
            if (input == null)
                return false;
            return 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.FinishedAt == input.FinishedAt ||
                    (this.FinishedAt != null &&
                    this.FinishedAt.Equals(input.FinishedAt))
                ) && 
                (
                    this.StartedAt == input.StartedAt ||
                    (this.StartedAt != null &&
                    this.StartedAt.Equals(input.StartedAt))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CreatedAt != null)
                    hashCode = hashCode * 59 + this.CreatedAt.GetHashCode();
                if (this.FinishedAt != null)
                    hashCode = hashCode * 59 + this.FinishedAt.GetHashCode();
                if (this.StartedAt != null)
                    hashCode = hashCode * 59 + this.StartedAt.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
