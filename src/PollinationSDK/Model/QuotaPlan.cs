/* 
 * pollination-server
 *
 * Pollination Server OpenAPI Definition
 *
 * Contact: info@pollination.cloud
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;


namespace PollinationSDK
{
    /// <summary>
    /// A quota plan
    /// </summary>
    [DataContract(Name = "QuotaPlan")]
    public partial class QuotaPlan : OpenAPIGenBaseModel, IEquatable<QuotaPlan>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="QuotaPlan" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected QuotaPlan() 
        { 
            // Set non-required readonly properties with defaultValue
            this.Type = "QuotaPlan";
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="QuotaPlan" /> class.
        /// </summary>
        /// <param name="name">The name of the quota (required).</param>
        /// <param name="resets">Whether consumption is reset to 0 every month (default to false).</param>
        /// <param name="limit">The maximum amount of a resource that a subscription allows.</param>
        /// <param name="enforced">Whether the limit is triggers a blocking response from the server (default to false).</param>
        public QuotaPlan
        (
           string name, // Required parameters
           bool resets = false, double limit= default, bool enforced = false // Optional parameters
        ) : base()// BaseClass
        {
            // to ensure "name" is required (not null)
            this.Name = name ?? throw new ArgumentNullException("name is a required property for QuotaPlan and cannot be null");
            this.Resets = resets;
            this.Limit = limit;
            this.Enforced = enforced;

            // Set non-required readonly properties with defaultValue
            this.Type = "QuotaPlan";
        }

        //============================================== is ReadOnly 
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = true)]
        public override string Type { get; protected internal set; }  = "QuotaPlan";

        /// <summary>
        /// The name of the quota
        /// </summary>
        /// <value>The name of the quota</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = false)]
        public string Name { get; set; } 
        /// <summary>
        /// Whether consumption is reset to 0 every month
        /// </summary>
        /// <value>Whether consumption is reset to 0 every month</value>
        [DataMember(Name = "resets", EmitDefaultValue = true)]
        public bool Resets { get; set; }  = false;
        /// <summary>
        /// The maximum amount of a resource that a subscription allows
        /// </summary>
        /// <value>The maximum amount of a resource that a subscription allows</value>
        [DataMember(Name = "limit", EmitDefaultValue = false)]
        public double Limit { get; set; } 
        /// <summary>
        /// Whether the limit is triggers a blocking response from the server
        /// </summary>
        /// <value>Whether the limit is triggers a blocking response from the server</value>
        [DataMember(Name = "enforced", EmitDefaultValue = true)]
        public bool Enforced { get; set; }  = false;

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            return "QuotaPlan";
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString(bool detailed)
        {
            if (!detailed)
                return this.ToString();
            
            var sb = new StringBuilder();
            sb.Append("QuotaPlan:\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Resets: ").Append(Resets).Append("\n");
            sb.Append("  Limit: ").Append(Limit).Append("\n");
            sb.Append("  Enforced: ").Append(Enforced).Append("\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the object from JSON string
        /// </summary>
        /// <returns>QuotaPlan object</returns>
        public static QuotaPlan FromJson(string json)
        {
            var obj = JsonConvert.DeserializeObject<QuotaPlan>(json, JsonSetting.AnyOfConvertSetting);
            if (obj == null)
                return null;
            return obj.Type.ToLower() == obj.GetType().Name.ToLower() ? obj : null;
        }

        /// <summary>
        /// Creates a new instance with the same properties.
        /// </summary>
        /// <returns>QuotaPlan object</returns>
        public virtual QuotaPlan DuplicateQuotaPlan()
        {
            return FromJson(this.ToJson());
        }

        /// <summary>
        /// Creates a new instance with the same properties.
        /// </summary>
        /// <returns>OpenAPIGenBaseModel</returns>
        public override OpenAPIGenBaseModel Duplicate()
        {
            return DuplicateQuotaPlan();
        }

        /// <summary>
        /// Creates a new instance with the same properties.
        /// </summary>
        /// <returns>OpenAPIGenBaseModel</returns>
        public override OpenAPIGenBaseModel DuplicateOpenAPIGenBaseModel()
        {
            return DuplicateQuotaPlan();
        }
     
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            input = input is AnyOf anyOf ? anyOf.Obj : input;
            return this.Equals(input as QuotaPlan);
        }

        /// <summary>
        /// Returns true if QuotaPlan instances are equal
        /// </summary>
        /// <param name="input">Instance of QuotaPlan to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(QuotaPlan input)
        {
            if (input == null)
                return false;
            return base.Equals(input) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && base.Equals(input) && 
                (
                    this.Resets == input.Resets ||
                    (this.Resets != null &&
                    this.Resets.Equals(input.Resets))
                ) && base.Equals(input) && 
                (
                    this.Limit == input.Limit ||
                    (this.Limit != null &&
                    this.Limit.Equals(input.Limit))
                ) && base.Equals(input) && 
                (
                    this.Enforced == input.Enforced ||
                    (this.Enforced != null &&
                    this.Enforced.Equals(input.Enforced))
                ) && base.Equals(input) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Resets != null)
                    hashCode = hashCode * 59 + this.Resets.GetHashCode();
                if (this.Limit != null)
                    hashCode = hashCode * 59 + this.Limit.GetHashCode();
                if (this.Enforced != null)
                    hashCode = hashCode * 59 + this.Enforced.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in base.BaseValidate(validationContext)) yield return x;

            
            // Type (string) pattern
            Regex regexType = new Regex(@"^QuotaPlan$", RegexOptions.CultureInvariant);
            if (false == regexType.Match(this.Type).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Type, must match a pattern of " + regexType, new [] { "Type" });
            }

            yield break;
        }
    }
}
