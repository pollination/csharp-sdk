/* 
 * pollination-server
 *
 * Pollination Server OpenAPI Definition
 *
 * Contact: info@pollination.cloud
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;


namespace PollinationSDK
{
    /// <summary>
    /// LicensePoolPublic
    /// </summary>
    [DataContract(Name = "LicensePoolPublic")]
    public partial class LicensePoolPublic : IEquatable<LicensePoolPublic>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LicensePoolPublic" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected LicensePoolPublic() 
        { 
            // Set non-required readonly properties with defaultValue
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="LicensePoolPublic" /> class.
        /// </summary>
        /// <param name="accessors">The entities that can access the license though the pool.</param>
        /// <param name="id">The ID of the pool (required).</param>
        /// <param name="licenseId">The ID of the license to which the pool provides access (required).</param>
        /// <param name="owner">The account that owns the license (required).</param>
        /// <param name="permissions">permissions (required).</param>
        public LicensePoolPublic
        (
           Guid id, string licenseId, AccountPublic owner, UserPermission permissions, // Required parameters
           List<LicensePoolAccessPolicy> accessors= default // Optional parameters
        )// BaseClass
        {
            this.Id = id;
            // to ensure "licenseId" is required (not null)
            this.LicenseId = licenseId ?? throw new ArgumentNullException("licenseId is a required property for LicensePoolPublic and cannot be null");
            // to ensure "owner" is required (not null)
            this.Owner = owner ?? throw new ArgumentNullException("owner is a required property for LicensePoolPublic and cannot be null");
            // to ensure "permissions" is required (not null)
            this.Permissions = permissions ?? throw new ArgumentNullException("permissions is a required property for LicensePoolPublic and cannot be null");
            this.Accessors = accessors;

            // Set non-required readonly properties with defaultValue
        }


        /// <summary>
        /// The entities that can access the license though the pool
        /// </summary>
        /// <value>The entities that can access the license though the pool</value>
        [DataMember(Name = "accessors", EmitDefaultValue = false)]
        public List<LicensePoolAccessPolicy> Accessors { get; set; } 
        /// <summary>
        /// The ID of the pool
        /// </summary>
        /// <value>The ID of the pool</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = false)]
        public Guid Id { get; set; } 
        /// <summary>
        /// The ID of the license to which the pool provides access
        /// </summary>
        /// <value>The ID of the license to which the pool provides access</value>
        [DataMember(Name = "license_id", IsRequired = true, EmitDefaultValue = false)]
        public string LicenseId { get; set; } 
        /// <summary>
        /// The account that owns the license
        /// </summary>
        /// <value>The account that owns the license</value>
        [DataMember(Name = "owner", IsRequired = true, EmitDefaultValue = false)]
        public AccountPublic Owner { get; set; } 
        /// <summary>
        /// Gets or Sets Permissions
        /// </summary>
        [DataMember(Name = "permissions", IsRequired = true, EmitDefaultValue = false)]
        public UserPermission Permissions { get; set; } 

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            return "LicensePoolPublic";
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString(bool detailed)
        {
            if (!detailed)
                return this.ToString();
            
            var sb = new StringBuilder();
            sb.Append("LicensePoolPublic:\n");
            sb.Append("  Accessors: ").Append(Accessors).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  LicenseId: ").Append(LicenseId).Append("\n");
            sb.Append("  Owner: ").Append(Owner).Append("\n");
            sb.Append("  Permissions: ").Append(Permissions).Append("\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the object from JSON string
        /// </summary>
        /// <returns>LicensePoolPublic object</returns>
        public static LicensePoolPublic FromJson(string json)
        {
            var obj = JsonConvert.DeserializeObject<LicensePoolPublic>(json, JsonSetting.AnyOfConvertSetting);
            if (obj == null)
                return null;
            return obj.Type.ToLower() == obj.GetType().Name.ToLower() ? obj : null;
        }

        /// <summary>
        /// Creates a new instance with the same properties.
        /// </summary>
        /// <returns>LicensePoolPublic object</returns>
        public virtual LicensePoolPublic DuplicateLicensePoolPublic()
        {
            return FromJson(this.ToJson());
        }

        /// <summary>
        /// Creates a new instance with the same properties.
        /// </summary>
        /// <returns>OpenAPIGenBaseModel</returns>
        public override OpenAPIGenBaseModel Duplicate()
        {
            return DuplicateLicensePoolPublic();
        }

     
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            input = input is AnyOf anyOf ? anyOf.Obj : input;
            return this.Equals(input as LicensePoolPublic);
        }

        /// <summary>
        /// Returns true if LicensePoolPublic instances are equal
        /// </summary>
        /// <param name="input">Instance of LicensePoolPublic to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LicensePoolPublic input)
        {
            if (input == null)
                return false;
            return 
                (
                    this.Accessors == input.Accessors ||
                    this.Accessors != null &&
                    input.Accessors != null &&
                    this.Accessors.SequenceEqual(input.Accessors)
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.LicenseId == input.LicenseId ||
                    (this.LicenseId != null &&
                    this.LicenseId.Equals(input.LicenseId))
                ) && 
                (
                    this.Owner == input.Owner ||
                    (this.Owner != null &&
                    this.Owner.Equals(input.Owner))
                ) && 
                (
                    this.Permissions == input.Permissions ||
                    (this.Permissions != null &&
                    this.Permissions.Equals(input.Permissions))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Accessors != null)
                    hashCode = hashCode * 59 + this.Accessors.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.LicenseId != null)
                    hashCode = hashCode * 59 + this.LicenseId.GetHashCode();
                if (this.Owner != null)
                    hashCode = hashCode * 59 + this.Owner.GetHashCode();
                if (this.Permissions != null)
                    hashCode = hashCode * 59 + this.Permissions.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
