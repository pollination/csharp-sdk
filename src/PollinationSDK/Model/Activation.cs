/* 
 * pollination-server
 *
 * Pollination Server OpenAPI Definition
 *
 * Contact: info@pollination.cloud
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;


namespace PollinationSDK
{
    /// <summary>
    /// Activation
    /// </summary>
    [DataContract(Name = "Activation")]
    public partial class Activation : CryptlexBase, IEquatable<Activation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Activation" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Activation() 
        { 
            // Set non-required readonly properties with defaultValue
            this.Type = "Activation";
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Activation" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="createdAt">createdAt (required).</param>
        /// <param name="updatedAt">updatedAt (required).</param>
        /// <param name="offline">offline (required).</param>
        /// <param name="lastSyncedAt">lastSyncedAt (required).</param>
        /// <param name="location">location (required).</param>
        /// <param name="os">os.</param>
        /// <param name="osVersion">osVersion.</param>
        /// <param name="hostname">hostname.</param>
        /// <param name="appVersion">appVersion.</param>
        /// <param name="leaseExpiresAt">leaseExpiresAt.</param>
        /// <param name="metadata">metadata.</param>
        /// <param name="licenseId">licenseId.</param>
        /// <param name="user">The user associated with the activation.</param>
        public Activation
        (
           string id, DateTime createdAt, DateTime updatedAt, bool offline, DateTime lastSyncedAt, Location location, // Required parameters
           string os= default, string osVersion= default, string hostname= default, string appVersion= default, DateTime leaseExpiresAt= default, List<Metadata> metadata= default, string licenseId= default, AccountPublic user= default // Optional parameters
        ) : base()// BaseClass
        {
            // to ensure "id" is required (not null)
            this.Id = id ?? throw new ArgumentNullException("id is a required property for Activation and cannot be null");
            this.CreatedAt = createdAt;
            this.UpdatedAt = updatedAt;
            this.Offline = offline;
            this.LastSyncedAt = lastSyncedAt;
            // to ensure "location" is required (not null)
            this.Location = location ?? throw new ArgumentNullException("location is a required property for Activation and cannot be null");
            this.Os = os;
            this.OsVersion = osVersion;
            this.Hostname = hostname;
            this.AppVersion = appVersion;
            this.LeaseExpiresAt = leaseExpiresAt;
            this.Metadata = metadata;
            this.LicenseId = licenseId;
            this.User = user;

            // Set non-required readonly properties with defaultValue
            this.Type = "Activation";
        }

        //============================================== is ReadOnly 
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type")]
        public override string Type { get; protected set; }  = "Activation";

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", IsRequired = true)]
        public string Id { get; set; } 
        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name = "created_at", IsRequired = true)]
        public DateTime CreatedAt { get; set; } 
        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name = "updated_at", IsRequired = true)]
        public DateTime UpdatedAt { get; set; } 
        /// <summary>
        /// Gets or Sets Offline
        /// </summary>
        [DataMember(Name = "offline", IsRequired = true)]
        public bool Offline { get; set; } 
        /// <summary>
        /// Gets or Sets LastSyncedAt
        /// </summary>
        [DataMember(Name = "last_synced_at", IsRequired = true)]
        public DateTime LastSyncedAt { get; set; } 
        /// <summary>
        /// Gets or Sets Location
        /// </summary>
        [DataMember(Name = "location", IsRequired = true)]
        public Location Location { get; set; } 
        /// <summary>
        /// Gets or Sets Os
        /// </summary>
        [DataMember(Name = "os")]
        public string Os { get; set; } 
        /// <summary>
        /// Gets or Sets OsVersion
        /// </summary>
        [DataMember(Name = "os_version")]
        public string OsVersion { get; set; } 
        /// <summary>
        /// Gets or Sets Hostname
        /// </summary>
        [DataMember(Name = "hostname")]
        public string Hostname { get; set; } 
        /// <summary>
        /// Gets or Sets AppVersion
        /// </summary>
        [DataMember(Name = "app_version")]
        public string AppVersion { get; set; } 
        /// <summary>
        /// Gets or Sets LeaseExpiresAt
        /// </summary>
        [DataMember(Name = "lease_expires_at")]
        public DateTime LeaseExpiresAt { get; set; } 
        /// <summary>
        /// Gets or Sets Metadata
        /// </summary>
        [DataMember(Name = "metadata")]
        public List<Metadata> Metadata { get; set; } 
        /// <summary>
        /// Gets or Sets LicenseId
        /// </summary>
        [DataMember(Name = "license_id")]
        public string LicenseId { get; set; } 
        /// <summary>
        /// The user associated with the activation
        /// </summary>
        /// <value>The user associated with the activation</value>
        [DataMember(Name = "user")]
        public AccountPublic User { get; set; } 

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            return "Activation";
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString(bool detailed)
        {
            if (!detailed)
                return this.ToString();
            
            var sb = new StringBuilder();
            sb.Append("Activation:\n");
            sb.Append("  Type: ").Append(this.Type).Append("\n");
            sb.Append("  Id: ").Append(this.Id).Append("\n");
            sb.Append("  CreatedAt: ").Append(this.CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(this.UpdatedAt).Append("\n");
            sb.Append("  Offline: ").Append(this.Offline).Append("\n");
            sb.Append("  LastSyncedAt: ").Append(this.LastSyncedAt).Append("\n");
            sb.Append("  Location: ").Append(this.Location).Append("\n");
            sb.Append("  Os: ").Append(this.Os).Append("\n");
            sb.Append("  OsVersion: ").Append(this.OsVersion).Append("\n");
            sb.Append("  Hostname: ").Append(this.Hostname).Append("\n");
            sb.Append("  AppVersion: ").Append(this.AppVersion).Append("\n");
            sb.Append("  LeaseExpiresAt: ").Append(this.LeaseExpiresAt).Append("\n");
            sb.Append("  Metadata: ").Append(this.Metadata).Append("\n");
            sb.Append("  LicenseId: ").Append(this.LicenseId).Append("\n");
            sb.Append("  User: ").Append(this.User).Append("\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the object from JSON string
        /// </summary>
        /// <returns>Activation object</returns>
        public static Activation FromJson(string json)
        {
            var obj = JsonConvert.DeserializeObject<Activation>(json, JsonSetting.AnyOfConvertSetting);
            if (obj == null)
                return null;
            return obj.Type.ToLower() == obj.GetType().Name.ToLower() ? obj : null;
        }

        /// <summary>
        /// Creates a new instance with the same properties.
        /// </summary>
        /// <returns>Activation object</returns>
        public virtual Activation DuplicateActivation()
        {
            return FromJson(this.ToJson());
        }

        /// <summary>
        /// Creates a new instance with the same properties.
        /// </summary>
        /// <returns>OpenAPIGenBaseModel</returns>
        public override OpenAPIGenBaseModel Duplicate()
        {
            return DuplicateActivation();
        }

        /// <summary>
        /// Creates a new instance with the same properties.
        /// </summary>
        /// <returns>OpenAPIGenBaseModel</returns>
        public override CryptlexBase DuplicateCryptlexBase()
        {
            return DuplicateActivation();
        }
     
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            input = input is AnyOf anyOf ? anyOf.Obj : input;
            return this.Equals(input as Activation);
        }

        /// <summary>
        /// Returns true if Activation instances are equal
        /// </summary>
        /// <param name="input">Instance of Activation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Activation input)
        {
            if (input == null)
                return false;
            return base.Equals(input) && 
                    Extension.Equals(this.Id, input.Id) && 
                    Extension.Equals(this.CreatedAt, input.CreatedAt) && 
                    Extension.Equals(this.UpdatedAt, input.UpdatedAt) && 
                    Extension.Equals(this.Offline, input.Offline) && 
                    Extension.Equals(this.LastSyncedAt, input.LastSyncedAt) && 
                    Extension.Equals(this.Location, input.Location) && 
                    Extension.Equals(this.Os, input.Os) && 
                    Extension.Equals(this.OsVersion, input.OsVersion) && 
                    Extension.Equals(this.Hostname, input.Hostname) && 
                    Extension.Equals(this.AppVersion, input.AppVersion) && 
                    Extension.Equals(this.LeaseExpiresAt, input.LeaseExpiresAt) && 
                (
                    this.Metadata == input.Metadata ||
                    Extension.AllEquals(this.Metadata, input.Metadata)
                ) && 
                    Extension.Equals(this.LicenseId, input.LicenseId) && 
                    Extension.Equals(this.User, input.User) && 
                    Extension.Equals(this.Type, input.Type);
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.CreatedAt != null)
                    hashCode = hashCode * 59 + this.CreatedAt.GetHashCode();
                if (this.UpdatedAt != null)
                    hashCode = hashCode * 59 + this.UpdatedAt.GetHashCode();
                if (this.Offline != null)
                    hashCode = hashCode * 59 + this.Offline.GetHashCode();
                if (this.LastSyncedAt != null)
                    hashCode = hashCode * 59 + this.LastSyncedAt.GetHashCode();
                if (this.Location != null)
                    hashCode = hashCode * 59 + this.Location.GetHashCode();
                if (this.Os != null)
                    hashCode = hashCode * 59 + this.Os.GetHashCode();
                if (this.OsVersion != null)
                    hashCode = hashCode * 59 + this.OsVersion.GetHashCode();
                if (this.Hostname != null)
                    hashCode = hashCode * 59 + this.Hostname.GetHashCode();
                if (this.AppVersion != null)
                    hashCode = hashCode * 59 + this.AppVersion.GetHashCode();
                if (this.LeaseExpiresAt != null)
                    hashCode = hashCode * 59 + this.LeaseExpiresAt.GetHashCode();
                if (this.Metadata != null)
                    hashCode = hashCode * 59 + this.Metadata.GetHashCode();
                if (this.LicenseId != null)
                    hashCode = hashCode * 59 + this.LicenseId.GetHashCode();
                if (this.User != null)
                    hashCode = hashCode * 59 + this.User.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in base.BaseValidate(validationContext)) yield return x;

            
            // Type (string) pattern
            Regex regexType = new Regex(@"^Activation$", RegexOptions.CultureInvariant);
            if (this.Type != null && false == regexType.Match(this.Type).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Type, must match a pattern of " + regexType, new [] { "Type" });
            }

            yield break;
        }
    }
}
