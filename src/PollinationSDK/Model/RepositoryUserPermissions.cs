/* 
 * pollination-server
 *
 * Pollination Server OpenAPI Definition
 *
 * Contact: info@pollination.cloud
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;


namespace PollinationSDK
{
    /// <summary>
    /// RepositoryUserPermissions
    /// </summary>
    [DataContract(Name = "RepositoryUserPermissions")]
    public partial class RepositoryUserPermissions : IEquatable<RepositoryUserPermissions>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RepositoryUserPermissions" /> class.
        /// </summary>
        /// <param name="admin">The user has admin permission to this resource (default to false).</param>
        /// <param name="read">The user has read permission on this resource (default to false).</param>
        /// <param name="write">The user has write permission on this resource (default to false).</param>
        public RepositoryUserPermissions
        (
           // Required parameters
           bool admin = false, bool read = false, bool write = false// Optional parameters
        )// BaseClass
        {
            this.Admin = admin;
            this.Read = read;
            this.Write = write;

            // Set non-required readonly properties with defaultValue
        }


        /// <summary>
        /// The user has admin permission to this resource
        /// </summary>
        /// <value>The user has admin permission to this resource</value>
        [DataMember(Name = "admin", EmitDefaultValue = true)]
        public bool Admin { get; set; }  = false;
        /// <summary>
        /// The user has read permission on this resource
        /// </summary>
        /// <value>The user has read permission on this resource</value>
        [DataMember(Name = "read", EmitDefaultValue = true)]
        public bool Read { get; set; }  = false;
        /// <summary>
        /// The user has write permission on this resource
        /// </summary>
        /// <value>The user has write permission on this resource</value>
        [DataMember(Name = "write", EmitDefaultValue = true)]
        public bool Write { get; set; }  = false;

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            return "RepositoryUserPermissions";
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString(bool detailed)
        {
            if (!detailed)
                return this.ToString();
            
            var sb = new StringBuilder();
            sb.Append("RepositoryUserPermissions:\n");
            sb.Append("  Admin: ").Append(Admin).Append("\n");
            sb.Append("  Read: ").Append(Read).Append("\n");
            sb.Append("  Write: ").Append(Write).Append("\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the object from JSON string
        /// </summary>
        /// <returns>RepositoryUserPermissions object</returns>
        public static RepositoryUserPermissions FromJson(string json)
        {
            var obj = JsonConvert.DeserializeObject<RepositoryUserPermissions>(json, JsonSetting.AnyOfConvertSetting);
            if (obj == null)
                return null;
            return obj.Type.ToLower() == obj.GetType().Name.ToLower() ? obj : null;
        }

        /// <summary>
        /// Creates a new instance with the same properties.
        /// </summary>
        /// <returns>RepositoryUserPermissions object</returns>
        public virtual RepositoryUserPermissions DuplicateRepositoryUserPermissions()
        {
            return FromJson(this.ToJson());
        }

        /// <summary>
        /// Creates a new instance with the same properties.
        /// </summary>
        /// <returns>OpenAPIGenBaseModel</returns>
        public override OpenAPIGenBaseModel Duplicate()
        {
            return DuplicateRepositoryUserPermissions();
        }

     
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            input = input is AnyOf anyOf ? anyOf.Obj : input;
            return this.Equals(input as RepositoryUserPermissions);
        }

        /// <summary>
        /// Returns true if RepositoryUserPermissions instances are equal
        /// </summary>
        /// <param name="input">Instance of RepositoryUserPermissions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RepositoryUserPermissions input)
        {
            if (input == null)
                return false;
            return 
                (
                    this.Admin == input.Admin ||
                    (this.Admin != null &&
                    this.Admin.Equals(input.Admin))
                ) && 
                (
                    this.Read == input.Read ||
                    (this.Read != null &&
                    this.Read.Equals(input.Read))
                ) && 
                (
                    this.Write == input.Write ||
                    (this.Write != null &&
                    this.Write.Equals(input.Write))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Admin != null)
                    hashCode = hashCode * 59 + this.Admin.GetHashCode();
                if (this.Read != null)
                    hashCode = hashCode * 59 + this.Read.GetHashCode();
                if (this.Write != null)
                    hashCode = hashCode * 59 + this.Write.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
