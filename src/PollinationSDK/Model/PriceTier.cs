/* 
 * pollination-server
 *
 * Pollination Server OpenAPI Definition
 *
 * Contact: info@pollination.cloud
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;


namespace PollinationSDK
{
    /// <summary>
    /// PriceTier
    /// </summary>
    [DataContract(Name = "PriceTier")]
    public partial class PriceTier : OpenAPIGenBaseModel, IEquatable<PriceTier>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PriceTier" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PriceTier() 
        { 
            // Set non-required readonly properties with defaultValue
            this.Type = "PriceTier";
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="PriceTier" /> class.
        /// </summary>
        /// <param name="unitAmount">unitAmount (required).</param>
        /// <param name="unitAmountDecimal">unitAmountDecimal (required).</param>
        /// <param name="flatAmount">flatAmount.</param>
        /// <param name="flatAmountDecimal">flatAmountDecimal.</param>
        /// <param name="upTo">upTo.</param>
        public PriceTier
        (
           int unitAmount, string unitAmountDecimal, // Required parameters
           int flatAmount= default, string flatAmountDecimal= default, int upTo= default // Optional parameters
        ) : base()// BaseClass
        {
            this.UnitAmount = unitAmount;
            // to ensure "unitAmountDecimal" is required (not null)
            this.UnitAmountDecimal = unitAmountDecimal ?? throw new ArgumentNullException("unitAmountDecimal is a required property for PriceTier and cannot be null");
            this.FlatAmount = flatAmount;
            this.FlatAmountDecimal = flatAmountDecimal;
            this.UpTo = upTo;

            // Set non-required readonly properties with defaultValue
            this.Type = "PriceTier";
        }

        //============================================== is ReadOnly 
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = true)]
        public override string Type { get; protected internal set; }  = "PriceTier";

        /// <summary>
        /// Gets or Sets UnitAmount
        /// </summary>
        [DataMember(Name = "unit_amount", IsRequired = true, EmitDefaultValue = false)]
        public int UnitAmount { get; set; } 
        /// <summary>
        /// Gets or Sets UnitAmountDecimal
        /// </summary>
        [DataMember(Name = "unit_amount_decimal", IsRequired = true, EmitDefaultValue = false)]
        public string UnitAmountDecimal { get; set; } 
        /// <summary>
        /// Gets or Sets FlatAmount
        /// </summary>
        [DataMember(Name = "flat_amount", EmitDefaultValue = false)]
        public int FlatAmount { get; set; } 
        /// <summary>
        /// Gets or Sets FlatAmountDecimal
        /// </summary>
        [DataMember(Name = "flat_amount_decimal", EmitDefaultValue = false)]
        public string FlatAmountDecimal { get; set; } 
        /// <summary>
        /// Gets or Sets UpTo
        /// </summary>
        [DataMember(Name = "up_to", EmitDefaultValue = false)]
        public int UpTo { get; set; } 

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            return "PriceTier";
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString(bool detailed)
        {
            if (!detailed)
                return this.ToString();
            
            var sb = new StringBuilder();
            sb.Append("PriceTier:\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  UnitAmount: ").Append(UnitAmount).Append("\n");
            sb.Append("  UnitAmountDecimal: ").Append(UnitAmountDecimal).Append("\n");
            sb.Append("  FlatAmount: ").Append(FlatAmount).Append("\n");
            sb.Append("  FlatAmountDecimal: ").Append(FlatAmountDecimal).Append("\n");
            sb.Append("  UpTo: ").Append(UpTo).Append("\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the object from JSON string
        /// </summary>
        /// <returns>PriceTier object</returns>
        public static PriceTier FromJson(string json)
        {
            var obj = JsonConvert.DeserializeObject<PriceTier>(json, JsonSetting.AnyOfConvertSetting);
            if (obj == null)
                return null;
            return obj.Type.ToLower() == obj.GetType().Name.ToLower() ? obj : null;
        }

        /// <summary>
        /// Creates a new instance with the same properties.
        /// </summary>
        /// <returns>PriceTier object</returns>
        public virtual PriceTier DuplicatePriceTier()
        {
            return FromJson(this.ToJson());
        }

        /// <summary>
        /// Creates a new instance with the same properties.
        /// </summary>
        /// <returns>OpenAPIGenBaseModel</returns>
        public override OpenAPIGenBaseModel Duplicate()
        {
            return DuplicatePriceTier();
        }

        /// <summary>
        /// Creates a new instance with the same properties.
        /// </summary>
        /// <returns>OpenAPIGenBaseModel</returns>
        public override OpenAPIGenBaseModel DuplicateOpenAPIGenBaseModel()
        {
            return DuplicatePriceTier();
        }
     
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            input = input is AnyOf anyOf ? anyOf.Obj : input;
            return this.Equals(input as PriceTier);
        }

        /// <summary>
        /// Returns true if PriceTier instances are equal
        /// </summary>
        /// <param name="input">Instance of PriceTier to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PriceTier input)
        {
            if (input == null)
                return false;
            return base.Equals(input) && 
                (
                    this.UnitAmount == input.UnitAmount ||
                    (this.UnitAmount != null &&
                    this.UnitAmount.Equals(input.UnitAmount))
                ) && base.Equals(input) && 
                (
                    this.UnitAmountDecimal == input.UnitAmountDecimal ||
                    (this.UnitAmountDecimal != null &&
                    this.UnitAmountDecimal.Equals(input.UnitAmountDecimal))
                ) && base.Equals(input) && 
                (
                    this.FlatAmount == input.FlatAmount ||
                    (this.FlatAmount != null &&
                    this.FlatAmount.Equals(input.FlatAmount))
                ) && base.Equals(input) && 
                (
                    this.FlatAmountDecimal == input.FlatAmountDecimal ||
                    (this.FlatAmountDecimal != null &&
                    this.FlatAmountDecimal.Equals(input.FlatAmountDecimal))
                ) && base.Equals(input) && 
                (
                    this.UpTo == input.UpTo ||
                    (this.UpTo != null &&
                    this.UpTo.Equals(input.UpTo))
                ) && base.Equals(input) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.UnitAmount != null)
                    hashCode = hashCode * 59 + this.UnitAmount.GetHashCode();
                if (this.UnitAmountDecimal != null)
                    hashCode = hashCode * 59 + this.UnitAmountDecimal.GetHashCode();
                if (this.FlatAmount != null)
                    hashCode = hashCode * 59 + this.FlatAmount.GetHashCode();
                if (this.FlatAmountDecimal != null)
                    hashCode = hashCode * 59 + this.FlatAmountDecimal.GetHashCode();
                if (this.UpTo != null)
                    hashCode = hashCode * 59 + this.UpTo.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in base.BaseValidate(validationContext)) yield return x;

            
            // Type (string) pattern
            Regex regexType = new Regex(@"^PriceTier$", RegexOptions.CultureInvariant);
            if (false == regexType.Match(this.Type).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Type, must match a pattern of " + regexType, new [] { "Type" });
            }

            yield break;
        }
    }
}
