/* 
 * pollination-server
 *
 * Pollination Server OpenAPI Definition
 *
 * Contact: info@pollination.cloud
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;


namespace PollinationSDK
{
    /// <summary>
    /// DailyUsage
    /// </summary>
    [DataContract(Name = "DailyUsage")]
    public partial class DailyUsage : IEquatable<DailyUsage>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DailyUsage" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DailyUsage() 
        { 
            // Set non-required readonly properties with defaultValue
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="DailyUsage" /> class.
        /// </summary>
        /// <param name="cpu">cpu usage (default to 0D).</param>
        /// <param name="date">The day this usage was aggregated for (required).</param>
        /// <param name="failed">failed usage (default to 0).</param>
        /// <param name="memory">memory usage (default to 0D).</param>
        /// <param name="succeeded">succeeded usage (default to 0).</param>
        public DailyUsage
        (
           DateTime date, // Required parameters
           double cpu = 0D, int failed = 0, double memory = 0D, int succeeded = 0// Optional parameters
        )// BaseClass
        {
            this.Date = date;
            this.Cpu = cpu;
            this.Failed = failed;
            this.Memory = memory;
            this.Succeeded = succeeded;

            // Set non-required readonly properties with defaultValue
        }


        /// <summary>
        /// cpu usage
        /// </summary>
        /// <value>cpu usage</value>
        [DataMember(Name = "cpu", EmitDefaultValue = true)]
        public double Cpu { get; set; }  = 0D;
        /// <summary>
        /// The day this usage was aggregated for
        /// </summary>
        /// <value>The day this usage was aggregated for</value>
        [DataMember(Name = "date", IsRequired = true, EmitDefaultValue = false)]
        public DateTime Date { get; set; } 
        /// <summary>
        /// failed usage
        /// </summary>
        /// <value>failed usage</value>
        [DataMember(Name = "failed", EmitDefaultValue = true)]
        public int Failed { get; set; }  = 0;
        /// <summary>
        /// memory usage
        /// </summary>
        /// <value>memory usage</value>
        [DataMember(Name = "memory", EmitDefaultValue = true)]
        public double Memory { get; set; }  = 0D;
        /// <summary>
        /// succeeded usage
        /// </summary>
        /// <value>succeeded usage</value>
        [DataMember(Name = "succeeded", EmitDefaultValue = true)]
        public int Succeeded { get; set; }  = 0;

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            return "DailyUsage";
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString(bool detailed)
        {
            if (!detailed)
                return this.ToString();
            
            var sb = new StringBuilder();
            sb.Append("DailyUsage:\n");
            sb.Append("  Cpu: ").Append(Cpu).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  Failed: ").Append(Failed).Append("\n");
            sb.Append("  Memory: ").Append(Memory).Append("\n");
            sb.Append("  Succeeded: ").Append(Succeeded).Append("\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the object from JSON string
        /// </summary>
        /// <returns>DailyUsage object</returns>
        public static DailyUsage FromJson(string json)
        {
            var obj = JsonConvert.DeserializeObject<DailyUsage>(json, JsonSetting.AnyOfConvertSetting);
            if (obj == null)
                return null;
            return obj.Type.ToLower() == obj.GetType().Name.ToLower() ? obj : null;
        }

        /// <summary>
        /// Creates a new instance with the same properties.
        /// </summary>
        /// <returns>DailyUsage object</returns>
        public virtual DailyUsage DuplicateDailyUsage()
        {
            return FromJson(this.ToJson());
        }

        /// <summary>
        /// Creates a new instance with the same properties.
        /// </summary>
        /// <returns>OpenAPIGenBaseModel</returns>
        public override OpenAPIGenBaseModel Duplicate()
        {
            return DuplicateDailyUsage();
        }

     
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            input = input is AnyOf anyOf ? anyOf.Obj : input;
            return this.Equals(input as DailyUsage);
        }

        /// <summary>
        /// Returns true if DailyUsage instances are equal
        /// </summary>
        /// <param name="input">Instance of DailyUsage to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DailyUsage input)
        {
            if (input == null)
                return false;
            return 
                (
                    this.Cpu == input.Cpu ||
                    (this.Cpu != null &&
                    this.Cpu.Equals(input.Cpu))
                ) && 
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                ) && 
                (
                    this.Failed == input.Failed ||
                    (this.Failed != null &&
                    this.Failed.Equals(input.Failed))
                ) && 
                (
                    this.Memory == input.Memory ||
                    (this.Memory != null &&
                    this.Memory.Equals(input.Memory))
                ) && 
                (
                    this.Succeeded == input.Succeeded ||
                    (this.Succeeded != null &&
                    this.Succeeded.Equals(input.Succeeded))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Cpu != null)
                    hashCode = hashCode * 59 + this.Cpu.GetHashCode();
                if (this.Date != null)
                    hashCode = hashCode * 59 + this.Date.GetHashCode();
                if (this.Failed != null)
                    hashCode = hashCode * 59 + this.Failed.GetHashCode();
                if (this.Memory != null)
                    hashCode = hashCode * 59 + this.Memory.GetHashCode();
                if (this.Succeeded != null)
                    hashCode = hashCode * 59 + this.Succeeded.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
