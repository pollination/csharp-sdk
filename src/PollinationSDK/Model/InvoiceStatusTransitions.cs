/* 
 * pollination-server
 *
 * Pollination Server OpenAPI Definition
 *
 * Contact: info@pollination.cloud
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;


namespace PollinationSDK
{
    /// <summary>
    /// InvoiceStatusTransitions
    /// </summary>
    [DataContract(Name = "InvoiceStatusTransitions")]
    public partial class InvoiceStatusTransitions : OpenAPIGenBaseModel, IEquatable<InvoiceStatusTransitions>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InvoiceStatusTransitions" /> class.
        /// </summary>
        /// <param name="finalizedAt">finalizedAt.</param>
        /// <param name="markedUncollectibleAt">markedUncollectibleAt.</param>
        /// <param name="paidAt">paidAt.</param>
        /// <param name="voidedAt">voidedAt.</param>
        public InvoiceStatusTransitions
        (
           // Required parameters
           DateTime finalizedAt= default, DateTime markedUncollectibleAt= default, DateTime paidAt= default, DateTime voidedAt= default // Optional parameters
        ) : base()// BaseClass
        {
            this.FinalizedAt = finalizedAt;
            this.MarkedUncollectibleAt = markedUncollectibleAt;
            this.PaidAt = paidAt;
            this.VoidedAt = voidedAt;

            // Set non-required readonly properties with defaultValue
            this.Type = "InvoiceStatusTransitions";
        }

        //============================================== is ReadOnly 
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = true)]
        public override string Type { get; protected internal set; }  = "InvoiceStatusTransitions";

        /// <summary>
        /// Gets or Sets FinalizedAt
        /// </summary>
        [DataMember(Name = "finalized_at", EmitDefaultValue = false)]
        public DateTime FinalizedAt { get; set; } 
        /// <summary>
        /// Gets or Sets MarkedUncollectibleAt
        /// </summary>
        [DataMember(Name = "marked_uncollectible_at", EmitDefaultValue = false)]
        public DateTime MarkedUncollectibleAt { get; set; } 
        /// <summary>
        /// Gets or Sets PaidAt
        /// </summary>
        [DataMember(Name = "paid_at", EmitDefaultValue = false)]
        public DateTime PaidAt { get; set; } 
        /// <summary>
        /// Gets or Sets VoidedAt
        /// </summary>
        [DataMember(Name = "voided_at", EmitDefaultValue = false)]
        public DateTime VoidedAt { get; set; } 

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            return "InvoiceStatusTransitions";
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString(bool detailed)
        {
            if (!detailed)
                return this.ToString();
            
            var sb = new StringBuilder();
            sb.Append("InvoiceStatusTransitions:\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  FinalizedAt: ").Append(FinalizedAt).Append("\n");
            sb.Append("  MarkedUncollectibleAt: ").Append(MarkedUncollectibleAt).Append("\n");
            sb.Append("  PaidAt: ").Append(PaidAt).Append("\n");
            sb.Append("  VoidedAt: ").Append(VoidedAt).Append("\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the object from JSON string
        /// </summary>
        /// <returns>InvoiceStatusTransitions object</returns>
        public static InvoiceStatusTransitions FromJson(string json)
        {
            var obj = JsonConvert.DeserializeObject<InvoiceStatusTransitions>(json, JsonSetting.AnyOfConvertSetting);
            if (obj == null)
                return null;
            return obj.Type.ToLower() == obj.GetType().Name.ToLower() ? obj : null;
        }

        /// <summary>
        /// Creates a new instance with the same properties.
        /// </summary>
        /// <returns>InvoiceStatusTransitions object</returns>
        public virtual InvoiceStatusTransitions DuplicateInvoiceStatusTransitions()
        {
            return FromJson(this.ToJson());
        }

        /// <summary>
        /// Creates a new instance with the same properties.
        /// </summary>
        /// <returns>OpenAPIGenBaseModel</returns>
        public override OpenAPIGenBaseModel Duplicate()
        {
            return DuplicateInvoiceStatusTransitions();
        }

        /// <summary>
        /// Creates a new instance with the same properties.
        /// </summary>
        /// <returns>OpenAPIGenBaseModel</returns>
        public override OpenAPIGenBaseModel DuplicateOpenAPIGenBaseModel()
        {
            return DuplicateInvoiceStatusTransitions();
        }
     
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            input = input is AnyOf anyOf ? anyOf.Obj : input;
            return this.Equals(input as InvoiceStatusTransitions);
        }

        /// <summary>
        /// Returns true if InvoiceStatusTransitions instances are equal
        /// </summary>
        /// <param name="input">Instance of InvoiceStatusTransitions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InvoiceStatusTransitions input)
        {
            if (input == null)
                return false;
            return base.Equals(input) && 
                (
                    this.FinalizedAt == input.FinalizedAt ||
                    (this.FinalizedAt != null &&
                    this.FinalizedAt.Equals(input.FinalizedAt))
                ) && base.Equals(input) && 
                (
                    this.MarkedUncollectibleAt == input.MarkedUncollectibleAt ||
                    (this.MarkedUncollectibleAt != null &&
                    this.MarkedUncollectibleAt.Equals(input.MarkedUncollectibleAt))
                ) && base.Equals(input) && 
                (
                    this.PaidAt == input.PaidAt ||
                    (this.PaidAt != null &&
                    this.PaidAt.Equals(input.PaidAt))
                ) && base.Equals(input) && 
                (
                    this.VoidedAt == input.VoidedAt ||
                    (this.VoidedAt != null &&
                    this.VoidedAt.Equals(input.VoidedAt))
                ) && base.Equals(input) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.FinalizedAt != null)
                    hashCode = hashCode * 59 + this.FinalizedAt.GetHashCode();
                if (this.MarkedUncollectibleAt != null)
                    hashCode = hashCode * 59 + this.MarkedUncollectibleAt.GetHashCode();
                if (this.PaidAt != null)
                    hashCode = hashCode * 59 + this.PaidAt.GetHashCode();
                if (this.VoidedAt != null)
                    hashCode = hashCode * 59 + this.VoidedAt.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in base.BaseValidate(validationContext)) yield return x;

            
            // Type (string) pattern
            Regex regexType = new Regex(@"^InvoiceStatusTransitions$", RegexOptions.CultureInvariant);
            if (false == regexType.Match(this.Type).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Type, must match a pattern of " + regexType, new [] { "Type" });
            }

            yield break;
        }
    }
}
