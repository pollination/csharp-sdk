/* 
 * pollination-server
 *
 * Pollination Server OpenAPI Definition
 *
 * The version of the OpenAPI document: 0.17.0
 * Contact: info@pollination.cloud
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using PollinationSDK.Client;
using PollinationSDK.Model;

namespace PollinationSDK.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPaymentsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add Payment Method
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountName"></param>
        /// <param name="paymentCreate"></param>
        /// <returns>PaymentSetup</returns>
        PaymentSetup CreatePaymentMethod (string accountName, PaymentCreate paymentCreate);

        /// <summary>
        /// Add Payment Method
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountName"></param>
        /// <param name="paymentCreate"></param>
        /// <returns>ApiResponse of PaymentSetup</returns>
        ApiResponse<PaymentSetup> CreatePaymentMethodWithHttpInfo (string accountName, PaymentCreate paymentCreate);
        /// <summary>
        /// Create Subscription
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountName"></param>
        /// <param name="subscriptionCreate"></param>
        /// <returns>CreatedContent</returns>
        CreatedContent CreateSubscription (string accountName, SubscriptionCreate subscriptionCreate);

        /// <summary>
        /// Create Subscription
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountName"></param>
        /// <param name="subscriptionCreate"></param>
        /// <returns>ApiResponse of CreatedContent</returns>
        ApiResponse<CreatedContent> CreateSubscriptionWithHttpInfo (string accountName, SubscriptionCreate subscriptionCreate);
        /// <summary>
        /// Get Inventory
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Inventory</returns>
        Inventory GetInventory ();

        /// <summary>
        /// Get Inventory
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Inventory</returns>
        ApiResponse<Inventory> GetInventoryWithHttpInfo ();
        /// <summary>
        /// Get Subscription
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountName"></param>
        /// <returns>Subscription</returns>
        Subscription GetSubscription (string accountName);

        /// <summary>
        /// Get Subscription
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountName"></param>
        /// <returns>ApiResponse of Subscription</returns>
        ApiResponse<Subscription> GetSubscriptionWithHttpInfo (string accountName);
        /// <summary>
        /// Get Payment Methods
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountName"></param>
        /// <returns>PaymentMethodList</returns>
        PaymentMethodList ListPaymentMethods (string accountName);

        /// <summary>
        /// Get Payment Methods
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountName"></param>
        /// <returns>ApiResponse of PaymentMethodList</returns>
        ApiResponse<PaymentMethodList> ListPaymentMethodsWithHttpInfo (string accountName);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Add Payment Method
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountName"></param>
        /// <param name="paymentCreate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of PaymentSetup</returns>
        System.Threading.Tasks.Task<PaymentSetup> CreatePaymentMethodAsync (string accountName, PaymentCreate paymentCreate, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Add Payment Method
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountName"></param>
        /// <param name="paymentCreate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (PaymentSetup)</returns>
        System.Threading.Tasks.Task<ApiResponse<PaymentSetup>> CreatePaymentMethodWithHttpInfoAsync (string accountName, PaymentCreate paymentCreate, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Create Subscription
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountName"></param>
        /// <param name="subscriptionCreate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CreatedContent</returns>
        System.Threading.Tasks.Task<CreatedContent> CreateSubscriptionAsync (string accountName, SubscriptionCreate subscriptionCreate, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create Subscription
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountName"></param>
        /// <param name="subscriptionCreate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CreatedContent)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreatedContent>> CreateSubscriptionWithHttpInfoAsync (string accountName, SubscriptionCreate subscriptionCreate, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Inventory
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Inventory</returns>
        System.Threading.Tasks.Task<Inventory> GetInventoryAsync (CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Inventory
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Inventory)</returns>
        System.Threading.Tasks.Task<ApiResponse<Inventory>> GetInventoryWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Subscription
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Subscription</returns>
        System.Threading.Tasks.Task<Subscription> GetSubscriptionAsync (string accountName, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Subscription
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Subscription)</returns>
        System.Threading.Tasks.Task<ApiResponse<Subscription>> GetSubscriptionWithHttpInfoAsync (string accountName, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Payment Methods
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of PaymentMethodList</returns>
        System.Threading.Tasks.Task<PaymentMethodList> ListPaymentMethodsAsync (string accountName, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Payment Methods
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (PaymentMethodList)</returns>
        System.Threading.Tasks.Task<ApiResponse<PaymentMethodList>> ListPaymentMethodsWithHttpInfoAsync (string accountName, CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PaymentsApi : IPaymentsApi
    {
        private PollinationSDK.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PaymentsApi(String basePath)
        {
            this.Configuration = new PollinationSDK.Client.Configuration { BasePath = basePath };

            ExceptionFactory = PollinationSDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentsApi"/> class
        /// </summary>
        /// <returns></returns>
        public PaymentsApi()
        {
            this.Configuration = PollinationSDK.Client.Configuration.Default;

            ExceptionFactory = PollinationSDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PaymentsApi(PollinationSDK.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = PollinationSDK.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = PollinationSDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public PollinationSDK.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public PollinationSDK.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Add Payment Method 
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountName"></param>
        /// <param name="paymentCreate"></param>
        /// <returns>PaymentSetup</returns>
        public PaymentSetup CreatePaymentMethod (string accountName, PaymentCreate paymentCreate)
        {
             ApiResponse<PaymentSetup> localVarResponse = CreatePaymentMethodWithHttpInfo(accountName, paymentCreate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add Payment Method 
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountName"></param>
        /// <param name="paymentCreate"></param>
        /// <returns>ApiResponse of PaymentSetup</returns>
        public ApiResponse<PaymentSetup> CreatePaymentMethodWithHttpInfo (string accountName, PaymentCreate paymentCreate)
        {
            // verify the required parameter 'accountName' is set
            if (accountName == null)
                throw new ApiException(400, "Missing required parameter 'accountName' when calling PaymentsApi->CreatePaymentMethod");
            // verify the required parameter 'paymentCreate' is set
            if (paymentCreate == null)
                throw new ApiException(400, "Missing required parameter 'paymentCreate' when calling PaymentsApi->CreatePaymentMethod");

            var localVarPath = "/payments/{account_name}/methods";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountName != null) localVarPathParams.Add("account_name", this.Configuration.ApiClient.ParameterToString(accountName)); // path parameter
            if (paymentCreate != null && paymentCreate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(paymentCreate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = paymentCreate; // byte array
            }

            // authentication (APIKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-pollination-token")))
            {
                localVarHeaderParams["x-pollination-token"] = this.Configuration.GetApiKeyWithPrefix("x-pollination-token");
            }
            // authentication (JWTAuth) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreatePaymentMethod", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PaymentSetup>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PaymentSetup) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaymentSetup)));
        }

        /// <summary>
        /// Add Payment Method 
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountName"></param>
        /// <param name="paymentCreate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of PaymentSetup</returns>
        public async System.Threading.Tasks.Task<PaymentSetup> CreatePaymentMethodAsync (string accountName, PaymentCreate paymentCreate, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<PaymentSetup> localVarResponse = await CreatePaymentMethodWithHttpInfoAsync(accountName, paymentCreate, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add Payment Method 
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountName"></param>
        /// <param name="paymentCreate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (PaymentSetup)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PaymentSetup>> CreatePaymentMethodWithHttpInfoAsync (string accountName, PaymentCreate paymentCreate, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountName' is set
            if (accountName == null)
                throw new ApiException(400, "Missing required parameter 'accountName' when calling PaymentsApi->CreatePaymentMethod");
            // verify the required parameter 'paymentCreate' is set
            if (paymentCreate == null)
                throw new ApiException(400, "Missing required parameter 'paymentCreate' when calling PaymentsApi->CreatePaymentMethod");

            var localVarPath = "/payments/{account_name}/methods";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountName != null) localVarPathParams.Add("account_name", this.Configuration.ApiClient.ParameterToString(accountName)); // path parameter
            if (paymentCreate != null && paymentCreate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(paymentCreate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = paymentCreate; // byte array
            }

            // authentication (APIKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-pollination-token")))
            {
                localVarHeaderParams["x-pollination-token"] = this.Configuration.GetApiKeyWithPrefix("x-pollination-token");
            }
            // authentication (JWTAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreatePaymentMethod", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PaymentSetup>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PaymentSetup) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaymentSetup)));
        }

        /// <summary>
        /// Create Subscription 
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountName"></param>
        /// <param name="subscriptionCreate"></param>
        /// <returns>CreatedContent</returns>
        public CreatedContent CreateSubscription (string accountName, SubscriptionCreate subscriptionCreate)
        {
             ApiResponse<CreatedContent> localVarResponse = CreateSubscriptionWithHttpInfo(accountName, subscriptionCreate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create Subscription 
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountName"></param>
        /// <param name="subscriptionCreate"></param>
        /// <returns>ApiResponse of CreatedContent</returns>
        public ApiResponse<CreatedContent> CreateSubscriptionWithHttpInfo (string accountName, SubscriptionCreate subscriptionCreate)
        {
            // verify the required parameter 'accountName' is set
            if (accountName == null)
                throw new ApiException(400, "Missing required parameter 'accountName' when calling PaymentsApi->CreateSubscription");
            // verify the required parameter 'subscriptionCreate' is set
            if (subscriptionCreate == null)
                throw new ApiException(400, "Missing required parameter 'subscriptionCreate' when calling PaymentsApi->CreateSubscription");

            var localVarPath = "/payments/{account_name}/subscription";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountName != null) localVarPathParams.Add("account_name", this.Configuration.ApiClient.ParameterToString(accountName)); // path parameter
            if (subscriptionCreate != null && subscriptionCreate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(subscriptionCreate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = subscriptionCreate; // byte array
            }

            // authentication (APIKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-pollination-token")))
            {
                localVarHeaderParams["x-pollination-token"] = this.Configuration.GetApiKeyWithPrefix("x-pollination-token");
            }
            // authentication (JWTAuth) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateSubscription", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreatedContent>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CreatedContent) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreatedContent)));
        }

        /// <summary>
        /// Create Subscription 
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountName"></param>
        /// <param name="subscriptionCreate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CreatedContent</returns>
        public async System.Threading.Tasks.Task<CreatedContent> CreateSubscriptionAsync (string accountName, SubscriptionCreate subscriptionCreate, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<CreatedContent> localVarResponse = await CreateSubscriptionWithHttpInfoAsync(accountName, subscriptionCreate, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create Subscription 
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountName"></param>
        /// <param name="subscriptionCreate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CreatedContent)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CreatedContent>> CreateSubscriptionWithHttpInfoAsync (string accountName, SubscriptionCreate subscriptionCreate, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountName' is set
            if (accountName == null)
                throw new ApiException(400, "Missing required parameter 'accountName' when calling PaymentsApi->CreateSubscription");
            // verify the required parameter 'subscriptionCreate' is set
            if (subscriptionCreate == null)
                throw new ApiException(400, "Missing required parameter 'subscriptionCreate' when calling PaymentsApi->CreateSubscription");

            var localVarPath = "/payments/{account_name}/subscription";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountName != null) localVarPathParams.Add("account_name", this.Configuration.ApiClient.ParameterToString(accountName)); // path parameter
            if (subscriptionCreate != null && subscriptionCreate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(subscriptionCreate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = subscriptionCreate; // byte array
            }

            // authentication (APIKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-pollination-token")))
            {
                localVarHeaderParams["x-pollination-token"] = this.Configuration.GetApiKeyWithPrefix("x-pollination-token");
            }
            // authentication (JWTAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateSubscription", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreatedContent>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CreatedContent) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreatedContent)));
        }

        /// <summary>
        /// Get Inventory 
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Inventory</returns>
        public Inventory GetInventory ()
        {
             ApiResponse<Inventory> localVarResponse = GetInventoryWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Inventory 
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Inventory</returns>
        public ApiResponse<Inventory> GetInventoryWithHttpInfo ()
        {

            var localVarPath = "/payments/inventory";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInventory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Inventory>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Inventory) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Inventory)));
        }

        /// <summary>
        /// Get Inventory 
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Inventory</returns>
        public async System.Threading.Tasks.Task<Inventory> GetInventoryAsync (CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Inventory> localVarResponse = await GetInventoryWithHttpInfoAsync(cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Inventory 
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Inventory)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Inventory>> GetInventoryWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/payments/inventory";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInventory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Inventory>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Inventory) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Inventory)));
        }

        /// <summary>
        /// Get Subscription 
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountName"></param>
        /// <returns>Subscription</returns>
        public Subscription GetSubscription (string accountName)
        {
             ApiResponse<Subscription> localVarResponse = GetSubscriptionWithHttpInfo(accountName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Subscription 
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountName"></param>
        /// <returns>ApiResponse of Subscription</returns>
        public ApiResponse<Subscription> GetSubscriptionWithHttpInfo (string accountName)
        {
            // verify the required parameter 'accountName' is set
            if (accountName == null)
                throw new ApiException(400, "Missing required parameter 'accountName' when calling PaymentsApi->GetSubscription");

            var localVarPath = "/payments/{account_name}/subscription";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountName != null) localVarPathParams.Add("account_name", this.Configuration.ApiClient.ParameterToString(accountName)); // path parameter

            // authentication (APIKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-pollination-token")))
            {
                localVarHeaderParams["x-pollination-token"] = this.Configuration.GetApiKeyWithPrefix("x-pollination-token");
            }
            // authentication (JWTAuth) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSubscription", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Subscription>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Subscription) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Subscription)));
        }

        /// <summary>
        /// Get Subscription 
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Subscription</returns>
        public async System.Threading.Tasks.Task<Subscription> GetSubscriptionAsync (string accountName, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Subscription> localVarResponse = await GetSubscriptionWithHttpInfoAsync(accountName, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Subscription 
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Subscription)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Subscription>> GetSubscriptionWithHttpInfoAsync (string accountName, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountName' is set
            if (accountName == null)
                throw new ApiException(400, "Missing required parameter 'accountName' when calling PaymentsApi->GetSubscription");

            var localVarPath = "/payments/{account_name}/subscription";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountName != null) localVarPathParams.Add("account_name", this.Configuration.ApiClient.ParameterToString(accountName)); // path parameter

            // authentication (APIKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-pollination-token")))
            {
                localVarHeaderParams["x-pollination-token"] = this.Configuration.GetApiKeyWithPrefix("x-pollination-token");
            }
            // authentication (JWTAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSubscription", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Subscription>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Subscription) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Subscription)));
        }

        /// <summary>
        /// Get Payment Methods 
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountName"></param>
        /// <returns>PaymentMethodList</returns>
        public PaymentMethodList ListPaymentMethods (string accountName)
        {
             ApiResponse<PaymentMethodList> localVarResponse = ListPaymentMethodsWithHttpInfo(accountName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Payment Methods 
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountName"></param>
        /// <returns>ApiResponse of PaymentMethodList</returns>
        public ApiResponse<PaymentMethodList> ListPaymentMethodsWithHttpInfo (string accountName)
        {
            // verify the required parameter 'accountName' is set
            if (accountName == null)
                throw new ApiException(400, "Missing required parameter 'accountName' when calling PaymentsApi->ListPaymentMethods");

            var localVarPath = "/payments/{account_name}/methods";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountName != null) localVarPathParams.Add("account_name", this.Configuration.ApiClient.ParameterToString(accountName)); // path parameter

            // authentication (APIKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-pollination-token")))
            {
                localVarHeaderParams["x-pollination-token"] = this.Configuration.GetApiKeyWithPrefix("x-pollination-token");
            }
            // authentication (JWTAuth) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListPaymentMethods", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PaymentMethodList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PaymentMethodList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaymentMethodList)));
        }

        /// <summary>
        /// Get Payment Methods 
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of PaymentMethodList</returns>
        public async System.Threading.Tasks.Task<PaymentMethodList> ListPaymentMethodsAsync (string accountName, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<PaymentMethodList> localVarResponse = await ListPaymentMethodsWithHttpInfoAsync(accountName, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Payment Methods 
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (PaymentMethodList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PaymentMethodList>> ListPaymentMethodsWithHttpInfoAsync (string accountName, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountName' is set
            if (accountName == null)
                throw new ApiException(400, "Missing required parameter 'accountName' when calling PaymentsApi->ListPaymentMethods");

            var localVarPath = "/payments/{account_name}/methods";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountName != null) localVarPathParams.Add("account_name", this.Configuration.ApiClient.ParameterToString(accountName)); // path parameter

            // authentication (APIKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-pollination-token")))
            {
                localVarHeaderParams["x-pollination-token"] = this.Configuration.GetApiKeyWithPrefix("x-pollination-token");
            }
            // authentication (JWTAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListPaymentMethods", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PaymentMethodList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PaymentMethodList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaymentMethodList)));
        }

    }
}
