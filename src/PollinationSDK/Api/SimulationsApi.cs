/* 
 * Pollination Server
 *
 * Pollination Server OpenAPI Defintion
 *
 * The version of the OpenAPI document: 0.9.2
 * Contact: info@pollination.cloud
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using PollinationSDK.Client;
using PollinationSDK.Model;

namespace PollinationSDK.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISimulationsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Schedule a simulation
        /// </summary>
        /// <remarks>
        /// Create a new simulation.
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="submitSimulation"></param>
        /// <param name="authorization"> (optional)</param>
        /// <returns>CreatedContent</returns>
        CreatedContent CreateSimulation (string owner, string name, SubmitSimulation submitSimulation, string authorization = default(string));

        /// <summary>
        /// Schedule a simulation
        /// </summary>
        /// <remarks>
        /// Create a new simulation.
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="submitSimulation"></param>
        /// <param name="authorization"> (optional)</param>
        /// <returns>ApiResponse of CreatedContent</returns>
        ApiResponse<CreatedContent> CreateSimulationWithHttpInfo (string owner, string name, SubmitSimulation submitSimulation, string authorization = default(string));
        /// <summary>
        /// Download an artifact from the simulation folder
        /// </summary>
        /// <remarks>
        /// Get a download link for an artifact in a simulation folder
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="simulationId"></param>
        /// <param name="path">The path to an file within a project folder (optional)</param>
        /// <returns>Object</returns>
        Object DownloadSimulationArtifact (string owner, string name, string simulationId, string path = default(string));

        /// <summary>
        /// Download an artifact from the simulation folder
        /// </summary>
        /// <remarks>
        /// Get a download link for an artifact in a simulation folder
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="simulationId"></param>
        /// <param name="path">The path to an file within a project folder (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> DownloadSimulationArtifactWithHttpInfo (string owner, string name, string simulationId, string path = default(string));
        /// <summary>
        /// Get a Simulation
        /// </summary>
        /// <remarks>
        /// Retrieve a simulation.
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="simulationId"></param>
        /// <returns>SimulationStatus</returns>
        SimulationStatus GetSimulation (string owner, string name, string simulationId);

        /// <summary>
        /// Get a Simulation
        /// </summary>
        /// <remarks>
        /// Retrieve a simulation.
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="simulationId"></param>
        /// <returns>ApiResponse of SimulationStatus</returns>
        ApiResponse<SimulationStatus> GetSimulationWithHttpInfo (string owner, string name, string simulationId);
        /// <summary>
        /// Get simulation inputs
        /// </summary>
        /// <remarks>
        /// get simulation inputs
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="simulationId"></param>
        /// <returns>Object</returns>
        Object GetSimulationInputs (string owner, string name, string simulationId);

        /// <summary>
        /// Get simulation inputs
        /// </summary>
        /// <remarks>
        /// get simulation inputs
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="simulationId"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetSimulationInputsWithHttpInfo (string owner, string name, string simulationId);
        /// <summary>
        /// Get simulation logs
        /// </summary>
        /// <remarks>
        /// get simulation logs
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="simulationId"></param>
        /// <returns>Object</returns>
        Object GetSimulationLogs (string owner, string name, string simulationId);

        /// <summary>
        /// Get simulation logs
        /// </summary>
        /// <remarks>
        /// get simulation logs
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="simulationId"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetSimulationLogsWithHttpInfo (string owner, string name, string simulationId);
        /// <summary>
        /// Get simulation output artifact by name
        /// </summary>
        /// <remarks>
        /// get simulation output artifact
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="simulationId"></param>
        /// <param name="artifactName"></param>
        /// <returns>Object</returns>
        Object GetSimulationOutputArtifact (string owner, string name, string simulationId, string artifactName);

        /// <summary>
        /// Get simulation output artifact by name
        /// </summary>
        /// <remarks>
        /// get simulation output artifact
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="simulationId"></param>
        /// <param name="artifactName"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetSimulationOutputArtifactWithHttpInfo (string owner, string name, string simulationId, string artifactName);
        /// <summary>
        /// Get simulation outputs
        /// </summary>
        /// <remarks>
        /// get simulation outputs
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="simulationId"></param>
        /// <returns>Object</returns>
        Object GetSimulationOutputs (string owner, string name, string simulationId);

        /// <summary>
        /// Get simulation outputs
        /// </summary>
        /// <remarks>
        /// get simulation outputs
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="simulationId"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetSimulationOutputsWithHttpInfo (string owner, string name, string simulationId);
        /// <summary>
        /// Get simulation logs
        /// </summary>
        /// <remarks>
        /// get simulation task logs
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="simulationId"></param>
        /// <param name="taskId"></param>
        /// <returns>string</returns>
        string GetSimulationTaskLogs (string owner, string name, string simulationId, string taskId);

        /// <summary>
        /// Get simulation logs
        /// </summary>
        /// <remarks>
        /// get simulation task logs
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="simulationId"></param>
        /// <param name="taskId"></param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> GetSimulationTaskLogsWithHttpInfo (string owner, string name, string simulationId, string taskId);
        /// <summary>
        /// List artifacts in a simulation folder
        /// </summary>
        /// <remarks>
        /// Retrieve a list of artifacts in a simulation folder
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="simulationId"></param>
        /// <param name="page">Page number starting from 1 (optional, default to 1)</param>
        /// <param name="perPage">Number of items per page (optional, default to 25)</param>
        /// <param name="path">The path to an file within a project folder (optional)</param>
        /// <returns>List&lt;FileMeta&gt;</returns>
        List<FileMeta> ListSimulationArtifacts (string owner, string name, string simulationId, int page = default(int), int perPage = default(int), List<string> path = default(List<string>));

        /// <summary>
        /// List artifacts in a simulation folder
        /// </summary>
        /// <remarks>
        /// Retrieve a list of artifacts in a simulation folder
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="simulationId"></param>
        /// <param name="page">Page number starting from 1 (optional, default to 1)</param>
        /// <param name="perPage">Number of items per page (optional, default to 25)</param>
        /// <param name="path">The path to an file within a project folder (optional)</param>
        /// <returns>ApiResponse of List&lt;FileMeta&gt;</returns>
        ApiResponse<List<FileMeta>> ListSimulationArtifactsWithHttpInfo (string owner, string name, string simulationId, int page = default(int), int perPage = default(int), List<string> path = default(List<string>));
        /// <summary>
        /// List simulations
        /// </summary>
        /// <remarks>
        /// Retrieve a list of simulations.
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="page">Page number starting from 1 (optional, default to 1)</param>
        /// <param name="perPage">Number of items per page (optional, default to 25)</param>
        /// <param name="id">The ID of a simulation to search for (optional)</param>
        /// <param name="status">The status of the simulation to filter by (optional)</param>
        /// <returns>SimulationList</returns>
        SimulationList ListSimulations (string owner, string name, int page = default(int), int perPage = default(int), List<string> id = default(List<string>), List<string> status = default(List<string>));

        /// <summary>
        /// List simulations
        /// </summary>
        /// <remarks>
        /// Retrieve a list of simulations.
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="page">Page number starting from 1 (optional, default to 1)</param>
        /// <param name="perPage">Number of items per page (optional, default to 25)</param>
        /// <param name="id">The ID of a simulation to search for (optional)</param>
        /// <param name="status">The status of the simulation to filter by (optional)</param>
        /// <returns>ApiResponse of SimulationList</returns>
        ApiResponse<SimulationList> ListSimulationsWithHttpInfo (string owner, string name, int page = default(int), int perPage = default(int), List<string> id = default(List<string>), List<string> status = default(List<string>));
        /// <summary>
        /// resume a simulation
        /// </summary>
        /// <remarks>
        /// resume a simulation
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="simulationId"></param>
        /// <returns>Accepted</returns>
        Accepted ResumeSimulation (string owner, string name, string simulationId);

        /// <summary>
        /// resume a simulation
        /// </summary>
        /// <remarks>
        /// resume a simulation
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="simulationId"></param>
        /// <returns>ApiResponse of Accepted</returns>
        ApiResponse<Accepted> ResumeSimulationWithHttpInfo (string owner, string name, string simulationId);
        /// <summary>
        /// Stop a simulation
        /// </summary>
        /// <remarks>
        /// Stop a simulation.
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="simulationId"></param>
        /// <returns>Accepted</returns>
        Accepted StopSimulation (string owner, string name, string simulationId);

        /// <summary>
        /// Stop a simulation
        /// </summary>
        /// <remarks>
        /// Stop a simulation.
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="simulationId"></param>
        /// <returns>ApiResponse of Accepted</returns>
        ApiResponse<Accepted> StopSimulationWithHttpInfo (string owner, string name, string simulationId);
        /// <summary>
        /// Suspend a simulation
        /// </summary>
        /// <remarks>
        /// Suspend a simulation.
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="simulationId"></param>
        /// <returns>Accepted</returns>
        Accepted SuspendSimulation (string owner, string name, string simulationId);

        /// <summary>
        /// Suspend a simulation
        /// </summary>
        /// <remarks>
        /// Suspend a simulation.
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="simulationId"></param>
        /// <returns>ApiResponse of Accepted</returns>
        ApiResponse<Accepted> SuspendSimulationWithHttpInfo (string owner, string name, string simulationId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Schedule a simulation
        /// </summary>
        /// <remarks>
        /// Create a new simulation.
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="submitSimulation"></param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CreatedContent</returns>
        System.Threading.Tasks.Task<CreatedContent> CreateSimulationAsync (string owner, string name, SubmitSimulation submitSimulation, string authorization = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Schedule a simulation
        /// </summary>
        /// <remarks>
        /// Create a new simulation.
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="submitSimulation"></param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CreatedContent)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreatedContent>> CreateSimulationWithHttpInfoAsync (string owner, string name, SubmitSimulation submitSimulation, string authorization = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Download an artifact from the simulation folder
        /// </summary>
        /// <remarks>
        /// Get a download link for an artifact in a simulation folder
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="simulationId"></param>
        /// <param name="path">The path to an file within a project folder (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> DownloadSimulationArtifactAsync (string owner, string name, string simulationId, string path = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Download an artifact from the simulation folder
        /// </summary>
        /// <remarks>
        /// Get a download link for an artifact in a simulation folder
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="simulationId"></param>
        /// <param name="path">The path to an file within a project folder (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DownloadSimulationArtifactWithHttpInfoAsync (string owner, string name, string simulationId, string path = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get a Simulation
        /// </summary>
        /// <remarks>
        /// Retrieve a simulation.
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="simulationId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SimulationStatus</returns>
        System.Threading.Tasks.Task<SimulationStatus> GetSimulationAsync (string owner, string name, string simulationId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get a Simulation
        /// </summary>
        /// <remarks>
        /// Retrieve a simulation.
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="simulationId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SimulationStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<SimulationStatus>> GetSimulationWithHttpInfoAsync (string owner, string name, string simulationId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get simulation inputs
        /// </summary>
        /// <remarks>
        /// get simulation inputs
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="simulationId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetSimulationInputsAsync (string owner, string name, string simulationId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get simulation inputs
        /// </summary>
        /// <remarks>
        /// get simulation inputs
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="simulationId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetSimulationInputsWithHttpInfoAsync (string owner, string name, string simulationId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get simulation logs
        /// </summary>
        /// <remarks>
        /// get simulation logs
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="simulationId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetSimulationLogsAsync (string owner, string name, string simulationId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get simulation logs
        /// </summary>
        /// <remarks>
        /// get simulation logs
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="simulationId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetSimulationLogsWithHttpInfoAsync (string owner, string name, string simulationId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get simulation output artifact by name
        /// </summary>
        /// <remarks>
        /// get simulation output artifact
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="simulationId"></param>
        /// <param name="artifactName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetSimulationOutputArtifactAsync (string owner, string name, string simulationId, string artifactName, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get simulation output artifact by name
        /// </summary>
        /// <remarks>
        /// get simulation output artifact
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="simulationId"></param>
        /// <param name="artifactName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetSimulationOutputArtifactWithHttpInfoAsync (string owner, string name, string simulationId, string artifactName, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get simulation outputs
        /// </summary>
        /// <remarks>
        /// get simulation outputs
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="simulationId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetSimulationOutputsAsync (string owner, string name, string simulationId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get simulation outputs
        /// </summary>
        /// <remarks>
        /// get simulation outputs
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="simulationId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetSimulationOutputsWithHttpInfoAsync (string owner, string name, string simulationId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get simulation logs
        /// </summary>
        /// <remarks>
        /// get simulation task logs
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="simulationId"></param>
        /// <param name="taskId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> GetSimulationTaskLogsAsync (string owner, string name, string simulationId, string taskId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get simulation logs
        /// </summary>
        /// <remarks>
        /// get simulation task logs
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="simulationId"></param>
        /// <param name="taskId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> GetSimulationTaskLogsWithHttpInfoAsync (string owner, string name, string simulationId, string taskId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// List artifacts in a simulation folder
        /// </summary>
        /// <remarks>
        /// Retrieve a list of artifacts in a simulation folder
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="simulationId"></param>
        /// <param name="page">Page number starting from 1 (optional, default to 1)</param>
        /// <param name="perPage">Number of items per page (optional, default to 25)</param>
        /// <param name="path">The path to an file within a project folder (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;FileMeta&gt;</returns>
        System.Threading.Tasks.Task<List<FileMeta>> ListSimulationArtifactsAsync (string owner, string name, string simulationId, int page = default(int), int perPage = default(int), List<string> path = default(List<string>), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List artifacts in a simulation folder
        /// </summary>
        /// <remarks>
        /// Retrieve a list of artifacts in a simulation folder
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="simulationId"></param>
        /// <param name="page">Page number starting from 1 (optional, default to 1)</param>
        /// <param name="perPage">Number of items per page (optional, default to 25)</param>
        /// <param name="path">The path to an file within a project folder (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;FileMeta&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<FileMeta>>> ListSimulationArtifactsWithHttpInfoAsync (string owner, string name, string simulationId, int page = default(int), int perPage = default(int), List<string> path = default(List<string>), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// List simulations
        /// </summary>
        /// <remarks>
        /// Retrieve a list of simulations.
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="page">Page number starting from 1 (optional, default to 1)</param>
        /// <param name="perPage">Number of items per page (optional, default to 25)</param>
        /// <param name="id">The ID of a simulation to search for (optional)</param>
        /// <param name="status">The status of the simulation to filter by (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SimulationList</returns>
        System.Threading.Tasks.Task<SimulationList> ListSimulationsAsync (string owner, string name, int page = default(int), int perPage = default(int), List<string> id = default(List<string>), List<string> status = default(List<string>), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List simulations
        /// </summary>
        /// <remarks>
        /// Retrieve a list of simulations.
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="page">Page number starting from 1 (optional, default to 1)</param>
        /// <param name="perPage">Number of items per page (optional, default to 25)</param>
        /// <param name="id">The ID of a simulation to search for (optional)</param>
        /// <param name="status">The status of the simulation to filter by (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SimulationList)</returns>
        System.Threading.Tasks.Task<ApiResponse<SimulationList>> ListSimulationsWithHttpInfoAsync (string owner, string name, int page = default(int), int perPage = default(int), List<string> id = default(List<string>), List<string> status = default(List<string>), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// resume a simulation
        /// </summary>
        /// <remarks>
        /// resume a simulation
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="simulationId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Accepted</returns>
        System.Threading.Tasks.Task<Accepted> ResumeSimulationAsync (string owner, string name, string simulationId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// resume a simulation
        /// </summary>
        /// <remarks>
        /// resume a simulation
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="simulationId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Accepted)</returns>
        System.Threading.Tasks.Task<ApiResponse<Accepted>> ResumeSimulationWithHttpInfoAsync (string owner, string name, string simulationId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Stop a simulation
        /// </summary>
        /// <remarks>
        /// Stop a simulation.
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="simulationId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Accepted</returns>
        System.Threading.Tasks.Task<Accepted> StopSimulationAsync (string owner, string name, string simulationId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Stop a simulation
        /// </summary>
        /// <remarks>
        /// Stop a simulation.
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="simulationId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Accepted)</returns>
        System.Threading.Tasks.Task<ApiResponse<Accepted>> StopSimulationWithHttpInfoAsync (string owner, string name, string simulationId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Suspend a simulation
        /// </summary>
        /// <remarks>
        /// Suspend a simulation.
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="simulationId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Accepted</returns>
        System.Threading.Tasks.Task<Accepted> SuspendSimulationAsync (string owner, string name, string simulationId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Suspend a simulation
        /// </summary>
        /// <remarks>
        /// Suspend a simulation.
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="simulationId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Accepted)</returns>
        System.Threading.Tasks.Task<ApiResponse<Accepted>> SuspendSimulationWithHttpInfoAsync (string owner, string name, string simulationId, CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SimulationsApi : ISimulationsApi
    {
        private PollinationSDK.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SimulationsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SimulationsApi(String basePath)
        {
            this.Configuration = new PollinationSDK.Client.Configuration { BasePath = basePath };

            ExceptionFactory = PollinationSDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SimulationsApi"/> class
        /// </summary>
        /// <returns></returns>
        public SimulationsApi()
        {
            this.Configuration = PollinationSDK.Client.Configuration.Default;

            ExceptionFactory = PollinationSDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SimulationsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SimulationsApi(PollinationSDK.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = PollinationSDK.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = PollinationSDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public PollinationSDK.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public PollinationSDK.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Schedule a simulation Create a new simulation.
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="submitSimulation"></param>
        /// <param name="authorization"> (optional)</param>
        /// <returns>CreatedContent</returns>
        public CreatedContent CreateSimulation (string owner, string name, SubmitSimulation submitSimulation, string authorization = default(string))
        {
             ApiResponse<CreatedContent> localVarResponse = CreateSimulationWithHttpInfo(owner, name, submitSimulation, authorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Schedule a simulation Create a new simulation.
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="submitSimulation"></param>
        /// <param name="authorization"> (optional)</param>
        /// <returns>ApiResponse of CreatedContent</returns>
        public ApiResponse<CreatedContent> CreateSimulationWithHttpInfo (string owner, string name, SubmitSimulation submitSimulation, string authorization = default(string))
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling SimulationsApi->CreateSimulation");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling SimulationsApi->CreateSimulation");
            // verify the required parameter 'submitSimulation' is set
            if (submitSimulation == null)
                throw new ApiException(400, "Missing required parameter 'submitSimulation' when calling SimulationsApi->CreateSimulation");

            var localVarPath = "/projects/{owner}/{name}/simulations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (submitSimulation != null && submitSimulation.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(submitSimulation); // http body (model) parameter
            }
            else
            {
                localVarPostBody = submitSimulation; // byte array
            }

            // authentication (CompulsoryAuth) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateSimulation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreatedContent>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CreatedContent) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreatedContent)));
        }

        /// <summary>
        /// Schedule a simulation Create a new simulation.
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="submitSimulation"></param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CreatedContent</returns>
        public async System.Threading.Tasks.Task<CreatedContent> CreateSimulationAsync (string owner, string name, SubmitSimulation submitSimulation, string authorization = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<CreatedContent> localVarResponse = await CreateSimulationWithHttpInfoAsync(owner, name, submitSimulation, authorization, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Schedule a simulation Create a new simulation.
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="submitSimulation"></param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CreatedContent)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CreatedContent>> CreateSimulationWithHttpInfoAsync (string owner, string name, SubmitSimulation submitSimulation, string authorization = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling SimulationsApi->CreateSimulation");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling SimulationsApi->CreateSimulation");
            // verify the required parameter 'submitSimulation' is set
            if (submitSimulation == null)
                throw new ApiException(400, "Missing required parameter 'submitSimulation' when calling SimulationsApi->CreateSimulation");

            var localVarPath = "/projects/{owner}/{name}/simulations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (submitSimulation != null && submitSimulation.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(submitSimulation); // http body (model) parameter
            }
            else
            {
                localVarPostBody = submitSimulation; // byte array
            }

            // authentication (CompulsoryAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateSimulation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreatedContent>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CreatedContent) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreatedContent)));
        }

        /// <summary>
        /// Download an artifact from the simulation folder Get a download link for an artifact in a simulation folder
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="simulationId"></param>
        /// <param name="path">The path to an file within a project folder (optional)</param>
        /// <returns>Object</returns>
        public Object DownloadSimulationArtifact (string owner, string name, string simulationId, string path = default(string))
        {
             ApiResponse<Object> localVarResponse = DownloadSimulationArtifactWithHttpInfo(owner, name, simulationId, path);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Download an artifact from the simulation folder Get a download link for an artifact in a simulation folder
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="simulationId"></param>
        /// <param name="path">The path to an file within a project folder (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> DownloadSimulationArtifactWithHttpInfo (string owner, string name, string simulationId, string path = default(string))
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling SimulationsApi->DownloadSimulationArtifact");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling SimulationsApi->DownloadSimulationArtifact");
            // verify the required parameter 'simulationId' is set
            if (simulationId == null)
                throw new ApiException(400, "Missing required parameter 'simulationId' when calling SimulationsApi->DownloadSimulationArtifact");

            var localVarPath = "/projects/{owner}/{name}/simulations/{simulation_id}/artifacts/download";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (simulationId != null) localVarPathParams.Add("simulation_id", this.Configuration.ApiClient.ParameterToString(simulationId)); // path parameter
            if (path != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "path", path)); // query parameter

            // authentication (OptionalAuth) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DownloadSimulationArtifact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Download an artifact from the simulation folder Get a download link for an artifact in a simulation folder
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="simulationId"></param>
        /// <param name="path">The path to an file within a project folder (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DownloadSimulationArtifactAsync (string owner, string name, string simulationId, string path = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Object> localVarResponse = await DownloadSimulationArtifactWithHttpInfoAsync(owner, name, simulationId, path, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Download an artifact from the simulation folder Get a download link for an artifact in a simulation folder
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="simulationId"></param>
        /// <param name="path">The path to an file within a project folder (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DownloadSimulationArtifactWithHttpInfoAsync (string owner, string name, string simulationId, string path = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling SimulationsApi->DownloadSimulationArtifact");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling SimulationsApi->DownloadSimulationArtifact");
            // verify the required parameter 'simulationId' is set
            if (simulationId == null)
                throw new ApiException(400, "Missing required parameter 'simulationId' when calling SimulationsApi->DownloadSimulationArtifact");

            var localVarPath = "/projects/{owner}/{name}/simulations/{simulation_id}/artifacts/download";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (simulationId != null) localVarPathParams.Add("simulation_id", this.Configuration.ApiClient.ParameterToString(simulationId)); // path parameter
            if (path != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "path", path)); // query parameter

            // authentication (OptionalAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DownloadSimulationArtifact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Get a Simulation Retrieve a simulation.
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="simulationId"></param>
        /// <returns>SimulationStatus</returns>
        public SimulationStatus GetSimulation (string owner, string name, string simulationId)
        {
             ApiResponse<SimulationStatus> localVarResponse = GetSimulationWithHttpInfo(owner, name, simulationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a Simulation Retrieve a simulation.
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="simulationId"></param>
        /// <returns>ApiResponse of SimulationStatus</returns>
        public ApiResponse<SimulationStatus> GetSimulationWithHttpInfo (string owner, string name, string simulationId)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling SimulationsApi->GetSimulation");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling SimulationsApi->GetSimulation");
            // verify the required parameter 'simulationId' is set
            if (simulationId == null)
                throw new ApiException(400, "Missing required parameter 'simulationId' when calling SimulationsApi->GetSimulation");

            var localVarPath = "/projects/{owner}/{name}/simulations/{simulation_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (simulationId != null) localVarPathParams.Add("simulation_id", this.Configuration.ApiClient.ParameterToString(simulationId)); // path parameter

            // authentication (OptionalAuth) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSimulation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SimulationStatus>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SimulationStatus) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SimulationStatus)));
        }

        /// <summary>
        /// Get a Simulation Retrieve a simulation.
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="simulationId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SimulationStatus</returns>
        public async System.Threading.Tasks.Task<SimulationStatus> GetSimulationAsync (string owner, string name, string simulationId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<SimulationStatus> localVarResponse = await GetSimulationWithHttpInfoAsync(owner, name, simulationId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a Simulation Retrieve a simulation.
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="simulationId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SimulationStatus)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SimulationStatus>> GetSimulationWithHttpInfoAsync (string owner, string name, string simulationId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling SimulationsApi->GetSimulation");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling SimulationsApi->GetSimulation");
            // verify the required parameter 'simulationId' is set
            if (simulationId == null)
                throw new ApiException(400, "Missing required parameter 'simulationId' when calling SimulationsApi->GetSimulation");

            var localVarPath = "/projects/{owner}/{name}/simulations/{simulation_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (simulationId != null) localVarPathParams.Add("simulation_id", this.Configuration.ApiClient.ParameterToString(simulationId)); // path parameter

            // authentication (OptionalAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSimulation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SimulationStatus>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SimulationStatus) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SimulationStatus)));
        }

        /// <summary>
        /// Get simulation inputs get simulation inputs
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="simulationId"></param>
        /// <returns>Object</returns>
        public Object GetSimulationInputs (string owner, string name, string simulationId)
        {
             ApiResponse<Object> localVarResponse = GetSimulationInputsWithHttpInfo(owner, name, simulationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get simulation inputs get simulation inputs
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="simulationId"></param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> GetSimulationInputsWithHttpInfo (string owner, string name, string simulationId)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling SimulationsApi->GetSimulationInputs");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling SimulationsApi->GetSimulationInputs");
            // verify the required parameter 'simulationId' is set
            if (simulationId == null)
                throw new ApiException(400, "Missing required parameter 'simulationId' when calling SimulationsApi->GetSimulationInputs");

            var localVarPath = "/projects/{owner}/{name}/simulations/{simulation_id}/inputs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (simulationId != null) localVarPathParams.Add("simulation_id", this.Configuration.ApiClient.ParameterToString(simulationId)); // path parameter

            // authentication (OptionalAuth) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSimulationInputs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Get simulation inputs get simulation inputs
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="simulationId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetSimulationInputsAsync (string owner, string name, string simulationId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Object> localVarResponse = await GetSimulationInputsWithHttpInfoAsync(owner, name, simulationId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get simulation inputs get simulation inputs
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="simulationId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetSimulationInputsWithHttpInfoAsync (string owner, string name, string simulationId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling SimulationsApi->GetSimulationInputs");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling SimulationsApi->GetSimulationInputs");
            // verify the required parameter 'simulationId' is set
            if (simulationId == null)
                throw new ApiException(400, "Missing required parameter 'simulationId' when calling SimulationsApi->GetSimulationInputs");

            var localVarPath = "/projects/{owner}/{name}/simulations/{simulation_id}/inputs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (simulationId != null) localVarPathParams.Add("simulation_id", this.Configuration.ApiClient.ParameterToString(simulationId)); // path parameter

            // authentication (OptionalAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSimulationInputs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Get simulation logs get simulation logs
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="simulationId"></param>
        /// <returns>Object</returns>
        public Object GetSimulationLogs (string owner, string name, string simulationId)
        {
             ApiResponse<Object> localVarResponse = GetSimulationLogsWithHttpInfo(owner, name, simulationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get simulation logs get simulation logs
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="simulationId"></param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> GetSimulationLogsWithHttpInfo (string owner, string name, string simulationId)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling SimulationsApi->GetSimulationLogs");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling SimulationsApi->GetSimulationLogs");
            // verify the required parameter 'simulationId' is set
            if (simulationId == null)
                throw new ApiException(400, "Missing required parameter 'simulationId' when calling SimulationsApi->GetSimulationLogs");

            var localVarPath = "/projects/{owner}/{name}/simulations/{simulation_id}/logs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (simulationId != null) localVarPathParams.Add("simulation_id", this.Configuration.ApiClient.ParameterToString(simulationId)); // path parameter

            // authentication (OptionalAuth) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSimulationLogs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Get simulation logs get simulation logs
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="simulationId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetSimulationLogsAsync (string owner, string name, string simulationId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Object> localVarResponse = await GetSimulationLogsWithHttpInfoAsync(owner, name, simulationId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get simulation logs get simulation logs
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="simulationId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetSimulationLogsWithHttpInfoAsync (string owner, string name, string simulationId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling SimulationsApi->GetSimulationLogs");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling SimulationsApi->GetSimulationLogs");
            // verify the required parameter 'simulationId' is set
            if (simulationId == null)
                throw new ApiException(400, "Missing required parameter 'simulationId' when calling SimulationsApi->GetSimulationLogs");

            var localVarPath = "/projects/{owner}/{name}/simulations/{simulation_id}/logs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (simulationId != null) localVarPathParams.Add("simulation_id", this.Configuration.ApiClient.ParameterToString(simulationId)); // path parameter

            // authentication (OptionalAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSimulationLogs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Get simulation output artifact by name get simulation output artifact
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="simulationId"></param>
        /// <param name="artifactName"></param>
        /// <returns>Object</returns>
        public Object GetSimulationOutputArtifact (string owner, string name, string simulationId, string artifactName)
        {
             ApiResponse<Object> localVarResponse = GetSimulationOutputArtifactWithHttpInfo(owner, name, simulationId, artifactName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get simulation output artifact by name get simulation output artifact
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="simulationId"></param>
        /// <param name="artifactName"></param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> GetSimulationOutputArtifactWithHttpInfo (string owner, string name, string simulationId, string artifactName)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling SimulationsApi->GetSimulationOutputArtifact");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling SimulationsApi->GetSimulationOutputArtifact");
            // verify the required parameter 'simulationId' is set
            if (simulationId == null)
                throw new ApiException(400, "Missing required parameter 'simulationId' when calling SimulationsApi->GetSimulationOutputArtifact");
            // verify the required parameter 'artifactName' is set
            if (artifactName == null)
                throw new ApiException(400, "Missing required parameter 'artifactName' when calling SimulationsApi->GetSimulationOutputArtifact");

            var localVarPath = "/projects/{owner}/{name}/simulations/{simulation_id}/outputs/artifacts/{artifact_name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (simulationId != null) localVarPathParams.Add("simulation_id", this.Configuration.ApiClient.ParameterToString(simulationId)); // path parameter
            if (artifactName != null) localVarPathParams.Add("artifact_name", this.Configuration.ApiClient.ParameterToString(artifactName)); // path parameter

            // authentication (OptionalAuth) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSimulationOutputArtifact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Get simulation output artifact by name get simulation output artifact
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="simulationId"></param>
        /// <param name="artifactName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetSimulationOutputArtifactAsync (string owner, string name, string simulationId, string artifactName, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Object> localVarResponse = await GetSimulationOutputArtifactWithHttpInfoAsync(owner, name, simulationId, artifactName, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get simulation output artifact by name get simulation output artifact
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="simulationId"></param>
        /// <param name="artifactName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetSimulationOutputArtifactWithHttpInfoAsync (string owner, string name, string simulationId, string artifactName, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling SimulationsApi->GetSimulationOutputArtifact");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling SimulationsApi->GetSimulationOutputArtifact");
            // verify the required parameter 'simulationId' is set
            if (simulationId == null)
                throw new ApiException(400, "Missing required parameter 'simulationId' when calling SimulationsApi->GetSimulationOutputArtifact");
            // verify the required parameter 'artifactName' is set
            if (artifactName == null)
                throw new ApiException(400, "Missing required parameter 'artifactName' when calling SimulationsApi->GetSimulationOutputArtifact");

            var localVarPath = "/projects/{owner}/{name}/simulations/{simulation_id}/outputs/artifacts/{artifact_name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (simulationId != null) localVarPathParams.Add("simulation_id", this.Configuration.ApiClient.ParameterToString(simulationId)); // path parameter
            if (artifactName != null) localVarPathParams.Add("artifact_name", this.Configuration.ApiClient.ParameterToString(artifactName)); // path parameter

            // authentication (OptionalAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSimulationOutputArtifact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Get simulation outputs get simulation outputs
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="simulationId"></param>
        /// <returns>Object</returns>
        public Object GetSimulationOutputs (string owner, string name, string simulationId)
        {
             ApiResponse<Object> localVarResponse = GetSimulationOutputsWithHttpInfo(owner, name, simulationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get simulation outputs get simulation outputs
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="simulationId"></param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> GetSimulationOutputsWithHttpInfo (string owner, string name, string simulationId)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling SimulationsApi->GetSimulationOutputs");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling SimulationsApi->GetSimulationOutputs");
            // verify the required parameter 'simulationId' is set
            if (simulationId == null)
                throw new ApiException(400, "Missing required parameter 'simulationId' when calling SimulationsApi->GetSimulationOutputs");

            var localVarPath = "/projects/{owner}/{name}/simulations/{simulation_id}/outputs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (simulationId != null) localVarPathParams.Add("simulation_id", this.Configuration.ApiClient.ParameterToString(simulationId)); // path parameter

            // authentication (OptionalAuth) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSimulationOutputs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Get simulation outputs get simulation outputs
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="simulationId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetSimulationOutputsAsync (string owner, string name, string simulationId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Object> localVarResponse = await GetSimulationOutputsWithHttpInfoAsync(owner, name, simulationId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get simulation outputs get simulation outputs
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="simulationId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetSimulationOutputsWithHttpInfoAsync (string owner, string name, string simulationId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling SimulationsApi->GetSimulationOutputs");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling SimulationsApi->GetSimulationOutputs");
            // verify the required parameter 'simulationId' is set
            if (simulationId == null)
                throw new ApiException(400, "Missing required parameter 'simulationId' when calling SimulationsApi->GetSimulationOutputs");

            var localVarPath = "/projects/{owner}/{name}/simulations/{simulation_id}/outputs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (simulationId != null) localVarPathParams.Add("simulation_id", this.Configuration.ApiClient.ParameterToString(simulationId)); // path parameter

            // authentication (OptionalAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSimulationOutputs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Get simulation logs get simulation task logs
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="simulationId"></param>
        /// <param name="taskId"></param>
        /// <returns>string</returns>
        public string GetSimulationTaskLogs (string owner, string name, string simulationId, string taskId)
        {
             ApiResponse<string> localVarResponse = GetSimulationTaskLogsWithHttpInfo(owner, name, simulationId, taskId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get simulation logs get simulation task logs
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="simulationId"></param>
        /// <param name="taskId"></param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse<string> GetSimulationTaskLogsWithHttpInfo (string owner, string name, string simulationId, string taskId)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling SimulationsApi->GetSimulationTaskLogs");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling SimulationsApi->GetSimulationTaskLogs");
            // verify the required parameter 'simulationId' is set
            if (simulationId == null)
                throw new ApiException(400, "Missing required parameter 'simulationId' when calling SimulationsApi->GetSimulationTaskLogs");
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling SimulationsApi->GetSimulationTaskLogs");

            var localVarPath = "/projects/{owner}/{name}/simulations/{simulation_id}/task/{task_id}/logs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (simulationId != null) localVarPathParams.Add("simulation_id", this.Configuration.ApiClient.ParameterToString(simulationId)); // path parameter
            if (taskId != null) localVarPathParams.Add("task_id", this.Configuration.ApiClient.ParameterToString(taskId)); // path parameter

            // authentication (OptionalAuth) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSimulationTaskLogs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get simulation logs get simulation task logs
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="simulationId"></param>
        /// <param name="taskId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> GetSimulationTaskLogsAsync (string owner, string name, string simulationId, string taskId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<string> localVarResponse = await GetSimulationTaskLogsWithHttpInfoAsync(owner, name, simulationId, taskId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get simulation logs get simulation task logs
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="simulationId"></param>
        /// <param name="taskId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> GetSimulationTaskLogsWithHttpInfoAsync (string owner, string name, string simulationId, string taskId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling SimulationsApi->GetSimulationTaskLogs");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling SimulationsApi->GetSimulationTaskLogs");
            // verify the required parameter 'simulationId' is set
            if (simulationId == null)
                throw new ApiException(400, "Missing required parameter 'simulationId' when calling SimulationsApi->GetSimulationTaskLogs");
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling SimulationsApi->GetSimulationTaskLogs");

            var localVarPath = "/projects/{owner}/{name}/simulations/{simulation_id}/task/{task_id}/logs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (simulationId != null) localVarPathParams.Add("simulation_id", this.Configuration.ApiClient.ParameterToString(simulationId)); // path parameter
            if (taskId != null) localVarPathParams.Add("task_id", this.Configuration.ApiClient.ParameterToString(taskId)); // path parameter

            // authentication (OptionalAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSimulationTaskLogs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// List artifacts in a simulation folder Retrieve a list of artifacts in a simulation folder
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="simulationId"></param>
        /// <param name="page">Page number starting from 1 (optional, default to 1)</param>
        /// <param name="perPage">Number of items per page (optional, default to 25)</param>
        /// <param name="path">The path to an file within a project folder (optional)</param>
        /// <returns>List&lt;FileMeta&gt;</returns>
        public List<FileMeta> ListSimulationArtifacts (string owner, string name, string simulationId, int page = default(int), int perPage = default(int), List<string> path = default(List<string>))
        {
             ApiResponse<List<FileMeta>> localVarResponse = ListSimulationArtifactsWithHttpInfo(owner, name, simulationId, page, perPage, path);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List artifacts in a simulation folder Retrieve a list of artifacts in a simulation folder
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="simulationId"></param>
        /// <param name="page">Page number starting from 1 (optional, default to 1)</param>
        /// <param name="perPage">Number of items per page (optional, default to 25)</param>
        /// <param name="path">The path to an file within a project folder (optional)</param>
        /// <returns>ApiResponse of List&lt;FileMeta&gt;</returns>
        public ApiResponse<List<FileMeta>> ListSimulationArtifactsWithHttpInfo (string owner, string name, string simulationId, int page = default(int), int perPage = default(int), List<string> path = default(List<string>))
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling SimulationsApi->ListSimulationArtifacts");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling SimulationsApi->ListSimulationArtifacts");
            // verify the required parameter 'simulationId' is set
            if (simulationId == null)
                throw new ApiException(400, "Missing required parameter 'simulationId' when calling SimulationsApi->ListSimulationArtifacts");

            var localVarPath = "/projects/{owner}/{name}/simulations/{simulation_id}/artifacts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (simulationId != null) localVarPathParams.Add("simulation_id", this.Configuration.ApiClient.ParameterToString(simulationId)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per-page", perPage)); // query parameter
            if (path != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "path", path)); // query parameter

            // authentication (OptionalAuth) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListSimulationArtifacts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<FileMeta>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<FileMeta>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<FileMeta>)));
        }

        /// <summary>
        /// List artifacts in a simulation folder Retrieve a list of artifacts in a simulation folder
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="simulationId"></param>
        /// <param name="page">Page number starting from 1 (optional, default to 1)</param>
        /// <param name="perPage">Number of items per page (optional, default to 25)</param>
        /// <param name="path">The path to an file within a project folder (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;FileMeta&gt;</returns>
        public async System.Threading.Tasks.Task<List<FileMeta>> ListSimulationArtifactsAsync (string owner, string name, string simulationId, int page = default(int), int perPage = default(int), List<string> path = default(List<string>), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<FileMeta>> localVarResponse = await ListSimulationArtifactsWithHttpInfoAsync(owner, name, simulationId, page, perPage, path, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List artifacts in a simulation folder Retrieve a list of artifacts in a simulation folder
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="simulationId"></param>
        /// <param name="page">Page number starting from 1 (optional, default to 1)</param>
        /// <param name="perPage">Number of items per page (optional, default to 25)</param>
        /// <param name="path">The path to an file within a project folder (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;FileMeta&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<FileMeta>>> ListSimulationArtifactsWithHttpInfoAsync (string owner, string name, string simulationId, int page = default(int), int perPage = default(int), List<string> path = default(List<string>), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling SimulationsApi->ListSimulationArtifacts");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling SimulationsApi->ListSimulationArtifacts");
            // verify the required parameter 'simulationId' is set
            if (simulationId == null)
                throw new ApiException(400, "Missing required parameter 'simulationId' when calling SimulationsApi->ListSimulationArtifacts");

            var localVarPath = "/projects/{owner}/{name}/simulations/{simulation_id}/artifacts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (simulationId != null) localVarPathParams.Add("simulation_id", this.Configuration.ApiClient.ParameterToString(simulationId)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per-page", perPage)); // query parameter
            if (path != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "path", path)); // query parameter

            // authentication (OptionalAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListSimulationArtifacts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<FileMeta>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<FileMeta>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<FileMeta>)));
        }

        /// <summary>
        /// List simulations Retrieve a list of simulations.
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="page">Page number starting from 1 (optional, default to 1)</param>
        /// <param name="perPage">Number of items per page (optional, default to 25)</param>
        /// <param name="id">The ID of a simulation to search for (optional)</param>
        /// <param name="status">The status of the simulation to filter by (optional)</param>
        /// <returns>SimulationList</returns>
        public SimulationList ListSimulations (string owner, string name, int page = default(int), int perPage = default(int), List<string> id = default(List<string>), List<string> status = default(List<string>))
        {
             ApiResponse<SimulationList> localVarResponse = ListSimulationsWithHttpInfo(owner, name, page, perPage, id, status);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List simulations Retrieve a list of simulations.
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="page">Page number starting from 1 (optional, default to 1)</param>
        /// <param name="perPage">Number of items per page (optional, default to 25)</param>
        /// <param name="id">The ID of a simulation to search for (optional)</param>
        /// <param name="status">The status of the simulation to filter by (optional)</param>
        /// <returns>ApiResponse of SimulationList</returns>
        public ApiResponse<SimulationList> ListSimulationsWithHttpInfo (string owner, string name, int page = default(int), int perPage = default(int), List<string> id = default(List<string>), List<string> status = default(List<string>))
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling SimulationsApi->ListSimulations");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling SimulationsApi->ListSimulations");

            var localVarPath = "/projects/{owner}/{name}/simulations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per-page", perPage)); // query parameter
            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "id", id)); // query parameter
            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "status", status)); // query parameter

            // authentication (OptionalAuth) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListSimulations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SimulationList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SimulationList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SimulationList)));
        }

        /// <summary>
        /// List simulations Retrieve a list of simulations.
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="page">Page number starting from 1 (optional, default to 1)</param>
        /// <param name="perPage">Number of items per page (optional, default to 25)</param>
        /// <param name="id">The ID of a simulation to search for (optional)</param>
        /// <param name="status">The status of the simulation to filter by (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SimulationList</returns>
        public async System.Threading.Tasks.Task<SimulationList> ListSimulationsAsync (string owner, string name, int page = default(int), int perPage = default(int), List<string> id = default(List<string>), List<string> status = default(List<string>), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<SimulationList> localVarResponse = await ListSimulationsWithHttpInfoAsync(owner, name, page, perPage, id, status, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List simulations Retrieve a list of simulations.
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="page">Page number starting from 1 (optional, default to 1)</param>
        /// <param name="perPage">Number of items per page (optional, default to 25)</param>
        /// <param name="id">The ID of a simulation to search for (optional)</param>
        /// <param name="status">The status of the simulation to filter by (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SimulationList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SimulationList>> ListSimulationsWithHttpInfoAsync (string owner, string name, int page = default(int), int perPage = default(int), List<string> id = default(List<string>), List<string> status = default(List<string>), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling SimulationsApi->ListSimulations");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling SimulationsApi->ListSimulations");

            var localVarPath = "/projects/{owner}/{name}/simulations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per-page", perPage)); // query parameter
            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "id", id)); // query parameter
            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "status", status)); // query parameter

            // authentication (OptionalAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListSimulations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SimulationList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SimulationList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SimulationList)));
        }

        /// <summary>
        /// resume a simulation resume a simulation
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="simulationId"></param>
        /// <returns>Accepted</returns>
        public Accepted ResumeSimulation (string owner, string name, string simulationId)
        {
             ApiResponse<Accepted> localVarResponse = ResumeSimulationWithHttpInfo(owner, name, simulationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// resume a simulation resume a simulation
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="simulationId"></param>
        /// <returns>ApiResponse of Accepted</returns>
        public ApiResponse<Accepted> ResumeSimulationWithHttpInfo (string owner, string name, string simulationId)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling SimulationsApi->ResumeSimulation");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling SimulationsApi->ResumeSimulation");
            // verify the required parameter 'simulationId' is set
            if (simulationId == null)
                throw new ApiException(400, "Missing required parameter 'simulationId' when calling SimulationsApi->ResumeSimulation");

            var localVarPath = "/projects/{owner}/{name}/simulations/{simulation_id}/resume";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (simulationId != null) localVarPathParams.Add("simulation_id", this.Configuration.ApiClient.ParameterToString(simulationId)); // path parameter

            // authentication (CompulsoryAuth) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResumeSimulation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Accepted>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Accepted) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Accepted)));
        }

        /// <summary>
        /// resume a simulation resume a simulation
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="simulationId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Accepted</returns>
        public async System.Threading.Tasks.Task<Accepted> ResumeSimulationAsync (string owner, string name, string simulationId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Accepted> localVarResponse = await ResumeSimulationWithHttpInfoAsync(owner, name, simulationId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// resume a simulation resume a simulation
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="simulationId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Accepted)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Accepted>> ResumeSimulationWithHttpInfoAsync (string owner, string name, string simulationId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling SimulationsApi->ResumeSimulation");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling SimulationsApi->ResumeSimulation");
            // verify the required parameter 'simulationId' is set
            if (simulationId == null)
                throw new ApiException(400, "Missing required parameter 'simulationId' when calling SimulationsApi->ResumeSimulation");

            var localVarPath = "/projects/{owner}/{name}/simulations/{simulation_id}/resume";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (simulationId != null) localVarPathParams.Add("simulation_id", this.Configuration.ApiClient.ParameterToString(simulationId)); // path parameter

            // authentication (CompulsoryAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResumeSimulation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Accepted>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Accepted) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Accepted)));
        }

        /// <summary>
        /// Stop a simulation Stop a simulation.
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="simulationId"></param>
        /// <returns>Accepted</returns>
        public Accepted StopSimulation (string owner, string name, string simulationId)
        {
             ApiResponse<Accepted> localVarResponse = StopSimulationWithHttpInfo(owner, name, simulationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Stop a simulation Stop a simulation.
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="simulationId"></param>
        /// <returns>ApiResponse of Accepted</returns>
        public ApiResponse<Accepted> StopSimulationWithHttpInfo (string owner, string name, string simulationId)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling SimulationsApi->StopSimulation");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling SimulationsApi->StopSimulation");
            // verify the required parameter 'simulationId' is set
            if (simulationId == null)
                throw new ApiException(400, "Missing required parameter 'simulationId' when calling SimulationsApi->StopSimulation");

            var localVarPath = "/projects/{owner}/{name}/simulations/{simulation_id}/stop";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (simulationId != null) localVarPathParams.Add("simulation_id", this.Configuration.ApiClient.ParameterToString(simulationId)); // path parameter

            // authentication (CompulsoryAuth) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StopSimulation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Accepted>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Accepted) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Accepted)));
        }

        /// <summary>
        /// Stop a simulation Stop a simulation.
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="simulationId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Accepted</returns>
        public async System.Threading.Tasks.Task<Accepted> StopSimulationAsync (string owner, string name, string simulationId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Accepted> localVarResponse = await StopSimulationWithHttpInfoAsync(owner, name, simulationId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Stop a simulation Stop a simulation.
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="simulationId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Accepted)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Accepted>> StopSimulationWithHttpInfoAsync (string owner, string name, string simulationId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling SimulationsApi->StopSimulation");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling SimulationsApi->StopSimulation");
            // verify the required parameter 'simulationId' is set
            if (simulationId == null)
                throw new ApiException(400, "Missing required parameter 'simulationId' when calling SimulationsApi->StopSimulation");

            var localVarPath = "/projects/{owner}/{name}/simulations/{simulation_id}/stop";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (simulationId != null) localVarPathParams.Add("simulation_id", this.Configuration.ApiClient.ParameterToString(simulationId)); // path parameter

            // authentication (CompulsoryAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StopSimulation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Accepted>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Accepted) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Accepted)));
        }

        /// <summary>
        /// Suspend a simulation Suspend a simulation.
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="simulationId"></param>
        /// <returns>Accepted</returns>
        public Accepted SuspendSimulation (string owner, string name, string simulationId)
        {
             ApiResponse<Accepted> localVarResponse = SuspendSimulationWithHttpInfo(owner, name, simulationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Suspend a simulation Suspend a simulation.
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="simulationId"></param>
        /// <returns>ApiResponse of Accepted</returns>
        public ApiResponse<Accepted> SuspendSimulationWithHttpInfo (string owner, string name, string simulationId)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling SimulationsApi->SuspendSimulation");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling SimulationsApi->SuspendSimulation");
            // verify the required parameter 'simulationId' is set
            if (simulationId == null)
                throw new ApiException(400, "Missing required parameter 'simulationId' when calling SimulationsApi->SuspendSimulation");

            var localVarPath = "/projects/{owner}/{name}/simulations/{simulation_id}/suspend";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (simulationId != null) localVarPathParams.Add("simulation_id", this.Configuration.ApiClient.ParameterToString(simulationId)); // path parameter

            // authentication (CompulsoryAuth) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SuspendSimulation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Accepted>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Accepted) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Accepted)));
        }

        /// <summary>
        /// Suspend a simulation Suspend a simulation.
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="simulationId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Accepted</returns>
        public async System.Threading.Tasks.Task<Accepted> SuspendSimulationAsync (string owner, string name, string simulationId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Accepted> localVarResponse = await SuspendSimulationWithHttpInfoAsync(owner, name, simulationId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Suspend a simulation Suspend a simulation.
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="simulationId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Accepted)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Accepted>> SuspendSimulationWithHttpInfoAsync (string owner, string name, string simulationId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling SimulationsApi->SuspendSimulation");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling SimulationsApi->SuspendSimulation");
            // verify the required parameter 'simulationId' is set
            if (simulationId == null)
                throw new ApiException(400, "Missing required parameter 'simulationId' when calling SimulationsApi->SuspendSimulation");

            var localVarPath = "/projects/{owner}/{name}/simulations/{simulation_id}/suspend";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (simulationId != null) localVarPathParams.Add("simulation_id", this.Configuration.ApiClient.ParameterToString(simulationId)); // path parameter

            // authentication (CompulsoryAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SuspendSimulation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Accepted>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Accepted) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Accepted)));
        }

    }
}
