/* 
 * Pollination Server
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.5.31
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using PollinationSDK.Client;
using PollinationSDK.Model;

namespace PollinationSDK.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProjectsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a Project
        /// </summary>
        /// <remarks>
        /// Create a new project.
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="patchProjectDto"></param>
        /// <returns>CreatedContent</returns>
        CreatedContent CreateProject (string owner, PatchProjectDto patchProjectDto);

        /// <summary>
        /// Create a Project
        /// </summary>
        /// <remarks>
        /// Create a new project.
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="patchProjectDto"></param>
        /// <returns>ApiResponse of CreatedContent</returns>
        ApiResponse<CreatedContent> CreateProjectWithHttpInfo (string owner, PatchProjectDto patchProjectDto);
        /// <summary>
        /// Delete a Project
        /// </summary>
        /// <remarks>
        /// Delete a project (must have &#x60;admin&#x60; permission)
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <returns></returns>
        void DeleteProject (string owner, string name);

        /// <summary>
        /// Delete a Project
        /// </summary>
        /// <remarks>
        /// Delete a project (must have &#x60;admin&#x60; permission)
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteProjectWithHttpInfo (string owner, string name);
        /// <summary>
        /// Remove a Project permissions
        /// </summary>
        /// <remarks>
        /// Delete a project&#39;s access policy (must have &#x60;admin&#x60; permission)
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="projectPolicySubjectDto"></param>
        /// <returns></returns>
        void DeleteProjectOrgPermission (string owner, string name, ProjectPolicySubjectDto projectPolicySubjectDto);

        /// <summary>
        /// Remove a Project permissions
        /// </summary>
        /// <remarks>
        /// Delete a project&#39;s access policy (must have &#x60;admin&#x60; permission)
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="projectPolicySubjectDto"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteProjectOrgPermissionWithHttpInfo (string owner, string name, ProjectPolicySubjectDto projectPolicySubjectDto);
        /// <summary>
        /// Get a project
        /// </summary>
        /// <remarks>
        /// Retrieve a project by name
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <returns>ProjectDto</returns>
        ProjectDto GetProject (string owner, string name);

        /// <summary>
        /// Get a project
        /// </summary>
        /// <remarks>
        /// Retrieve a project by name
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <returns>ApiResponse of ProjectDto</returns>
        ApiResponse<ProjectDto> GetProjectWithHttpInfo (string owner, string name);
        /// <summary>
        /// Get a project&#39;s access permissions
        /// </summary>
        /// <remarks>
        /// Retrieve a project&#39;s access permissions (must have &#x60;contribute&#x60; permission)
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <returns>List&lt;ProjectAccessPolicyDto&gt;</returns>
        List<ProjectAccessPolicyDto> GetProjectAccessPermissions (string owner, string name);

        /// <summary>
        /// Get a project&#39;s access permissions
        /// </summary>
        /// <remarks>
        /// Retrieve a project&#39;s access permissions (must have &#x60;contribute&#x60; permission)
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <returns>ApiResponse of List&lt;ProjectAccessPolicyDto&gt;</returns>
        ApiResponse<List<ProjectAccessPolicyDto>> GetProjectAccessPermissionsWithHttpInfo (string owner, string name);
        /// <summary>
        /// List Projects
        /// </summary>
        /// <remarks>
        /// search for projects using query parameters
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number starting from 1 (optional, default to 1)</param>
        /// <param name="perPage">Number of items per page (optional, default to 25)</param>
        /// <param name="id">The ID of a project to search for (optional)</param>
        /// <param name="name">The account name (optional)</param>
        /// <param name="owner">Owner of the project (optional)</param>
        /// <param name="_public">Boolean check for public/private projects (optional)</param>
        /// <param name="_operator">Name of an operator to search workflows by (optional)</param>
        /// <returns>List&lt;ProjectDto&gt;</returns>
        List<ProjectDto> ListProjects (int page = 1, int perPage = 25, List<string> id = default, List<string> name = default, List<string> owner = default, bool? _public = default, List<string> _operator = default);

        /// <summary>
        /// List Projects
        /// </summary>
        /// <remarks>
        /// search for projects using query parameters
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number starting from 1 (optional, default to 1)</param>
        /// <param name="perPage">Number of items per page (optional, default to 25)</param>
        /// <param name="id">The ID of a project to search for (optional)</param>
        /// <param name="name">The account name (optional)</param>
        /// <param name="owner">Owner of the project (optional)</param>
        /// <param name="_public">Boolean check for public/private projects (optional)</param>
        /// <param name="_operator">Name of an operator to search workflows by (optional)</param>
        /// <returns>ApiResponse of List&lt;ProjectDto&gt;</returns>
        ApiResponse<List<ProjectDto>> ListProjectsWithHttpInfo (int page = 1, int perPage = 25, List<string> id = default, List<string> name = default, List<string> owner = default, bool? _public = default, List<string> _operator = default);
        /// <summary>
        /// Update a Project
        /// </summary>
        /// <remarks>
        /// Update a project (must have &#x60;contribute&#x60; permission)
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="patchProjectDto"></param>
        /// <returns>UpdateAccepted</returns>
        UpdateAccepted Update (string owner, string name, PatchProjectDto patchProjectDto);

        /// <summary>
        /// Update a Project
        /// </summary>
        /// <remarks>
        /// Update a project (must have &#x60;contribute&#x60; permission)
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="patchProjectDto"></param>
        /// <returns>ApiResponse of UpdateAccepted</returns>
        ApiResponse<UpdateAccepted> UpdateWithHttpInfo (string owner, string name, PatchProjectDto patchProjectDto);
        /// <summary>
        /// Upsert a new permission to a project
        /// </summary>
        /// <remarks>
        /// Upsert a project&#39;s access policy (must have &#x60;admin&#x60; permission)
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="projectAccessPolicyDto"></param>
        /// <returns>UpdateAccepted</returns>
        UpdateAccepted UpsertProjectPermission (string owner, string name, ProjectAccessPolicyDto projectAccessPolicyDto);

        /// <summary>
        /// Upsert a new permission to a project
        /// </summary>
        /// <remarks>
        /// Upsert a project&#39;s access policy (must have &#x60;admin&#x60; permission)
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="projectAccessPolicyDto"></param>
        /// <returns>ApiResponse of UpdateAccepted</returns>
        ApiResponse<UpdateAccepted> UpsertProjectPermissionWithHttpInfo (string owner, string name, ProjectAccessPolicyDto projectAccessPolicyDto);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create a Project
        /// </summary>
        /// <remarks>
        /// Create a new project.
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="patchProjectDto"></param>
        /// <returns>Task of CreatedContent</returns>
        System.Threading.Tasks.Task<CreatedContent> CreateProjectAsync (string owner, PatchProjectDto patchProjectDto);

        /// <summary>
        /// Create a Project
        /// </summary>
        /// <remarks>
        /// Create a new project.
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="patchProjectDto"></param>
        /// <returns>Task of ApiResponse (CreatedContent)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreatedContent>> CreateProjectAsyncWithHttpInfo (string owner, PatchProjectDto patchProjectDto);
        /// <summary>
        /// Delete a Project
        /// </summary>
        /// <remarks>
        /// Delete a project (must have &#x60;admin&#x60; permission)
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteProjectAsync (string owner, string name);

        /// <summary>
        /// Delete a Project
        /// </summary>
        /// <remarks>
        /// Delete a project (must have &#x60;admin&#x60; permission)
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteProjectAsyncWithHttpInfo (string owner, string name);
        /// <summary>
        /// Remove a Project permissions
        /// </summary>
        /// <remarks>
        /// Delete a project&#39;s access policy (must have &#x60;admin&#x60; permission)
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="projectPolicySubjectDto"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteProjectOrgPermissionAsync (string owner, string name, ProjectPolicySubjectDto projectPolicySubjectDto);

        /// <summary>
        /// Remove a Project permissions
        /// </summary>
        /// <remarks>
        /// Delete a project&#39;s access policy (must have &#x60;admin&#x60; permission)
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="projectPolicySubjectDto"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteProjectOrgPermissionAsyncWithHttpInfo (string owner, string name, ProjectPolicySubjectDto projectPolicySubjectDto);
        /// <summary>
        /// Get a project
        /// </summary>
        /// <remarks>
        /// Retrieve a project by name
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <returns>Task of ProjectDto</returns>
        System.Threading.Tasks.Task<ProjectDto> GetProjectAsync (string owner, string name);

        /// <summary>
        /// Get a project
        /// </summary>
        /// <remarks>
        /// Retrieve a project by name
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <returns>Task of ApiResponse (ProjectDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProjectDto>> GetProjectAsyncWithHttpInfo (string owner, string name);
        /// <summary>
        /// Get a project&#39;s access permissions
        /// </summary>
        /// <remarks>
        /// Retrieve a project&#39;s access permissions (must have &#x60;contribute&#x60; permission)
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <returns>Task of List&lt;ProjectAccessPolicyDto&gt;</returns>
        System.Threading.Tasks.Task<List<ProjectAccessPolicyDto>> GetProjectAccessPermissionsAsync (string owner, string name);

        /// <summary>
        /// Get a project&#39;s access permissions
        /// </summary>
        /// <remarks>
        /// Retrieve a project&#39;s access permissions (must have &#x60;contribute&#x60; permission)
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <returns>Task of ApiResponse (List&lt;ProjectAccessPolicyDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ProjectAccessPolicyDto>>> GetProjectAccessPermissionsAsyncWithHttpInfo (string owner, string name);
        /// <summary>
        /// List Projects
        /// </summary>
        /// <remarks>
        /// search for projects using query parameters
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number starting from 1 (optional, default to 1)</param>
        /// <param name="perPage">Number of items per page (optional, default to 25)</param>
        /// <param name="id">The ID of a project to search for (optional)</param>
        /// <param name="name">The account name (optional)</param>
        /// <param name="owner">Owner of the project (optional)</param>
        /// <param name="_public">Boolean check for public/private projects (optional)</param>
        /// <param name="_operator">Name of an operator to search workflows by (optional)</param>
        /// <returns>Task of List&lt;ProjectDto&gt;</returns>
        System.Threading.Tasks.Task<List<ProjectDto>> ListProjectsAsync (int page = 1, int perPage = 25, List<string> id = default, List<string> name = default, List<string> owner = default, bool? _public = default, List<string> _operator = default);

        /// <summary>
        /// List Projects
        /// </summary>
        /// <remarks>
        /// search for projects using query parameters
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number starting from 1 (optional, default to 1)</param>
        /// <param name="perPage">Number of items per page (optional, default to 25)</param>
        /// <param name="id">The ID of a project to search for (optional)</param>
        /// <param name="name">The account name (optional)</param>
        /// <param name="owner">Owner of the project (optional)</param>
        /// <param name="_public">Boolean check for public/private projects (optional)</param>
        /// <param name="_operator">Name of an operator to search workflows by (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ProjectDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ProjectDto>>> ListProjectsAsyncWithHttpInfo (int page = 1, int perPage = 25, List<string> id = default, List<string> name = default, List<string> owner = default, bool? _public = default, List<string> _operator = default);
        /// <summary>
        /// Update a Project
        /// </summary>
        /// <remarks>
        /// Update a project (must have &#x60;contribute&#x60; permission)
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="patchProjectDto"></param>
        /// <returns>Task of UpdateAccepted</returns>
        System.Threading.Tasks.Task<UpdateAccepted> UpdateAsync (string owner, string name, PatchProjectDto patchProjectDto);

        /// <summary>
        /// Update a Project
        /// </summary>
        /// <remarks>
        /// Update a project (must have &#x60;contribute&#x60; permission)
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="patchProjectDto"></param>
        /// <returns>Task of ApiResponse (UpdateAccepted)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateAccepted>> UpdateAsyncWithHttpInfo (string owner, string name, PatchProjectDto patchProjectDto);
        /// <summary>
        /// Upsert a new permission to a project
        /// </summary>
        /// <remarks>
        /// Upsert a project&#39;s access policy (must have &#x60;admin&#x60; permission)
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="projectAccessPolicyDto"></param>
        /// <returns>Task of UpdateAccepted</returns>
        System.Threading.Tasks.Task<UpdateAccepted> UpsertProjectPermissionAsync (string owner, string name, ProjectAccessPolicyDto projectAccessPolicyDto);

        /// <summary>
        /// Upsert a new permission to a project
        /// </summary>
        /// <remarks>
        /// Upsert a project&#39;s access policy (must have &#x60;admin&#x60; permission)
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="projectAccessPolicyDto"></param>
        /// <returns>Task of ApiResponse (UpdateAccepted)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateAccepted>> UpsertProjectPermissionAsyncWithHttpInfo (string owner, string name, ProjectAccessPolicyDto projectAccessPolicyDto);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ProjectsApi : IProjectsApi
    {
        private PollinationSDK.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ProjectsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ProjectsApi(String basePath)
        {
            this.Configuration = new PollinationSDK.Client.Configuration { BasePath = basePath };

            ExceptionFactory = PollinationSDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProjectsApi"/> class
        /// </summary>
        /// <returns></returns>
        public ProjectsApi()
        {
            this.Configuration = PollinationSDK.Client.Configuration.Default;

            ExceptionFactory = PollinationSDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProjectsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ProjectsApi(PollinationSDK.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = PollinationSDK.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = PollinationSDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

      
        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public PollinationSDK.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public PollinationSDK.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create a Project Create a new project.
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="patchProjectDto"></param>
        /// <returns>CreatedContent</returns>
        public CreatedContent CreateProject (string owner, PatchProjectDto patchProjectDto)
        {
             ApiResponse<CreatedContent> localVarResponse = CreateProjectWithHttpInfo(owner, patchProjectDto);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a Project Create a new project.
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="patchProjectDto"></param>
        /// <returns>ApiResponse of CreatedContent</returns>
        public ApiResponse<CreatedContent> CreateProjectWithHttpInfo (string owner, PatchProjectDto patchProjectDto)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling ProjectsApi->CreateProject");
            // verify the required parameter 'patchProjectDto' is set
            if (patchProjectDto == null)
                throw new ApiException(400, "Missing required parameter 'patchProjectDto' when calling ProjectsApi->CreateProject");

            var localVarPath = "/projects/{owner}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (patchProjectDto != null && patchProjectDto.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(patchProjectDto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = patchProjectDto; // byte array
            }

            // authentication (Compulsory Auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateProject", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreatedContent>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CreatedContent) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreatedContent)));
        }

        /// <summary>
        /// Create a Project Create a new project.
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="patchProjectDto"></param>
        /// <returns>Task of CreatedContent</returns>
        public async System.Threading.Tasks.Task<CreatedContent> CreateProjectAsync (string owner, PatchProjectDto patchProjectDto)
        {
             ApiResponse<CreatedContent> localVarResponse = await CreateProjectAsyncWithHttpInfo(owner, patchProjectDto);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a Project Create a new project.
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="patchProjectDto"></param>
        /// <returns>Task of ApiResponse (CreatedContent)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CreatedContent>> CreateProjectAsyncWithHttpInfo (string owner, PatchProjectDto patchProjectDto)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling ProjectsApi->CreateProject");
            // verify the required parameter 'patchProjectDto' is set
            if (patchProjectDto == null)
                throw new ApiException(400, "Missing required parameter 'patchProjectDto' when calling ProjectsApi->CreateProject");

            var localVarPath = "/projects/{owner}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (patchProjectDto != null && patchProjectDto.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(patchProjectDto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = patchProjectDto; // byte array
            }

            // authentication (Compulsory Auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateProject", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreatedContent>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CreatedContent) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreatedContent)));
        }

        /// <summary>
        /// Delete a Project Delete a project (must have &#x60;admin&#x60; permission)
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <returns></returns>
        public void DeleteProject (string owner, string name)
        {
             DeleteProjectWithHttpInfo(owner, name);
        }

        /// <summary>
        /// Delete a Project Delete a project (must have &#x60;admin&#x60; permission)
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteProjectWithHttpInfo (string owner, string name)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling ProjectsApi->DeleteProject");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ProjectsApi->DeleteProject");

            var localVarPath = "/projects/{owner}/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter

            // authentication (Compulsory Auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteProject", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete a Project Delete a project (must have &#x60;admin&#x60; permission)
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteProjectAsync (string owner, string name)
        {
             await DeleteProjectAsyncWithHttpInfo(owner, name);

        }

        /// <summary>
        /// Delete a Project Delete a project (must have &#x60;admin&#x60; permission)
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteProjectAsyncWithHttpInfo (string owner, string name)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling ProjectsApi->DeleteProject");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ProjectsApi->DeleteProject");

            var localVarPath = "/projects/{owner}/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter

            // authentication (Compulsory Auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteProject", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Remove a Project permissions Delete a project&#39;s access policy (must have &#x60;admin&#x60; permission)
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="projectPolicySubjectDto"></param>
        /// <returns></returns>
        public void DeleteProjectOrgPermission (string owner, string name, ProjectPolicySubjectDto projectPolicySubjectDto)
        {
             DeleteProjectOrgPermissionWithHttpInfo(owner, name, projectPolicySubjectDto);
        }

        /// <summary>
        /// Remove a Project permissions Delete a project&#39;s access policy (must have &#x60;admin&#x60; permission)
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="projectPolicySubjectDto"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteProjectOrgPermissionWithHttpInfo (string owner, string name, ProjectPolicySubjectDto projectPolicySubjectDto)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling ProjectsApi->DeleteProjectOrgPermission");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ProjectsApi->DeleteProjectOrgPermission");
            // verify the required parameter 'projectPolicySubjectDto' is set
            if (projectPolicySubjectDto == null)
                throw new ApiException(400, "Missing required parameter 'projectPolicySubjectDto' when calling ProjectsApi->DeleteProjectOrgPermission");

            var localVarPath = "/projects/{owner}/{name}/permissions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (projectPolicySubjectDto != null && projectPolicySubjectDto.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(projectPolicySubjectDto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = projectPolicySubjectDto; // byte array
            }

            // authentication (Compulsory Auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteProjectOrgPermission", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Remove a Project permissions Delete a project&#39;s access policy (must have &#x60;admin&#x60; permission)
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="projectPolicySubjectDto"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteProjectOrgPermissionAsync (string owner, string name, ProjectPolicySubjectDto projectPolicySubjectDto)
        {
             await DeleteProjectOrgPermissionAsyncWithHttpInfo(owner, name, projectPolicySubjectDto);

        }

        /// <summary>
        /// Remove a Project permissions Delete a project&#39;s access policy (must have &#x60;admin&#x60; permission)
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="projectPolicySubjectDto"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteProjectOrgPermissionAsyncWithHttpInfo (string owner, string name, ProjectPolicySubjectDto projectPolicySubjectDto)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling ProjectsApi->DeleteProjectOrgPermission");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ProjectsApi->DeleteProjectOrgPermission");
            // verify the required parameter 'projectPolicySubjectDto' is set
            if (projectPolicySubjectDto == null)
                throw new ApiException(400, "Missing required parameter 'projectPolicySubjectDto' when calling ProjectsApi->DeleteProjectOrgPermission");

            var localVarPath = "/projects/{owner}/{name}/permissions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (projectPolicySubjectDto != null && projectPolicySubjectDto.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(projectPolicySubjectDto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = projectPolicySubjectDto; // byte array
            }

            // authentication (Compulsory Auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteProjectOrgPermission", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Get a project Retrieve a project by name
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <returns>ProjectDto</returns>
        public ProjectDto GetProject (string owner, string name)
        {
             ApiResponse<ProjectDto> localVarResponse = GetProjectWithHttpInfo(owner, name);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a project Retrieve a project by name
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <returns>ApiResponse of ProjectDto</returns>
        public ApiResponse<ProjectDto> GetProjectWithHttpInfo (string owner, string name)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling ProjectsApi->GetProject");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ProjectsApi->GetProject");

            var localVarPath = "/projects/{owner}/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter

            // authentication (Optional Auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProject", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProjectDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProjectDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProjectDto)));
        }

        /// <summary>
        /// Get a project Retrieve a project by name
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <returns>Task of ProjectDto</returns>
        public async System.Threading.Tasks.Task<ProjectDto> GetProjectAsync (string owner, string name)
        {
             ApiResponse<ProjectDto> localVarResponse = await GetProjectAsyncWithHttpInfo(owner, name);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a project Retrieve a project by name
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <returns>Task of ApiResponse (ProjectDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProjectDto>> GetProjectAsyncWithHttpInfo (string owner, string name)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling ProjectsApi->GetProject");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ProjectsApi->GetProject");

            var localVarPath = "/projects/{owner}/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter

            // authentication (Optional Auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProject", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProjectDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProjectDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProjectDto)));
        }

        /// <summary>
        /// Get a project&#39;s access permissions Retrieve a project&#39;s access permissions (must have &#x60;contribute&#x60; permission)
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <returns>List&lt;ProjectAccessPolicyDto&gt;</returns>
        public List<ProjectAccessPolicyDto> GetProjectAccessPermissions (string owner, string name)
        {
             ApiResponse<List<ProjectAccessPolicyDto>> localVarResponse = GetProjectAccessPermissionsWithHttpInfo(owner, name);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a project&#39;s access permissions Retrieve a project&#39;s access permissions (must have &#x60;contribute&#x60; permission)
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <returns>ApiResponse of List&lt;ProjectAccessPolicyDto&gt;</returns>
        public ApiResponse<List<ProjectAccessPolicyDto>> GetProjectAccessPermissionsWithHttpInfo (string owner, string name)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling ProjectsApi->GetProjectAccessPermissions");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ProjectsApi->GetProjectAccessPermissions");

            var localVarPath = "/projects/{owner}/{name}/permissions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter

            // authentication (Compulsory Auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProjectAccessPermissions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ProjectAccessPolicyDto>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ProjectAccessPolicyDto>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProjectAccessPolicyDto>)));
        }

        /// <summary>
        /// Get a project&#39;s access permissions Retrieve a project&#39;s access permissions (must have &#x60;contribute&#x60; permission)
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <returns>Task of List&lt;ProjectAccessPolicyDto&gt;</returns>
        public async System.Threading.Tasks.Task<List<ProjectAccessPolicyDto>> GetProjectAccessPermissionsAsync (string owner, string name)
        {
             ApiResponse<List<ProjectAccessPolicyDto>> localVarResponse = await GetProjectAccessPermissionsAsyncWithHttpInfo(owner, name);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a project&#39;s access permissions Retrieve a project&#39;s access permissions (must have &#x60;contribute&#x60; permission)
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <returns>Task of ApiResponse (List&lt;ProjectAccessPolicyDto&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ProjectAccessPolicyDto>>> GetProjectAccessPermissionsAsyncWithHttpInfo (string owner, string name)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling ProjectsApi->GetProjectAccessPermissions");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ProjectsApi->GetProjectAccessPermissions");

            var localVarPath = "/projects/{owner}/{name}/permissions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter

            // authentication (Compulsory Auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProjectAccessPermissions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ProjectAccessPolicyDto>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ProjectAccessPolicyDto>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProjectAccessPolicyDto>)));
        }

        /// <summary>
        /// List Projects search for projects using query parameters
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number starting from 1 (optional, default to 1)</param>
        /// <param name="perPage">Number of items per page (optional, default to 25)</param>
        /// <param name="id">The ID of a project to search for (optional)</param>
        /// <param name="name">The account name (optional)</param>
        /// <param name="owner">Owner of the project (optional)</param>
        /// <param name="_public">Boolean check for public/private projects (optional)</param>
        /// <param name="_operator">Name of an operator to search workflows by (optional)</param>
        /// <returns>List&lt;ProjectDto&gt;</returns>
        public List<ProjectDto> ListProjects (int page = 1, int perPage = 25, List<string> id = default, List<string> name = default, List<string> owner = default, bool? _public = default, List<string> _operator = default)
        {
             ApiResponse<List<ProjectDto>> localVarResponse = ListProjectsWithHttpInfo(page, perPage, id, name, owner, _public, _operator);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Projects search for projects using query parameters
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number starting from 1 (optional, default to 1)</param>
        /// <param name="perPage">Number of items per page (optional, default to 25)</param>
        /// <param name="id">The ID of a project to search for (optional)</param>
        /// <param name="name">The account name (optional)</param>
        /// <param name="owner">Owner of the project (optional)</param>
        /// <param name="_public">Boolean check for public/private projects (optional)</param>
        /// <param name="_operator">Name of an operator to search workflows by (optional)</param>
        /// <returns>ApiResponse of List&lt;ProjectDto&gt;</returns>
        public ApiResponse<List<ProjectDto>> ListProjectsWithHttpInfo (int page = 1, int perPage = 25, List<string> id = default, List<string> name = default, List<string> owner = default, bool? _public = default, List<string> _operator = default)
        {

            var localVarPath = "/projects";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per-page", perPage)); // query parameter
            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "id", id)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "name", name)); // query parameter
            if (owner != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "owner", owner)); // query parameter
            if (_public != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "public", _public)); // query parameter
            if (_operator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "operator", _operator)); // query parameter

            // authentication (Optional Auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListProjects", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ProjectDto>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ProjectDto>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProjectDto>)));
        }

        /// <summary>
        /// List Projects search for projects using query parameters
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number starting from 1 (optional, default to 1)</param>
        /// <param name="perPage">Number of items per page (optional, default to 25)</param>
        /// <param name="id">The ID of a project to search for (optional)</param>
        /// <param name="name">The account name (optional)</param>
        /// <param name="owner">Owner of the project (optional)</param>
        /// <param name="_public">Boolean check for public/private projects (optional)</param>
        /// <param name="_operator">Name of an operator to search workflows by (optional)</param>
        /// <returns>Task of List&lt;ProjectDto&gt;</returns>
        public async System.Threading.Tasks.Task<List<ProjectDto>> ListProjectsAsync (int page = 1, int perPage = 25, List<string> id = default, List<string> name = default, List<string> owner = default, bool? _public = default, List<string> _operator = default)
        {
             ApiResponse<List<ProjectDto>> localVarResponse = await ListProjectsAsyncWithHttpInfo(page, perPage, id, name, owner, _public, _operator);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Projects search for projects using query parameters
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number starting from 1 (optional, default to 1)</param>
        /// <param name="perPage">Number of items per page (optional, default to 25)</param>
        /// <param name="id">The ID of a project to search for (optional)</param>
        /// <param name="name">The account name (optional)</param>
        /// <param name="owner">Owner of the project (optional)</param>
        /// <param name="_public">Boolean check for public/private projects (optional)</param>
        /// <param name="_operator">Name of an operator to search workflows by (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ProjectDto&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ProjectDto>>> ListProjectsAsyncWithHttpInfo (int page = 1, int perPage = 25, List<string> id = default, List<string> name = default, List<string> owner = default, bool? _public = default, List<string> _operator = default)
        {

            var localVarPath = "/projects";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per-page", perPage)); // query parameter
            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "id", id)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "name", name)); // query parameter
            if (owner != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "owner", owner)); // query parameter
            if (_public != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "public", _public)); // query parameter
            if (_operator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "operator", _operator)); // query parameter

            // authentication (Optional Auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListProjects", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ProjectDto>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ProjectDto>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProjectDto>)));
        }

        /// <summary>
        /// Update a Project Update a project (must have &#x60;contribute&#x60; permission)
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="patchProjectDto"></param>
        /// <returns>UpdateAccepted</returns>
        public UpdateAccepted Update (string owner, string name, PatchProjectDto patchProjectDto)
        {
             ApiResponse<UpdateAccepted> localVarResponse = UpdateWithHttpInfo(owner, name, patchProjectDto);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a Project Update a project (must have &#x60;contribute&#x60; permission)
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="patchProjectDto"></param>
        /// <returns>ApiResponse of UpdateAccepted</returns>
        public ApiResponse<UpdateAccepted> UpdateWithHttpInfo (string owner, string name, PatchProjectDto patchProjectDto)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling ProjectsApi->Update");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ProjectsApi->Update");
            // verify the required parameter 'patchProjectDto' is set
            if (patchProjectDto == null)
                throw new ApiException(400, "Missing required parameter 'patchProjectDto' when calling ProjectsApi->Update");

            var localVarPath = "/projects/{owner}/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (patchProjectDto != null && patchProjectDto.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(patchProjectDto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = patchProjectDto; // byte array
            }

            // authentication (Compulsory Auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Update", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdateAccepted>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UpdateAccepted) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdateAccepted)));
        }

        /// <summary>
        /// Update a Project Update a project (must have &#x60;contribute&#x60; permission)
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="patchProjectDto"></param>
        /// <returns>Task of UpdateAccepted</returns>
        public async System.Threading.Tasks.Task<UpdateAccepted> UpdateAsync (string owner, string name, PatchProjectDto patchProjectDto)
        {
             ApiResponse<UpdateAccepted> localVarResponse = await UpdateAsyncWithHttpInfo(owner, name, patchProjectDto);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a Project Update a project (must have &#x60;contribute&#x60; permission)
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="patchProjectDto"></param>
        /// <returns>Task of ApiResponse (UpdateAccepted)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UpdateAccepted>> UpdateAsyncWithHttpInfo (string owner, string name, PatchProjectDto patchProjectDto)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling ProjectsApi->Update");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ProjectsApi->Update");
            // verify the required parameter 'patchProjectDto' is set
            if (patchProjectDto == null)
                throw new ApiException(400, "Missing required parameter 'patchProjectDto' when calling ProjectsApi->Update");

            var localVarPath = "/projects/{owner}/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (patchProjectDto != null && patchProjectDto.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(patchProjectDto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = patchProjectDto; // byte array
            }

            // authentication (Compulsory Auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Update", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdateAccepted>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UpdateAccepted) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdateAccepted)));
        }

        /// <summary>
        /// Upsert a new permission to a project Upsert a project&#39;s access policy (must have &#x60;admin&#x60; permission)
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="projectAccessPolicyDto"></param>
        /// <returns>UpdateAccepted</returns>
        public UpdateAccepted UpsertProjectPermission (string owner, string name, ProjectAccessPolicyDto projectAccessPolicyDto)
        {
             ApiResponse<UpdateAccepted> localVarResponse = UpsertProjectPermissionWithHttpInfo(owner, name, projectAccessPolicyDto);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Upsert a new permission to a project Upsert a project&#39;s access policy (must have &#x60;admin&#x60; permission)
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="projectAccessPolicyDto"></param>
        /// <returns>ApiResponse of UpdateAccepted</returns>
        public ApiResponse<UpdateAccepted> UpsertProjectPermissionWithHttpInfo (string owner, string name, ProjectAccessPolicyDto projectAccessPolicyDto)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling ProjectsApi->UpsertProjectPermission");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ProjectsApi->UpsertProjectPermission");
            // verify the required parameter 'projectAccessPolicyDto' is set
            if (projectAccessPolicyDto == null)
                throw new ApiException(400, "Missing required parameter 'projectAccessPolicyDto' when calling ProjectsApi->UpsertProjectPermission");

            var localVarPath = "/projects/{owner}/{name}/permissions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (projectAccessPolicyDto != null && projectAccessPolicyDto.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(projectAccessPolicyDto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = projectAccessPolicyDto; // byte array
            }

            // authentication (Compulsory Auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpsertProjectPermission", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdateAccepted>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UpdateAccepted) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdateAccepted)));
        }

        /// <summary>
        /// Upsert a new permission to a project Upsert a project&#39;s access policy (must have &#x60;admin&#x60; permission)
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="projectAccessPolicyDto"></param>
        /// <returns>Task of UpdateAccepted</returns>
        public async System.Threading.Tasks.Task<UpdateAccepted> UpsertProjectPermissionAsync (string owner, string name, ProjectAccessPolicyDto projectAccessPolicyDto)
        {
             ApiResponse<UpdateAccepted> localVarResponse = await UpsertProjectPermissionAsyncWithHttpInfo(owner, name, projectAccessPolicyDto);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Upsert a new permission to a project Upsert a project&#39;s access policy (must have &#x60;admin&#x60; permission)
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="projectAccessPolicyDto"></param>
        /// <returns>Task of ApiResponse (UpdateAccepted)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UpdateAccepted>> UpsertProjectPermissionAsyncWithHttpInfo (string owner, string name, ProjectAccessPolicyDto projectAccessPolicyDto)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling ProjectsApi->UpsertProjectPermission");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ProjectsApi->UpsertProjectPermission");
            // verify the required parameter 'projectAccessPolicyDto' is set
            if (projectAccessPolicyDto == null)
                throw new ApiException(400, "Missing required parameter 'projectAccessPolicyDto' when calling ProjectsApi->UpsertProjectPermission");

            var localVarPath = "/projects/{owner}/{name}/permissions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (projectAccessPolicyDto != null && projectAccessPolicyDto.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(projectAccessPolicyDto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = projectAccessPolicyDto; // byte array
            }

            // authentication (Compulsory Auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpsertProjectPermission", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdateAccepted>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UpdateAccepted) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdateAccepted)));
        }

    }
}
