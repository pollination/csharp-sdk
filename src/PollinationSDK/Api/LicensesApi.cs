/* 
 * pollination-server
 *
 * Pollination Server OpenAPI Definition
 *
 * Contact: info@pollination.cloud
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using PollinationSDK.Client;
using PollinationSDK.Model;

namespace PollinationSDK.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILicensesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get Available Pools
        /// </summary>
        /// <remarks>
        /// Get license pools available to authenticated user
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">Owner of the project (optional)</param>
        /// <returns>object</returns>
        object GetAvailablePools (List<string> owner = default);

        /// <summary>
        /// Get Available Pools
        /// </summary>
        /// <remarks>
        /// Get license pools available to authenticated user
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">Owner of the project (optional)</param>
        /// <returns>ApiResponse of object</returns>
        ApiResponse<object> GetAvailablePoolsWithHttpInfo (List<string> owner = default);
        /// <summary>
        /// Get Pool License
        /// </summary>
        /// <remarks>
        /// Get the license associated with a pool
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId"></param>
        /// <returns>LicensePublic</returns>
        LicensePublic GetPoolLicense (Guid poolId);

        /// <summary>
        /// Get Pool License
        /// </summary>
        /// <remarks>
        /// Get the license associated with a pool
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId"></param>
        /// <returns>ApiResponse of LicensePublic</returns>
        ApiResponse<LicensePublic> GetPoolLicenseWithHttpInfo (Guid poolId);
        /// <summary>
        /// Grant Pool Access
        /// </summary>
        /// <remarks>
        /// Grant access to the license pool
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId"></param>
        /// <param name="licensePoolAccessPolicy"></param>
        /// <returns>LicensePoolPublic</returns>
        LicensePoolPublic GrantAccessToPool (Guid poolId, LicensePoolAccessPolicy licensePoolAccessPolicy);

        /// <summary>
        /// Grant Pool Access
        /// </summary>
        /// <remarks>
        /// Grant access to the license pool
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId"></param>
        /// <param name="licensePoolAccessPolicy"></param>
        /// <returns>ApiResponse of LicensePoolPublic</returns>
        ApiResponse<LicensePoolPublic> GrantAccessToPoolWithHttpInfo (Guid poolId, LicensePoolAccessPolicy licensePoolAccessPolicy);
        /// <summary>
        /// Delete Pool Access
        /// </summary>
        /// <remarks>
        /// Revoke access to the license pool
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId"></param>
        /// <param name="licensePoolPolicySubject"></param>
        /// <returns>LicensePoolPublic</returns>
        LicensePoolPublic RevokeAccessToPool (Guid poolId, LicensePoolPolicySubject licensePoolPolicySubject);

        /// <summary>
        /// Delete Pool Access
        /// </summary>
        /// <remarks>
        /// Revoke access to the license pool
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId"></param>
        /// <param name="licensePoolPolicySubject"></param>
        /// <returns>ApiResponse of LicensePoolPublic</returns>
        ApiResponse<LicensePoolPublic> RevokeAccessToPoolWithHttpInfo (Guid poolId, LicensePoolPolicySubject licensePoolPolicySubject);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get Available Pools
        /// </summary>
        /// <remarks>
        /// Get license pools available to authenticated user
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">Owner of the project (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of object</returns>
        System.Threading.Tasks.Task<object> GetAvailablePoolsAsync (List<string> owner = default, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Available Pools
        /// </summary>
        /// <remarks>
        /// Get license pools available to authenticated user
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">Owner of the project (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (object)</returns>
        System.Threading.Tasks.Task<ApiResponse<object>> GetAvailablePoolsWithHttpInfoAsync (List<string> owner = default, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Pool License
        /// </summary>
        /// <remarks>
        /// Get the license associated with a pool
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of LicensePublic</returns>
        System.Threading.Tasks.Task<LicensePublic> GetPoolLicenseAsync (Guid poolId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Pool License
        /// </summary>
        /// <remarks>
        /// Get the license associated with a pool
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (LicensePublic)</returns>
        System.Threading.Tasks.Task<ApiResponse<LicensePublic>> GetPoolLicenseWithHttpInfoAsync (Guid poolId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Grant Pool Access
        /// </summary>
        /// <remarks>
        /// Grant access to the license pool
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId"></param>
        /// <param name="licensePoolAccessPolicy"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of LicensePoolPublic</returns>
        System.Threading.Tasks.Task<LicensePoolPublic> GrantAccessToPoolAsync (Guid poolId, LicensePoolAccessPolicy licensePoolAccessPolicy, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Grant Pool Access
        /// </summary>
        /// <remarks>
        /// Grant access to the license pool
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId"></param>
        /// <param name="licensePoolAccessPolicy"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (LicensePoolPublic)</returns>
        System.Threading.Tasks.Task<ApiResponse<LicensePoolPublic>> GrantAccessToPoolWithHttpInfoAsync (Guid poolId, LicensePoolAccessPolicy licensePoolAccessPolicy, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Delete Pool Access
        /// </summary>
        /// <remarks>
        /// Revoke access to the license pool
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId"></param>
        /// <param name="licensePoolPolicySubject"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of LicensePoolPublic</returns>
        System.Threading.Tasks.Task<LicensePoolPublic> RevokeAccessToPoolAsync (Guid poolId, LicensePoolPolicySubject licensePoolPolicySubject, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete Pool Access
        /// </summary>
        /// <remarks>
        /// Revoke access to the license pool
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId"></param>
        /// <param name="licensePoolPolicySubject"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (LicensePoolPublic)</returns>
        System.Threading.Tasks.Task<ApiResponse<LicensePoolPublic>> RevokeAccessToPoolWithHttpInfoAsync (Guid poolId, LicensePoolPolicySubject licensePoolPolicySubject, CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class LicensesApi : ILicensesApi
    {
        private PollinationSDK.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="LicensesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public LicensesApi(String basePath)
        {
            this.Configuration = new PollinationSDK.Client.Configuration { BasePath = basePath };

            ExceptionFactory = PollinationSDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LicensesApi"/> class
        /// </summary>
        /// <returns></returns>
        public LicensesApi()
        {
            this.Configuration = PollinationSDK.Client.Configuration.Default;

            ExceptionFactory = PollinationSDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LicensesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public LicensesApi(PollinationSDK.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = PollinationSDK.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = PollinationSDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public PollinationSDK.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public PollinationSDK.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get Available Pools Get license pools available to authenticated user
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">Owner of the project (optional)</param>
        /// <returns>object</returns>
        public object GetAvailablePools (List<string> owner = default)
        {
             ApiResponse<object> localVarResponse = GetAvailablePoolsWithHttpInfo(owner);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Available Pools Get license pools available to authenticated user
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">Owner of the project (optional)</param>
        /// <returns>ApiResponse of object</returns>
        public ApiResponse<object> GetAvailablePoolsWithHttpInfo (List<string> owner = default)
        {

            var localVarPath = "/licenses/pools";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "owner", owner)); // query parameter

            // authentication (APIKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-pollination-token")))
            {
                localVarHeaderParams["x-pollination-token"] = this.Configuration.GetApiKeyWithPrefix("x-pollination-token");
            }
            // authentication (JWTAuth) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAvailablePools", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(object)));
        }

        /// <summary>
        /// Get Available Pools Get license pools available to authenticated user
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">Owner of the project (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of object</returns>
        public async System.Threading.Tasks.Task<object> GetAvailablePoolsAsync (List<string> owner = default, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<object> localVarResponse = await GetAvailablePoolsWithHttpInfoAsync(owner, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Available Pools Get license pools available to authenticated user
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">Owner of the project (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<object>> GetAvailablePoolsWithHttpInfoAsync (List<string> owner = default, CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/licenses/pools";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "owner", owner)); // query parameter

            // authentication (APIKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-pollination-token")))
            {
                localVarHeaderParams["x-pollination-token"] = this.Configuration.GetApiKeyWithPrefix("x-pollination-token");
            }
            // authentication (JWTAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAvailablePools", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(object)));
        }

        /// <summary>
        /// Get Pool License Get the license associated with a pool
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId"></param>
        /// <returns>LicensePublic</returns>
        public LicensePublic GetPoolLicense (Guid poolId)
        {
             ApiResponse<LicensePublic> localVarResponse = GetPoolLicenseWithHttpInfo(poolId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Pool License Get the license associated with a pool
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId"></param>
        /// <returns>ApiResponse of LicensePublic</returns>
        public ApiResponse<LicensePublic> GetPoolLicenseWithHttpInfo (Guid poolId)
        {
            // verify the required parameter 'poolId' is set
            if (poolId == null)
                throw new ApiException(400, "Missing required parameter 'poolId' when calling LicensesApi->GetPoolLicense");

            var localVarPath = "/licenses/pools/{pool_id}/license";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (poolId != null) localVarPathParams.Add("pool_id", this.Configuration.ApiClient.ParameterToString(poolId)); // path parameter

            // authentication (APIKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-pollination-token")))
            {
                localVarHeaderParams["x-pollination-token"] = this.Configuration.GetApiKeyWithPrefix("x-pollination-token");
            }
            // authentication (JWTAuth) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPoolLicense", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LicensePublic>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (LicensePublic) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LicensePublic)));
        }

        /// <summary>
        /// Get Pool License Get the license associated with a pool
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of LicensePublic</returns>
        public async System.Threading.Tasks.Task<LicensePublic> GetPoolLicenseAsync (Guid poolId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<LicensePublic> localVarResponse = await GetPoolLicenseWithHttpInfoAsync(poolId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Pool License Get the license associated with a pool
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (LicensePublic)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LicensePublic>> GetPoolLicenseWithHttpInfoAsync (Guid poolId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'poolId' is set
            if (poolId == null)
                throw new ApiException(400, "Missing required parameter 'poolId' when calling LicensesApi->GetPoolLicense");

            var localVarPath = "/licenses/pools/{pool_id}/license";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (poolId != null) localVarPathParams.Add("pool_id", this.Configuration.ApiClient.ParameterToString(poolId)); // path parameter

            // authentication (APIKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-pollination-token")))
            {
                localVarHeaderParams["x-pollination-token"] = this.Configuration.GetApiKeyWithPrefix("x-pollination-token");
            }
            // authentication (JWTAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPoolLicense", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LicensePublic>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (LicensePublic) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LicensePublic)));
        }

        /// <summary>
        /// Grant Pool Access Grant access to the license pool
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId"></param>
        /// <param name="licensePoolAccessPolicy"></param>
        /// <returns>LicensePoolPublic</returns>
        public LicensePoolPublic GrantAccessToPool (Guid poolId, LicensePoolAccessPolicy licensePoolAccessPolicy)
        {
             ApiResponse<LicensePoolPublic> localVarResponse = GrantAccessToPoolWithHttpInfo(poolId, licensePoolAccessPolicy);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Grant Pool Access Grant access to the license pool
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId"></param>
        /// <param name="licensePoolAccessPolicy"></param>
        /// <returns>ApiResponse of LicensePoolPublic</returns>
        public ApiResponse<LicensePoolPublic> GrantAccessToPoolWithHttpInfo (Guid poolId, LicensePoolAccessPolicy licensePoolAccessPolicy)
        {
            // verify the required parameter 'poolId' is set
            if (poolId == null)
                throw new ApiException(400, "Missing required parameter 'poolId' when calling LicensesApi->GrantAccessToPool");
            // verify the required parameter 'licensePoolAccessPolicy' is set
            if (licensePoolAccessPolicy == null)
                throw new ApiException(400, "Missing required parameter 'licensePoolAccessPolicy' when calling LicensesApi->GrantAccessToPool");

            var localVarPath = "/licenses/pools/{pool_id}/permissions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (poolId != null) localVarPathParams.Add("pool_id", this.Configuration.ApiClient.ParameterToString(poolId)); // path parameter
            if (licensePoolAccessPolicy != null && licensePoolAccessPolicy.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(licensePoolAccessPolicy); // http body (model) parameter
            }
            else
            {
                localVarPostBody = licensePoolAccessPolicy; // byte array
            }

            // authentication (APIKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-pollination-token")))
            {
                localVarHeaderParams["x-pollination-token"] = this.Configuration.GetApiKeyWithPrefix("x-pollination-token");
            }
            // authentication (JWTAuth) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GrantAccessToPool", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LicensePoolPublic>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (LicensePoolPublic) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LicensePoolPublic)));
        }

        /// <summary>
        /// Grant Pool Access Grant access to the license pool
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId"></param>
        /// <param name="licensePoolAccessPolicy"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of LicensePoolPublic</returns>
        public async System.Threading.Tasks.Task<LicensePoolPublic> GrantAccessToPoolAsync (Guid poolId, LicensePoolAccessPolicy licensePoolAccessPolicy, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<LicensePoolPublic> localVarResponse = await GrantAccessToPoolWithHttpInfoAsync(poolId, licensePoolAccessPolicy, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Grant Pool Access Grant access to the license pool
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId"></param>
        /// <param name="licensePoolAccessPolicy"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (LicensePoolPublic)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LicensePoolPublic>> GrantAccessToPoolWithHttpInfoAsync (Guid poolId, LicensePoolAccessPolicy licensePoolAccessPolicy, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'poolId' is set
            if (poolId == null)
                throw new ApiException(400, "Missing required parameter 'poolId' when calling LicensesApi->GrantAccessToPool");
            // verify the required parameter 'licensePoolAccessPolicy' is set
            if (licensePoolAccessPolicy == null)
                throw new ApiException(400, "Missing required parameter 'licensePoolAccessPolicy' when calling LicensesApi->GrantAccessToPool");

            var localVarPath = "/licenses/pools/{pool_id}/permissions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (poolId != null) localVarPathParams.Add("pool_id", this.Configuration.ApiClient.ParameterToString(poolId)); // path parameter
            if (licensePoolAccessPolicy != null && licensePoolAccessPolicy.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(licensePoolAccessPolicy); // http body (model) parameter
            }
            else
            {
                localVarPostBody = licensePoolAccessPolicy; // byte array
            }

            // authentication (APIKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-pollination-token")))
            {
                localVarHeaderParams["x-pollination-token"] = this.Configuration.GetApiKeyWithPrefix("x-pollination-token");
            }
            // authentication (JWTAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GrantAccessToPool", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LicensePoolPublic>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (LicensePoolPublic) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LicensePoolPublic)));
        }

        /// <summary>
        /// Delete Pool Access Revoke access to the license pool
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId"></param>
        /// <param name="licensePoolPolicySubject"></param>
        /// <returns>LicensePoolPublic</returns>
        public LicensePoolPublic RevokeAccessToPool (Guid poolId, LicensePoolPolicySubject licensePoolPolicySubject)
        {
             ApiResponse<LicensePoolPublic> localVarResponse = RevokeAccessToPoolWithHttpInfo(poolId, licensePoolPolicySubject);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Pool Access Revoke access to the license pool
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId"></param>
        /// <param name="licensePoolPolicySubject"></param>
        /// <returns>ApiResponse of LicensePoolPublic</returns>
        public ApiResponse<LicensePoolPublic> RevokeAccessToPoolWithHttpInfo (Guid poolId, LicensePoolPolicySubject licensePoolPolicySubject)
        {
            // verify the required parameter 'poolId' is set
            if (poolId == null)
                throw new ApiException(400, "Missing required parameter 'poolId' when calling LicensesApi->RevokeAccessToPool");
            // verify the required parameter 'licensePoolPolicySubject' is set
            if (licensePoolPolicySubject == null)
                throw new ApiException(400, "Missing required parameter 'licensePoolPolicySubject' when calling LicensesApi->RevokeAccessToPool");

            var localVarPath = "/licenses/pools/{pool_id}/permissions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (poolId != null) localVarPathParams.Add("pool_id", this.Configuration.ApiClient.ParameterToString(poolId)); // path parameter
            if (licensePoolPolicySubject != null && licensePoolPolicySubject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(licensePoolPolicySubject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = licensePoolPolicySubject; // byte array
            }

            // authentication (APIKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-pollination-token")))
            {
                localVarHeaderParams["x-pollination-token"] = this.Configuration.GetApiKeyWithPrefix("x-pollination-token");
            }
            // authentication (JWTAuth) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RevokeAccessToPool", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LicensePoolPublic>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (LicensePoolPublic) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LicensePoolPublic)));
        }

        /// <summary>
        /// Delete Pool Access Revoke access to the license pool
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId"></param>
        /// <param name="licensePoolPolicySubject"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of LicensePoolPublic</returns>
        public async System.Threading.Tasks.Task<LicensePoolPublic> RevokeAccessToPoolAsync (Guid poolId, LicensePoolPolicySubject licensePoolPolicySubject, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<LicensePoolPublic> localVarResponse = await RevokeAccessToPoolWithHttpInfoAsync(poolId, licensePoolPolicySubject, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete Pool Access Revoke access to the license pool
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId"></param>
        /// <param name="licensePoolPolicySubject"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (LicensePoolPublic)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LicensePoolPublic>> RevokeAccessToPoolWithHttpInfoAsync (Guid poolId, LicensePoolPolicySubject licensePoolPolicySubject, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'poolId' is set
            if (poolId == null)
                throw new ApiException(400, "Missing required parameter 'poolId' when calling LicensesApi->RevokeAccessToPool");
            // verify the required parameter 'licensePoolPolicySubject' is set
            if (licensePoolPolicySubject == null)
                throw new ApiException(400, "Missing required parameter 'licensePoolPolicySubject' when calling LicensesApi->RevokeAccessToPool");

            var localVarPath = "/licenses/pools/{pool_id}/permissions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (poolId != null) localVarPathParams.Add("pool_id", this.Configuration.ApiClient.ParameterToString(poolId)); // path parameter
            if (licensePoolPolicySubject != null && licensePoolPolicySubject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(licensePoolPolicySubject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = licensePoolPolicySubject; // byte array
            }

            // authentication (APIKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-pollination-token")))
            {
                localVarHeaderParams["x-pollination-token"] = this.Configuration.GetApiKeyWithPrefix("x-pollination-token");
            }
            // authentication (JWTAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RevokeAccessToPool", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LicensePoolPublic>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (LicensePoolPublic) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LicensePoolPublic)));
        }

    }
}
