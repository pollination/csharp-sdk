/* 
 * Pollination Server
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.7.1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using PollinationSDK.Client;
using PollinationSDK.Model;

namespace PollinationSDK.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOperatorsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create an Operator
        /// </summary>
        /// <remarks>
        /// Create a new operator.
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="newRepositoryDto"></param>
        /// <returns>CreatedContent</returns>
        CreatedContent CreateOperator (string owner, NewRepositoryDto newRepositoryDto);

        /// <summary>
        /// Create an Operator
        /// </summary>
        /// <remarks>
        /// Create a new operator.
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="newRepositoryDto"></param>
        /// <returns>ApiResponse of CreatedContent</returns>
        ApiResponse<CreatedContent> CreateOperatorWithHttpInfo (string owner, NewRepositoryDto newRepositoryDto);
        /// <summary>
        /// Create a new Operator package
        /// </summary>
        /// <remarks>
        /// Create a new operator package version
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="newOperatorPackage"></param>
        /// <returns>PackageDto</returns>
        PackageDto CreateOperatorPackage (string owner, string name, NewOperatorPackage newOperatorPackage);

        /// <summary>
        /// Create a new Operator package
        /// </summary>
        /// <remarks>
        /// Create a new operator package version
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="newOperatorPackage"></param>
        /// <returns>ApiResponse of PackageDto</returns>
        ApiResponse<PackageDto> CreateOperatorPackageWithHttpInfo (string owner, string name, NewOperatorPackage newOperatorPackage);
        /// <summary>
        /// Delete an Operator
        /// </summary>
        /// <remarks>
        /// Delete an operator (must have &#x60;admin&#x60; permission)
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <returns></returns>
        void DeleteOperator (string owner, string name);

        /// <summary>
        /// Delete an Operator
        /// </summary>
        /// <remarks>
        /// Delete an operator (must have &#x60;admin&#x60; permission)
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteOperatorWithHttpInfo (string owner, string name);
        /// <summary>
        /// Get an operator
        /// </summary>
        /// <remarks>
        /// Retrieve an operator by name
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <returns>RepositoryDto</returns>
        RepositoryDto GetOperator (string owner, string name);

        /// <summary>
        /// Get an operator
        /// </summary>
        /// <remarks>
        /// Retrieve an operator by name
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <returns>ApiResponse of RepositoryDto</returns>
        ApiResponse<RepositoryDto> GetOperatorWithHttpInfo (string owner, string name);
        /// <summary>
        /// Get an operator tag
        /// </summary>
        /// <remarks>
        /// Retrieve an operator tag by name and tag
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="tag"></param>
        /// <returns>OperatorPackage</returns>
        OperatorPackage GetOperatorByTag (string owner, string name, string tag);

        /// <summary>
        /// Get an operator tag
        /// </summary>
        /// <remarks>
        /// Retrieve an operator tag by name and tag
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="tag"></param>
        /// <returns>ApiResponse of OperatorPackage</returns>
        ApiResponse<OperatorPackage> GetOperatorByTagWithHttpInfo (string owner, string name, string tag);
        /// <summary>
        /// Get an operator tags
        /// </summary>
        /// <remarks>
        /// Retrieve an operator by name
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <returns>PackageListDto</returns>
        PackageListDto ListOperatorTags (string owner, string name);

        /// <summary>
        /// Get an operator tags
        /// </summary>
        /// <remarks>
        /// Retrieve an operator by name
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <returns>ApiResponse of PackageListDto</returns>
        ApiResponse<PackageListDto> ListOperatorTagsWithHttpInfo (string owner, string name);
        /// <summary>
        /// List operators
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number starting from 1 (optional, default to 1)</param>
        /// <param name="perPage">Number of items per page (optional, default to 25)</param>
        /// <param name="name">The account name (optional)</param>
        /// <param name="owner">Owner of the project (optional)</param>
        /// <param name="_public">Boolean check for public/private projects (optional)</param>
        /// <param name="keyword">A keyword to index the repository by (optional)</param>
        /// <returns>RepositoryListDto</returns>
        RepositoryListDto ListOperators (int page = 1, int perPage = 25, List<string> name = default, List<string> owner = default, bool? _public = default, List<string> keyword = default);

        /// <summary>
        /// List operators
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number starting from 1 (optional, default to 1)</param>
        /// <param name="perPage">Number of items per page (optional, default to 25)</param>
        /// <param name="name">The account name (optional)</param>
        /// <param name="owner">Owner of the project (optional)</param>
        /// <param name="_public">Boolean check for public/private projects (optional)</param>
        /// <param name="keyword">A keyword to index the repository by (optional)</param>
        /// <returns>ApiResponse of RepositoryListDto</returns>
        ApiResponse<RepositoryListDto> ListOperatorsWithHttpInfo (int page = 1, int perPage = 25, List<string> name = default, List<string> owner = default, bool? _public = default, List<string> keyword = default);
        /// <summary>
        /// Update an Operator
        /// </summary>
        /// <remarks>
        /// Update an operator (must have &#x60;contribute&#x60; permission)
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="updateRepositoryDto"></param>
        /// <returns>UpdateAccepted</returns>
        UpdateAccepted UpdateOperator (string owner, string name, UpdateRepositoryDto updateRepositoryDto);

        /// <summary>
        /// Update an Operator
        /// </summary>
        /// <remarks>
        /// Update an operator (must have &#x60;contribute&#x60; permission)
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="updateRepositoryDto"></param>
        /// <returns>ApiResponse of UpdateAccepted</returns>
        ApiResponse<UpdateAccepted> UpdateOperatorWithHttpInfo (string owner, string name, UpdateRepositoryDto updateRepositoryDto);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create an Operator
        /// </summary>
        /// <remarks>
        /// Create a new operator.
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="newRepositoryDto"></param>
        /// <returns>Task of CreatedContent</returns>
        System.Threading.Tasks.Task<CreatedContent> CreateOperatorAsync (string owner, NewRepositoryDto newRepositoryDto);

        /// <summary>
        /// Create an Operator
        /// </summary>
        /// <remarks>
        /// Create a new operator.
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="newRepositoryDto"></param>
        /// <returns>Task of ApiResponse (CreatedContent)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreatedContent>> CreateOperatorAsyncWithHttpInfo (string owner, NewRepositoryDto newRepositoryDto);
        /// <summary>
        /// Create a new Operator package
        /// </summary>
        /// <remarks>
        /// Create a new operator package version
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="newOperatorPackage"></param>
        /// <returns>Task of PackageDto</returns>
        System.Threading.Tasks.Task<PackageDto> CreateOperatorPackageAsync (string owner, string name, NewOperatorPackage newOperatorPackage);

        /// <summary>
        /// Create a new Operator package
        /// </summary>
        /// <remarks>
        /// Create a new operator package version
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="newOperatorPackage"></param>
        /// <returns>Task of ApiResponse (PackageDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<PackageDto>> CreateOperatorPackageAsyncWithHttpInfo (string owner, string name, NewOperatorPackage newOperatorPackage);
        /// <summary>
        /// Delete an Operator
        /// </summary>
        /// <remarks>
        /// Delete an operator (must have &#x60;admin&#x60; permission)
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteOperatorAsync (string owner, string name);

        /// <summary>
        /// Delete an Operator
        /// </summary>
        /// <remarks>
        /// Delete an operator (must have &#x60;admin&#x60; permission)
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteOperatorAsyncWithHttpInfo (string owner, string name);
        /// <summary>
        /// Get an operator
        /// </summary>
        /// <remarks>
        /// Retrieve an operator by name
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <returns>Task of RepositoryDto</returns>
        System.Threading.Tasks.Task<RepositoryDto> GetOperatorAsync (string owner, string name);

        /// <summary>
        /// Get an operator
        /// </summary>
        /// <remarks>
        /// Retrieve an operator by name
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <returns>Task of ApiResponse (RepositoryDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<RepositoryDto>> GetOperatorAsyncWithHttpInfo (string owner, string name);
        /// <summary>
        /// Get an operator tag
        /// </summary>
        /// <remarks>
        /// Retrieve an operator tag by name and tag
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="tag"></param>
        /// <returns>Task of OperatorPackage</returns>
        System.Threading.Tasks.Task<OperatorPackage> GetOperatorByTagAsync (string owner, string name, string tag);

        /// <summary>
        /// Get an operator tag
        /// </summary>
        /// <remarks>
        /// Retrieve an operator tag by name and tag
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="tag"></param>
        /// <returns>Task of ApiResponse (OperatorPackage)</returns>
        System.Threading.Tasks.Task<ApiResponse<OperatorPackage>> GetOperatorByTagAsyncWithHttpInfo (string owner, string name, string tag);
        /// <summary>
        /// Get an operator tags
        /// </summary>
        /// <remarks>
        /// Retrieve an operator by name
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <returns>Task of PackageListDto</returns>
        System.Threading.Tasks.Task<PackageListDto> ListOperatorTagsAsync (string owner, string name);

        /// <summary>
        /// Get an operator tags
        /// </summary>
        /// <remarks>
        /// Retrieve an operator by name
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <returns>Task of ApiResponse (PackageListDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<PackageListDto>> ListOperatorTagsAsyncWithHttpInfo (string owner, string name);
        /// <summary>
        /// List operators
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number starting from 1 (optional, default to 1)</param>
        /// <param name="perPage">Number of items per page (optional, default to 25)</param>
        /// <param name="name">The account name (optional)</param>
        /// <param name="owner">Owner of the project (optional)</param>
        /// <param name="_public">Boolean check for public/private projects (optional)</param>
        /// <param name="keyword">A keyword to index the repository by (optional)</param>
        /// <returns>Task of RepositoryListDto</returns>
        System.Threading.Tasks.Task<RepositoryListDto> ListOperatorsAsync (int page = 1, int perPage = 25, List<string> name = default, List<string> owner = default, bool? _public = default, List<string> keyword = default);

        /// <summary>
        /// List operators
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number starting from 1 (optional, default to 1)</param>
        /// <param name="perPage">Number of items per page (optional, default to 25)</param>
        /// <param name="name">The account name (optional)</param>
        /// <param name="owner">Owner of the project (optional)</param>
        /// <param name="_public">Boolean check for public/private projects (optional)</param>
        /// <param name="keyword">A keyword to index the repository by (optional)</param>
        /// <returns>Task of ApiResponse (RepositoryListDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<RepositoryListDto>> ListOperatorsAsyncWithHttpInfo (int page = 1, int perPage = 25, List<string> name = default, List<string> owner = default, bool? _public = default, List<string> keyword = default);
        /// <summary>
        /// Update an Operator
        /// </summary>
        /// <remarks>
        /// Update an operator (must have &#x60;contribute&#x60; permission)
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="updateRepositoryDto"></param>
        /// <returns>Task of UpdateAccepted</returns>
        System.Threading.Tasks.Task<UpdateAccepted> UpdateOperatorAsync (string owner, string name, UpdateRepositoryDto updateRepositoryDto);

        /// <summary>
        /// Update an Operator
        /// </summary>
        /// <remarks>
        /// Update an operator (must have &#x60;contribute&#x60; permission)
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="updateRepositoryDto"></param>
        /// <returns>Task of ApiResponse (UpdateAccepted)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateAccepted>> UpdateOperatorAsyncWithHttpInfo (string owner, string name, UpdateRepositoryDto updateRepositoryDto);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class OperatorsApi : IOperatorsApi
    {
        private PollinationSDK.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="OperatorsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OperatorsApi(String basePath)
        {
            this.Configuration = new PollinationSDK.Client.Configuration { BasePath = basePath };

            ExceptionFactory = PollinationSDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OperatorsApi"/> class
        /// </summary>
        /// <returns></returns>
        public OperatorsApi()
        {
            this.Configuration = PollinationSDK.Client.Configuration.Default;

            ExceptionFactory = PollinationSDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OperatorsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public OperatorsApi(PollinationSDK.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = PollinationSDK.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = PollinationSDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

      
        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public PollinationSDK.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public PollinationSDK.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create an Operator Create a new operator.
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="newRepositoryDto"></param>
        /// <returns>CreatedContent</returns>
        public CreatedContent CreateOperator (string owner, NewRepositoryDto newRepositoryDto)
        {
             ApiResponse<CreatedContent> localVarResponse = CreateOperatorWithHttpInfo(owner, newRepositoryDto);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create an Operator Create a new operator.
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="newRepositoryDto"></param>
        /// <returns>ApiResponse of CreatedContent</returns>
        public ApiResponse<CreatedContent> CreateOperatorWithHttpInfo (string owner, NewRepositoryDto newRepositoryDto)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling OperatorsApi->CreateOperator");
            // verify the required parameter 'newRepositoryDto' is set
            if (newRepositoryDto == null)
                throw new ApiException(400, "Missing required parameter 'newRepositoryDto' when calling OperatorsApi->CreateOperator");

            var localVarPath = "/operators/{owner}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (newRepositoryDto != null && newRepositoryDto.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(newRepositoryDto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = newRepositoryDto; // byte array
            }

            // authentication (Compulsory Auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateOperator", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreatedContent>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CreatedContent) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreatedContent)));
        }

        /// <summary>
        /// Create an Operator Create a new operator.
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="newRepositoryDto"></param>
        /// <returns>Task of CreatedContent</returns>
        public async System.Threading.Tasks.Task<CreatedContent> CreateOperatorAsync (string owner, NewRepositoryDto newRepositoryDto)
        {
             ApiResponse<CreatedContent> localVarResponse = await CreateOperatorAsyncWithHttpInfo(owner, newRepositoryDto);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create an Operator Create a new operator.
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="newRepositoryDto"></param>
        /// <returns>Task of ApiResponse (CreatedContent)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CreatedContent>> CreateOperatorAsyncWithHttpInfo (string owner, NewRepositoryDto newRepositoryDto)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling OperatorsApi->CreateOperator");
            // verify the required parameter 'newRepositoryDto' is set
            if (newRepositoryDto == null)
                throw new ApiException(400, "Missing required parameter 'newRepositoryDto' when calling OperatorsApi->CreateOperator");

            var localVarPath = "/operators/{owner}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (newRepositoryDto != null && newRepositoryDto.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(newRepositoryDto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = newRepositoryDto; // byte array
            }

            // authentication (Compulsory Auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateOperator", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreatedContent>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CreatedContent) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreatedContent)));
        }

        /// <summary>
        /// Create a new Operator package Create a new operator package version
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="newOperatorPackage"></param>
        /// <returns>PackageDto</returns>
        public PackageDto CreateOperatorPackage (string owner, string name, NewOperatorPackage newOperatorPackage)
        {
             ApiResponse<PackageDto> localVarResponse = CreateOperatorPackageWithHttpInfo(owner, name, newOperatorPackage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new Operator package Create a new operator package version
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="newOperatorPackage"></param>
        /// <returns>ApiResponse of PackageDto</returns>
        public ApiResponse<PackageDto> CreateOperatorPackageWithHttpInfo (string owner, string name, NewOperatorPackage newOperatorPackage)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling OperatorsApi->CreateOperatorPackage");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling OperatorsApi->CreateOperatorPackage");
            // verify the required parameter 'newOperatorPackage' is set
            if (newOperatorPackage == null)
                throw new ApiException(400, "Missing required parameter 'newOperatorPackage' when calling OperatorsApi->CreateOperatorPackage");

            var localVarPath = "/operators/{owner}/{name}/tags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (newOperatorPackage != null && newOperatorPackage.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(newOperatorPackage); // http body (model) parameter
            }
            else
            {
                localVarPostBody = newOperatorPackage; // byte array
            }

            // authentication (Compulsory Auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateOperatorPackage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PackageDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PackageDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PackageDto)));
        }

        /// <summary>
        /// Create a new Operator package Create a new operator package version
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="newOperatorPackage"></param>
        /// <returns>Task of PackageDto</returns>
        public async System.Threading.Tasks.Task<PackageDto> CreateOperatorPackageAsync (string owner, string name, NewOperatorPackage newOperatorPackage)
        {
             ApiResponse<PackageDto> localVarResponse = await CreateOperatorPackageAsyncWithHttpInfo(owner, name, newOperatorPackage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new Operator package Create a new operator package version
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="newOperatorPackage"></param>
        /// <returns>Task of ApiResponse (PackageDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PackageDto>> CreateOperatorPackageAsyncWithHttpInfo (string owner, string name, NewOperatorPackage newOperatorPackage)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling OperatorsApi->CreateOperatorPackage");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling OperatorsApi->CreateOperatorPackage");
            // verify the required parameter 'newOperatorPackage' is set
            if (newOperatorPackage == null)
                throw new ApiException(400, "Missing required parameter 'newOperatorPackage' when calling OperatorsApi->CreateOperatorPackage");

            var localVarPath = "/operators/{owner}/{name}/tags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (newOperatorPackage != null && newOperatorPackage.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(newOperatorPackage); // http body (model) parameter
            }
            else
            {
                localVarPostBody = newOperatorPackage; // byte array
            }

            // authentication (Compulsory Auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateOperatorPackage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PackageDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PackageDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PackageDto)));
        }

        /// <summary>
        /// Delete an Operator Delete an operator (must have &#x60;admin&#x60; permission)
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <returns></returns>
        public void DeleteOperator (string owner, string name)
        {
             DeleteOperatorWithHttpInfo(owner, name);
        }

        /// <summary>
        /// Delete an Operator Delete an operator (must have &#x60;admin&#x60; permission)
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteOperatorWithHttpInfo (string owner, string name)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling OperatorsApi->DeleteOperator");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling OperatorsApi->DeleteOperator");

            var localVarPath = "/operators/{owner}/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter

            // authentication (Compulsory Auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteOperator", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete an Operator Delete an operator (must have &#x60;admin&#x60; permission)
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteOperatorAsync (string owner, string name)
        {
             await DeleteOperatorAsyncWithHttpInfo(owner, name);

        }

        /// <summary>
        /// Delete an Operator Delete an operator (must have &#x60;admin&#x60; permission)
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteOperatorAsyncWithHttpInfo (string owner, string name)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling OperatorsApi->DeleteOperator");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling OperatorsApi->DeleteOperator");

            var localVarPath = "/operators/{owner}/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter

            // authentication (Compulsory Auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteOperator", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Get an operator Retrieve an operator by name
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <returns>RepositoryDto</returns>
        public RepositoryDto GetOperator (string owner, string name)
        {
             ApiResponse<RepositoryDto> localVarResponse = GetOperatorWithHttpInfo(owner, name);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get an operator Retrieve an operator by name
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <returns>ApiResponse of RepositoryDto</returns>
        public ApiResponse<RepositoryDto> GetOperatorWithHttpInfo (string owner, string name)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling OperatorsApi->GetOperator");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling OperatorsApi->GetOperator");

            var localVarPath = "/operators/{owner}/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter

            // authentication (Optional Auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOperator", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RepositoryDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RepositoryDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RepositoryDto)));
        }

        /// <summary>
        /// Get an operator Retrieve an operator by name
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <returns>Task of RepositoryDto</returns>
        public async System.Threading.Tasks.Task<RepositoryDto> GetOperatorAsync (string owner, string name)
        {
             ApiResponse<RepositoryDto> localVarResponse = await GetOperatorAsyncWithHttpInfo(owner, name);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get an operator Retrieve an operator by name
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <returns>Task of ApiResponse (RepositoryDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RepositoryDto>> GetOperatorAsyncWithHttpInfo (string owner, string name)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling OperatorsApi->GetOperator");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling OperatorsApi->GetOperator");

            var localVarPath = "/operators/{owner}/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter

            // authentication (Optional Auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOperator", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RepositoryDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RepositoryDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RepositoryDto)));
        }

        /// <summary>
        /// Get an operator tag Retrieve an operator tag by name and tag
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="tag"></param>
        /// <returns>OperatorPackage</returns>
        public OperatorPackage GetOperatorByTag (string owner, string name, string tag)
        {
             ApiResponse<OperatorPackage> localVarResponse = GetOperatorByTagWithHttpInfo(owner, name, tag);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get an operator tag Retrieve an operator tag by name and tag
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="tag"></param>
        /// <returns>ApiResponse of OperatorPackage</returns>
        public ApiResponse<OperatorPackage> GetOperatorByTagWithHttpInfo (string owner, string name, string tag)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling OperatorsApi->GetOperatorByTag");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling OperatorsApi->GetOperatorByTag");
            // verify the required parameter 'tag' is set
            if (tag == null)
                throw new ApiException(400, "Missing required parameter 'tag' when calling OperatorsApi->GetOperatorByTag");

            var localVarPath = "/operators/{owner}/{name}/tags/{tag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (tag != null) localVarPathParams.Add("tag", this.Configuration.ApiClient.ParameterToString(tag)); // path parameter

            // authentication (Optional Auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOperatorByTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OperatorPackage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OperatorPackage) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OperatorPackage)));
        }

        /// <summary>
        /// Get an operator tag Retrieve an operator tag by name and tag
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="tag"></param>
        /// <returns>Task of OperatorPackage</returns>
        public async System.Threading.Tasks.Task<OperatorPackage> GetOperatorByTagAsync (string owner, string name, string tag)
        {
             ApiResponse<OperatorPackage> localVarResponse = await GetOperatorByTagAsyncWithHttpInfo(owner, name, tag);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get an operator tag Retrieve an operator tag by name and tag
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="tag"></param>
        /// <returns>Task of ApiResponse (OperatorPackage)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OperatorPackage>> GetOperatorByTagAsyncWithHttpInfo (string owner, string name, string tag)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling OperatorsApi->GetOperatorByTag");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling OperatorsApi->GetOperatorByTag");
            // verify the required parameter 'tag' is set
            if (tag == null)
                throw new ApiException(400, "Missing required parameter 'tag' when calling OperatorsApi->GetOperatorByTag");

            var localVarPath = "/operators/{owner}/{name}/tags/{tag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (tag != null) localVarPathParams.Add("tag", this.Configuration.ApiClient.ParameterToString(tag)); // path parameter

            // authentication (Optional Auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOperatorByTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OperatorPackage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OperatorPackage) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OperatorPackage)));
        }

        /// <summary>
        /// Get an operator tags Retrieve an operator by name
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <returns>PackageListDto</returns>
        public PackageListDto ListOperatorTags (string owner, string name)
        {
             ApiResponse<PackageListDto> localVarResponse = ListOperatorTagsWithHttpInfo(owner, name);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get an operator tags Retrieve an operator by name
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <returns>ApiResponse of PackageListDto</returns>
        public ApiResponse<PackageListDto> ListOperatorTagsWithHttpInfo (string owner, string name)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling OperatorsApi->ListOperatorTags");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling OperatorsApi->ListOperatorTags");

            var localVarPath = "/operators/{owner}/{name}/tags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter

            // authentication (Optional Auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListOperatorTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PackageListDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PackageListDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PackageListDto)));
        }

        /// <summary>
        /// Get an operator tags Retrieve an operator by name
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <returns>Task of PackageListDto</returns>
        public async System.Threading.Tasks.Task<PackageListDto> ListOperatorTagsAsync (string owner, string name)
        {
             ApiResponse<PackageListDto> localVarResponse = await ListOperatorTagsAsyncWithHttpInfo(owner, name);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get an operator tags Retrieve an operator by name
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <returns>Task of ApiResponse (PackageListDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PackageListDto>> ListOperatorTagsAsyncWithHttpInfo (string owner, string name)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling OperatorsApi->ListOperatorTags");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling OperatorsApi->ListOperatorTags");

            var localVarPath = "/operators/{owner}/{name}/tags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter

            // authentication (Optional Auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListOperatorTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PackageListDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PackageListDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PackageListDto)));
        }

        /// <summary>
        /// List operators 
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number starting from 1 (optional, default to 1)</param>
        /// <param name="perPage">Number of items per page (optional, default to 25)</param>
        /// <param name="name">The account name (optional)</param>
        /// <param name="owner">Owner of the project (optional)</param>
        /// <param name="_public">Boolean check for public/private projects (optional)</param>
        /// <param name="keyword">A keyword to index the repository by (optional)</param>
        /// <returns>RepositoryListDto</returns>
        public RepositoryListDto ListOperators (int page = 1, int perPage = 25, List<string> name = default, List<string> owner = default, bool? _public = default, List<string> keyword = default)
        {
             ApiResponse<RepositoryListDto> localVarResponse = ListOperatorsWithHttpInfo(page, perPage, name, owner, _public, keyword);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List operators 
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number starting from 1 (optional, default to 1)</param>
        /// <param name="perPage">Number of items per page (optional, default to 25)</param>
        /// <param name="name">The account name (optional)</param>
        /// <param name="owner">Owner of the project (optional)</param>
        /// <param name="_public">Boolean check for public/private projects (optional)</param>
        /// <param name="keyword">A keyword to index the repository by (optional)</param>
        /// <returns>ApiResponse of RepositoryListDto</returns>
        public ApiResponse<RepositoryListDto> ListOperatorsWithHttpInfo (int page = 1, int perPage = 25, List<string> name = default, List<string> owner = default, bool? _public = default, List<string> keyword = default)
        {

            var localVarPath = "/operators";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per-page", perPage)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "name", name)); // query parameter
            if (owner != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "owner", owner)); // query parameter
            if (_public != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "public", _public)); // query parameter
            if (keyword != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "keyword", keyword)); // query parameter

            // authentication (Optional Auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListOperators", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RepositoryListDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RepositoryListDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RepositoryListDto)));
        }

        /// <summary>
        /// List operators 
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number starting from 1 (optional, default to 1)</param>
        /// <param name="perPage">Number of items per page (optional, default to 25)</param>
        /// <param name="name">The account name (optional)</param>
        /// <param name="owner">Owner of the project (optional)</param>
        /// <param name="_public">Boolean check for public/private projects (optional)</param>
        /// <param name="keyword">A keyword to index the repository by (optional)</param>
        /// <returns>Task of RepositoryListDto</returns>
        public async System.Threading.Tasks.Task<RepositoryListDto> ListOperatorsAsync (int page = 1, int perPage = 25, List<string> name = default, List<string> owner = default, bool? _public = default, List<string> keyword = default)
        {
             ApiResponse<RepositoryListDto> localVarResponse = await ListOperatorsAsyncWithHttpInfo(page, perPage, name, owner, _public, keyword);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List operators 
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number starting from 1 (optional, default to 1)</param>
        /// <param name="perPage">Number of items per page (optional, default to 25)</param>
        /// <param name="name">The account name (optional)</param>
        /// <param name="owner">Owner of the project (optional)</param>
        /// <param name="_public">Boolean check for public/private projects (optional)</param>
        /// <param name="keyword">A keyword to index the repository by (optional)</param>
        /// <returns>Task of ApiResponse (RepositoryListDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RepositoryListDto>> ListOperatorsAsyncWithHttpInfo (int page = 1, int perPage = 25, List<string> name = default, List<string> owner = default, bool? _public = default, List<string> keyword = default)
        {

            var localVarPath = "/operators";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per-page", perPage)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "name", name)); // query parameter
            if (owner != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "owner", owner)); // query parameter
            if (_public != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "public", _public)); // query parameter
            if (keyword != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "keyword", keyword)); // query parameter

            // authentication (Optional Auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListOperators", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RepositoryListDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RepositoryListDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RepositoryListDto)));
        }

        /// <summary>
        /// Update an Operator Update an operator (must have &#x60;contribute&#x60; permission)
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="updateRepositoryDto"></param>
        /// <returns>UpdateAccepted</returns>
        public UpdateAccepted UpdateOperator (string owner, string name, UpdateRepositoryDto updateRepositoryDto)
        {
             ApiResponse<UpdateAccepted> localVarResponse = UpdateOperatorWithHttpInfo(owner, name, updateRepositoryDto);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update an Operator Update an operator (must have &#x60;contribute&#x60; permission)
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="updateRepositoryDto"></param>
        /// <returns>ApiResponse of UpdateAccepted</returns>
        public ApiResponse<UpdateAccepted> UpdateOperatorWithHttpInfo (string owner, string name, UpdateRepositoryDto updateRepositoryDto)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling OperatorsApi->UpdateOperator");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling OperatorsApi->UpdateOperator");
            // verify the required parameter 'updateRepositoryDto' is set
            if (updateRepositoryDto == null)
                throw new ApiException(400, "Missing required parameter 'updateRepositoryDto' when calling OperatorsApi->UpdateOperator");

            var localVarPath = "/operators/{owner}/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (updateRepositoryDto != null && updateRepositoryDto.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateRepositoryDto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateRepositoryDto; // byte array
            }

            // authentication (Compulsory Auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateOperator", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdateAccepted>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UpdateAccepted) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdateAccepted)));
        }

        /// <summary>
        /// Update an Operator Update an operator (must have &#x60;contribute&#x60; permission)
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="updateRepositoryDto"></param>
        /// <returns>Task of UpdateAccepted</returns>
        public async System.Threading.Tasks.Task<UpdateAccepted> UpdateOperatorAsync (string owner, string name, UpdateRepositoryDto updateRepositoryDto)
        {
             ApiResponse<UpdateAccepted> localVarResponse = await UpdateOperatorAsyncWithHttpInfo(owner, name, updateRepositoryDto);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update an Operator Update an operator (must have &#x60;contribute&#x60; permission)
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="updateRepositoryDto"></param>
        /// <returns>Task of ApiResponse (UpdateAccepted)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UpdateAccepted>> UpdateOperatorAsyncWithHttpInfo (string owner, string name, UpdateRepositoryDto updateRepositoryDto)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling OperatorsApi->UpdateOperator");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling OperatorsApi->UpdateOperator");
            // verify the required parameter 'updateRepositoryDto' is set
            if (updateRepositoryDto == null)
                throw new ApiException(400, "Missing required parameter 'updateRepositoryDto' when calling OperatorsApi->UpdateOperator");

            var localVarPath = "/operators/{owner}/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (updateRepositoryDto != null && updateRepositoryDto.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateRepositoryDto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateRepositoryDto; // byte array
            }

            // authentication (Compulsory Auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateOperator", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdateAccepted>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UpdateAccepted) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdateAccepted)));
        }

    }
}
