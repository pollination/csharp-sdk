/* 
 * Pollination Server
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.7.6
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using PollinationSDK.Client;
using PollinationSDK.Model;

namespace PollinationSDK.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRegistriesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get Package
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="type"></param>
        /// <param name="name"></param>
        /// <param name="digest"></param>
        /// <returns>object</returns>
        object GetPackage (string owner, string type, string name, string digest);

        /// <summary>
        /// Get Package
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="type"></param>
        /// <param name="name"></param>
        /// <param name="digest"></param>
        /// <returns>ApiResponse of object</returns>
        ApiResponse<object> GetPackageWithHttpInfo (string owner, string type, string name, string digest);
        /// <summary>
        /// Get Registry Index
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <returns>RepositoryIndex</returns>
        RepositoryIndex GetRegistryIndex (string owner);

        /// <summary>
        /// Get Registry Index
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <returns>ApiResponse of RepositoryIndex</returns>
        ApiResponse<RepositoryIndex> GetRegistryIndexWithHttpInfo (string owner);
        /// <summary>
        /// Push an Operator to the registry
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="package"></param>
        /// <returns>object</returns>
        object PostOperator (string owner, System.IO.Stream package);

        /// <summary>
        /// Push an Operator to the registry
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="package"></param>
        /// <returns>ApiResponse of object</returns>
        ApiResponse<object> PostOperatorWithHttpInfo (string owner, System.IO.Stream package);
        /// <summary>
        /// Push an Recipe to the registry
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="package"></param>
        /// <param name="authorization"> (optional)</param>
        /// <returns>object</returns>
        object PostRecipe (string owner, System.IO.Stream package, string authorization = default);

        /// <summary>
        /// Push an Recipe to the registry
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="package"></param>
        /// <param name="authorization"> (optional)</param>
        /// <returns>ApiResponse of object</returns>
        ApiResponse<object> PostRecipeWithHttpInfo (string owner, System.IO.Stream package, string authorization = default);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get Package
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="type"></param>
        /// <param name="name"></param>
        /// <param name="digest"></param>
        /// <returns>Task of object</returns>
        System.Threading.Tasks.Task<object> GetPackageAsync (string owner, string type, string name, string digest);

        /// <summary>
        /// Get Package
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="type"></param>
        /// <param name="name"></param>
        /// <param name="digest"></param>
        /// <returns>Task of ApiResponse (object)</returns>
        System.Threading.Tasks.Task<ApiResponse<object>> GetPackageAsyncWithHttpInfo (string owner, string type, string name, string digest);
        /// <summary>
        /// Get Registry Index
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <returns>Task of RepositoryIndex</returns>
        System.Threading.Tasks.Task<RepositoryIndex> GetRegistryIndexAsync (string owner);

        /// <summary>
        /// Get Registry Index
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <returns>Task of ApiResponse (RepositoryIndex)</returns>
        System.Threading.Tasks.Task<ApiResponse<RepositoryIndex>> GetRegistryIndexAsyncWithHttpInfo (string owner);
        /// <summary>
        /// Push an Operator to the registry
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="package"></param>
        /// <returns>Task of object</returns>
        System.Threading.Tasks.Task<object> PostOperatorAsync (string owner, System.IO.Stream package);

        /// <summary>
        /// Push an Operator to the registry
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="package"></param>
        /// <returns>Task of ApiResponse (object)</returns>
        System.Threading.Tasks.Task<ApiResponse<object>> PostOperatorAsyncWithHttpInfo (string owner, System.IO.Stream package);
        /// <summary>
        /// Push an Recipe to the registry
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="package"></param>
        /// <param name="authorization"> (optional)</param>
        /// <returns>Task of object</returns>
        System.Threading.Tasks.Task<object> PostRecipeAsync (string owner, System.IO.Stream package, string authorization = default);

        /// <summary>
        /// Push an Recipe to the registry
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="package"></param>
        /// <param name="authorization"> (optional)</param>
        /// <returns>Task of ApiResponse (object)</returns>
        System.Threading.Tasks.Task<ApiResponse<object>> PostRecipeAsyncWithHttpInfo (string owner, System.IO.Stream package, string authorization = default);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class RegistriesApi : IRegistriesApi
    {
        private PollinationSDK.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="RegistriesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RegistriesApi(String basePath)
        {
            this.Configuration = new PollinationSDK.Client.Configuration { BasePath = basePath };

            ExceptionFactory = PollinationSDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RegistriesApi"/> class
        /// </summary>
        /// <returns></returns>
        public RegistriesApi()
        {
            this.Configuration = PollinationSDK.Client.Configuration.Default;

            ExceptionFactory = PollinationSDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RegistriesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public RegistriesApi(PollinationSDK.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = PollinationSDK.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = PollinationSDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

      
        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public PollinationSDK.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public PollinationSDK.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get Package 
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="type"></param>
        /// <param name="name"></param>
        /// <param name="digest"></param>
        /// <returns>object</returns>
        public object GetPackage (string owner, string type, string name, string digest)
        {
             ApiResponse<object> localVarResponse = GetPackageWithHttpInfo(owner, type, name, digest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Package 
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="type"></param>
        /// <param name="name"></param>
        /// <param name="digest"></param>
        /// <returns>ApiResponse of object</returns>
        public ApiResponse<object> GetPackageWithHttpInfo (string owner, string type, string name, string digest)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RegistriesApi->GetPackage");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling RegistriesApi->GetPackage");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling RegistriesApi->GetPackage");
            // verify the required parameter 'digest' is set
            if (digest == null)
                throw new ApiException(400, "Missing required parameter 'digest' when calling RegistriesApi->GetPackage");

            var localVarPath = "/registries/{owner}/{type}/{name}/{digest}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/x-tar"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (type != null) localVarPathParams.Add("type", this.Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (digest != null) localVarPathParams.Add("digest", this.Configuration.ApiClient.ParameterToString(digest)); // path parameter

            // authentication (Optional Auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPackage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(object)));
        }

        /// <summary>
        /// Get Package 
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="type"></param>
        /// <param name="name"></param>
        /// <param name="digest"></param>
        /// <returns>Task of object</returns>
        public async System.Threading.Tasks.Task<object> GetPackageAsync (string owner, string type, string name, string digest)
        {
             ApiResponse<object> localVarResponse = await GetPackageAsyncWithHttpInfo(owner, type, name, digest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Package 
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="type"></param>
        /// <param name="name"></param>
        /// <param name="digest"></param>
        /// <returns>Task of ApiResponse (object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<object>> GetPackageAsyncWithHttpInfo (string owner, string type, string name, string digest)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RegistriesApi->GetPackage");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling RegistriesApi->GetPackage");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling RegistriesApi->GetPackage");
            // verify the required parameter 'digest' is set
            if (digest == null)
                throw new ApiException(400, "Missing required parameter 'digest' when calling RegistriesApi->GetPackage");

            var localVarPath = "/registries/{owner}/{type}/{name}/{digest}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/x-tar"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (type != null) localVarPathParams.Add("type", this.Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (digest != null) localVarPathParams.Add("digest", this.Configuration.ApiClient.ParameterToString(digest)); // path parameter

            // authentication (Optional Auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPackage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(object)));
        }

        /// <summary>
        /// Get Registry Index 
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <returns>RepositoryIndex</returns>
        public RepositoryIndex GetRegistryIndex (string owner)
        {
             ApiResponse<RepositoryIndex> localVarResponse = GetRegistryIndexWithHttpInfo(owner);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Registry Index 
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <returns>ApiResponse of RepositoryIndex</returns>
        public ApiResponse<RepositoryIndex> GetRegistryIndexWithHttpInfo (string owner)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RegistriesApi->GetRegistryIndex");

            var localVarPath = "/registries/{owner}/index.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter

            // authentication (Optional Auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRegistryIndex", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RepositoryIndex>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RepositoryIndex) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RepositoryIndex)));
        }

        /// <summary>
        /// Get Registry Index 
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <returns>Task of RepositoryIndex</returns>
        public async System.Threading.Tasks.Task<RepositoryIndex> GetRegistryIndexAsync (string owner)
        {
             ApiResponse<RepositoryIndex> localVarResponse = await GetRegistryIndexAsyncWithHttpInfo(owner);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Registry Index 
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <returns>Task of ApiResponse (RepositoryIndex)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RepositoryIndex>> GetRegistryIndexAsyncWithHttpInfo (string owner)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RegistriesApi->GetRegistryIndex");

            var localVarPath = "/registries/{owner}/index.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter

            // authentication (Optional Auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRegistryIndex", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RepositoryIndex>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RepositoryIndex) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RepositoryIndex)));
        }

        /// <summary>
        /// Push an Operator to the registry 
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="package"></param>
        /// <returns>object</returns>
        public object PostOperator (string owner, System.IO.Stream package)
        {
             ApiResponse<object> localVarResponse = PostOperatorWithHttpInfo(owner, package);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Push an Operator to the registry 
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="package"></param>
        /// <returns>ApiResponse of object</returns>
        public ApiResponse<object> PostOperatorWithHttpInfo (string owner, System.IO.Stream package)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RegistriesApi->PostOperator");
            // verify the required parameter 'package' is set
            if (package == null)
                throw new ApiException(400, "Missing required parameter 'package' when calling RegistriesApi->PostOperator");

            var localVarPath = "/registries/{owner}/operators";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (package != null) localVarFileParams.Add("package", this.Configuration.ApiClient.ParameterToFile("package", package));

            // authentication (Compulsory Auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostOperator", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(object)));
        }

        /// <summary>
        /// Push an Operator to the registry 
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="package"></param>
        /// <returns>Task of object</returns>
        public async System.Threading.Tasks.Task<object> PostOperatorAsync (string owner, System.IO.Stream package)
        {
             ApiResponse<object> localVarResponse = await PostOperatorAsyncWithHttpInfo(owner, package);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Push an Operator to the registry 
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="package"></param>
        /// <returns>Task of ApiResponse (object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<object>> PostOperatorAsyncWithHttpInfo (string owner, System.IO.Stream package)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RegistriesApi->PostOperator");
            // verify the required parameter 'package' is set
            if (package == null)
                throw new ApiException(400, "Missing required parameter 'package' when calling RegistriesApi->PostOperator");

            var localVarPath = "/registries/{owner}/operators";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (package != null) localVarFileParams.Add("package", this.Configuration.ApiClient.ParameterToFile("package", package));

            // authentication (Compulsory Auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostOperator", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(object)));
        }

        /// <summary>
        /// Push an Recipe to the registry 
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="package"></param>
        /// <param name="authorization"> (optional)</param>
        /// <returns>object</returns>
        public object PostRecipe (string owner, System.IO.Stream package, string authorization = default)
        {
             ApiResponse<object> localVarResponse = PostRecipeWithHttpInfo(owner, package, authorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Push an Recipe to the registry 
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="package"></param>
        /// <param name="authorization"> (optional)</param>
        /// <returns>ApiResponse of object</returns>
        public ApiResponse<object> PostRecipeWithHttpInfo (string owner, System.IO.Stream package, string authorization = default)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RegistriesApi->PostRecipe");
            // verify the required parameter 'package' is set
            if (package == null)
                throw new ApiException(400, "Missing required parameter 'package' when calling RegistriesApi->PostRecipe");

            var localVarPath = "/registries/{owner}/recipes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (package != null) localVarFileParams.Add("package", this.Configuration.ApiClient.ParameterToFile("package", package));

            // authentication (Compulsory Auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostRecipe", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(object)));
        }

        /// <summary>
        /// Push an Recipe to the registry 
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="package"></param>
        /// <param name="authorization"> (optional)</param>
        /// <returns>Task of object</returns>
        public async System.Threading.Tasks.Task<object> PostRecipeAsync (string owner, System.IO.Stream package, string authorization = default)
        {
             ApiResponse<object> localVarResponse = await PostRecipeAsyncWithHttpInfo(owner, package, authorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Push an Recipe to the registry 
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="package"></param>
        /// <param name="authorization"> (optional)</param>
        /// <returns>Task of ApiResponse (object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<object>> PostRecipeAsyncWithHttpInfo (string owner, System.IO.Stream package, string authorization = default)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RegistriesApi->PostRecipe");
            // verify the required parameter 'package' is set
            if (package == null)
                throw new ApiException(400, "Missing required parameter 'package' when calling RegistriesApi->PostRecipe");

            var localVarPath = "/registries/{owner}/recipes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (package != null) localVarFileParams.Add("package", this.Configuration.ApiClient.ParameterToFile("package", package));

            // authentication (Compulsory Auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostRecipe", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(object)));
        }

    }
}
