/* 
 * pollination-server
 *
 * Pollination Server OpenAPI Definition
 *
 * The version of the OpenAPI document: 0.43.0
 * Contact: info@pollination.cloud
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using PollinationSDK.Client;
using PollinationSDK.Model;

namespace PollinationSDK.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IApplicationsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create an Application
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="applicationCreate"></param>
        /// <returns>Application</returns>
        Application CreateApplication (string owner, ApplicationCreate applicationCreate);

        /// <summary>
        /// Create an Application
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="applicationCreate"></param>
        /// <returns>ApiResponse of Application</returns>
        ApiResponse<Application> CreateApplicationWithHttpInfo (string owner, ApplicationCreate applicationCreate);
        /// <summary>
        /// Delete a Application
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="slug"></param>
        /// <returns></returns>
        void DeleteApplication (string owner, string slug);

        /// <summary>
        /// Delete a Application
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="slug"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteApplicationWithHttpInfo (string owner, string slug);
        /// <summary>
        /// Remove a Application permissions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="slug"></param>
        /// <param name="applicationPolicySubject"></param>
        /// <returns></returns>
        void DeleteApplicationOrgPermission (string owner, string slug, ApplicationPolicySubject applicationPolicySubject);

        /// <summary>
        /// Remove a Application permissions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="slug"></param>
        /// <param name="applicationPolicySubject"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteApplicationOrgPermissionWithHttpInfo (string owner, string slug, ApplicationPolicySubject applicationPolicySubject);
        /// <summary>
        /// Remove a Application version
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="slug"></param>
        /// <param name="tag"></param>
        /// <returns></returns>
        void DeleteApplicationVersion (string owner, string slug, string tag);

        /// <summary>
        /// Remove a Application version
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="slug"></param>
        /// <param name="tag"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteApplicationVersionWithHttpInfo (string owner, string slug, string tag);
        /// <summary>
        /// Get an application
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="slug"></param>
        /// <returns>Application</returns>
        Application GetApplication (string owner, string slug);

        /// <summary>
        /// Get an application
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="slug"></param>
        /// <returns>ApiResponse of Application</returns>
        ApiResponse<Application> GetApplicationWithHttpInfo (string owner, string slug);
        /// <summary>
        /// Get application access permissions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="slug"></param>
        /// <param name="page">Page number starting from 1 (optional, default to 1)</param>
        /// <param name="perPage">Number of items per page (optional, default to 25)</param>
        /// <param name="subjectType">The type of access policy subject (optional)</param>
        /// <param name="permission">An access policy permission string (optional)</param>
        /// <returns>ApplicationAccessPolicyList</returns>
        ApplicationAccessPolicyList GetApplicationAccessPermissions (string owner, string slug, int? page = default, int? perPage = default, List<string> subjectType = default, List<string> permission = default);

        /// <summary>
        /// Get application access permissions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="slug"></param>
        /// <param name="page">Page number starting from 1 (optional, default to 1)</param>
        /// <param name="perPage">Number of items per page (optional, default to 25)</param>
        /// <param name="subjectType">The type of access policy subject (optional)</param>
        /// <param name="permission">An access policy permission string (optional)</param>
        /// <returns>ApiResponse of ApplicationAccessPolicyList</returns>
        ApiResponse<ApplicationAccessPolicyList> GetApplicationAccessPermissionsWithHttpInfo (string owner, string slug, int? page = default, int? perPage = default, List<string> subjectType = default, List<string> permission = default);
        /// <summary>
        /// Get application deployment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="slug"></param>
        /// <returns>ApplicationDeployment</returns>
        ApplicationDeployment GetApplicationDeployment (string owner, string slug);

        /// <summary>
        /// Get application deployment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="slug"></param>
        /// <returns>ApiResponse of ApplicationDeployment</returns>
        ApiResponse<ApplicationDeployment> GetApplicationDeploymentWithHttpInfo (string owner, string slug);
        /// <summary>
        /// Get application versions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="slug"></param>
        /// <param name="page">Page number starting from 1 (optional, default to 1)</param>
        /// <param name="perPage">Number of items per page (optional, default to 25)</param>
        /// <returns>ApplicationVersionList</returns>
        ApplicationVersionList GetApplicationVersions (string owner, string slug, int? page = default, int? perPage = default);

        /// <summary>
        /// Get application versions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="slug"></param>
        /// <param name="page">Page number starting from 1 (optional, default to 1)</param>
        /// <param name="perPage">Number of items per page (optional, default to 25)</param>
        /// <returns>ApiResponse of ApplicationVersionList</returns>
        ApiResponse<ApplicationVersionList> GetApplicationVersionsWithHttpInfo (string owner, string slug, int? page = default, int? perPage = default);
        /// <summary>
        /// List Applications
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="search">Search string to find applications (optional)</param>
        /// <param name="ids">The ID of a application to search for (optional)</param>
        /// <param name="names">The name of the application (optional)</param>
        /// <param name="owner">Owner of the application (optional)</param>
        /// <param name="_public">Boolean check for public/private applications (optional)</param>
        /// <param name="permissions">Filter by permission on given resource (optional)</param>
        /// <param name="keywords">Filter by keywords on given resource (optional)</param>
        /// <param name="sortBy">Key to sort the list by (optional)</param>
        /// <param name="sortOrder">The order to sort the list (optional)</param>
        /// <param name="page">Page number starting from 1 (optional, default to 1)</param>
        /// <param name="perPage">Number of items per page (optional, default to 25)</param>
        /// <returns>ApplicationList</returns>
        ApplicationList ListApplications (string search = default, List<string> ids = default, List<string> names = default, List<string> owner = default, bool? _public = default, List<string> permissions = default, List<string> keywords = default, ApplicationSortKey? sortBy = default, SortEnum? sortOrder = default, int? page = default, int? perPage = default);

        /// <summary>
        /// List Applications
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="search">Search string to find applications (optional)</param>
        /// <param name="ids">The ID of a application to search for (optional)</param>
        /// <param name="names">The name of the application (optional)</param>
        /// <param name="owner">Owner of the application (optional)</param>
        /// <param name="_public">Boolean check for public/private applications (optional)</param>
        /// <param name="permissions">Filter by permission on given resource (optional)</param>
        /// <param name="keywords">Filter by keywords on given resource (optional)</param>
        /// <param name="sortBy">Key to sort the list by (optional)</param>
        /// <param name="sortOrder">The order to sort the list (optional)</param>
        /// <param name="page">Page number starting from 1 (optional, default to 1)</param>
        /// <param name="perPage">Number of items per page (optional, default to 25)</param>
        /// <returns>ApiResponse of ApplicationList</returns>
        ApiResponse<ApplicationList> ListApplicationsWithHttpInfo (string search = default, List<string> ids = default, List<string> names = default, List<string> owner = default, bool? _public = default, List<string> permissions = default, List<string> keywords = default, ApplicationSortKey? sortBy = default, SortEnum? sortOrder = default, int? page = default, int? perPage = default);
        /// <summary>
        /// Update a Application
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="slug"></param>
        /// <param name="applicationUpdate"></param>
        /// <returns>UpdateAccepted</returns>
        UpdateAccepted UpdateApplication (string owner, string slug, ApplicationUpdate applicationUpdate);

        /// <summary>
        /// Update a Application
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="slug"></param>
        /// <param name="applicationUpdate"></param>
        /// <returns>ApiResponse of UpdateAccepted</returns>
        ApiResponse<UpdateAccepted> UpdateApplicationWithHttpInfo (string owner, string slug, ApplicationUpdate applicationUpdate);
        /// <summary>
        /// Upsert a new permission to a application
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="slug"></param>
        /// <param name="applicationAccessPolicy"></param>
        /// <returns>UpdateAccepted</returns>
        UpdateAccepted UpsertApplicationPermission (string owner, string slug, ApplicationAccessPolicy applicationAccessPolicy);

        /// <summary>
        /// Upsert a new permission to a application
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="slug"></param>
        /// <param name="applicationAccessPolicy"></param>
        /// <returns>ApiResponse of UpdateAccepted</returns>
        ApiResponse<UpdateAccepted> UpsertApplicationPermissionWithHttpInfo (string owner, string slug, ApplicationAccessPolicy applicationAccessPolicy);
        /// <summary>
        /// Upsert a new version to a application
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="slug"></param>
        /// <param name="newApplicationVersion"></param>
        /// <returns>S3UploadRequest</returns>
        S3UploadRequest UpsertApplicationVersion (string owner, string slug, NewApplicationVersion newApplicationVersion);

        /// <summary>
        /// Upsert a new version to a application
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="slug"></param>
        /// <param name="newApplicationVersion"></param>
        /// <returns>ApiResponse of S3UploadRequest</returns>
        ApiResponse<S3UploadRequest> UpsertApplicationVersionWithHttpInfo (string owner, string slug, NewApplicationVersion newApplicationVersion);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create an Application
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="applicationCreate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Application</returns>
        System.Threading.Tasks.Task<Application> CreateApplicationAsync (string owner, ApplicationCreate applicationCreate, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create an Application
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="applicationCreate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Application)</returns>
        System.Threading.Tasks.Task<ApiResponse<Application>> CreateApplicationWithHttpInfoAsync (string owner, ApplicationCreate applicationCreate, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Delete a Application
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="slug"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteApplicationAsync (string owner, string slug, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete a Application
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="slug"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteApplicationWithHttpInfoAsync (string owner, string slug, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Remove a Application permissions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="slug"></param>
        /// <param name="applicationPolicySubject"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteApplicationOrgPermissionAsync (string owner, string slug, ApplicationPolicySubject applicationPolicySubject, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Remove a Application permissions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="slug"></param>
        /// <param name="applicationPolicySubject"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteApplicationOrgPermissionWithHttpInfoAsync (string owner, string slug, ApplicationPolicySubject applicationPolicySubject, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Remove a Application version
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="slug"></param>
        /// <param name="tag"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteApplicationVersionAsync (string owner, string slug, string tag, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Remove a Application version
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="slug"></param>
        /// <param name="tag"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteApplicationVersionWithHttpInfoAsync (string owner, string slug, string tag, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get an application
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="slug"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Application</returns>
        System.Threading.Tasks.Task<Application> GetApplicationAsync (string owner, string slug, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get an application
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="slug"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Application)</returns>
        System.Threading.Tasks.Task<ApiResponse<Application>> GetApplicationWithHttpInfoAsync (string owner, string slug, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get application access permissions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="slug"></param>
        /// <param name="page">Page number starting from 1 (optional, default to 1)</param>
        /// <param name="perPage">Number of items per page (optional, default to 25)</param>
        /// <param name="subjectType">The type of access policy subject (optional)</param>
        /// <param name="permission">An access policy permission string (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApplicationAccessPolicyList</returns>
        System.Threading.Tasks.Task<ApplicationAccessPolicyList> GetApplicationAccessPermissionsAsync (string owner, string slug, int? page = default, int? perPage = default, List<string> subjectType = default, List<string> permission = default, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get application access permissions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="slug"></param>
        /// <param name="page">Page number starting from 1 (optional, default to 1)</param>
        /// <param name="perPage">Number of items per page (optional, default to 25)</param>
        /// <param name="subjectType">The type of access policy subject (optional)</param>
        /// <param name="permission">An access policy permission string (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApplicationAccessPolicyList)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApplicationAccessPolicyList>> GetApplicationAccessPermissionsWithHttpInfoAsync (string owner, string slug, int? page = default, int? perPage = default, List<string> subjectType = default, List<string> permission = default, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get application deployment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="slug"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApplicationDeployment</returns>
        System.Threading.Tasks.Task<ApplicationDeployment> GetApplicationDeploymentAsync (string owner, string slug, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get application deployment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="slug"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApplicationDeployment)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApplicationDeployment>> GetApplicationDeploymentWithHttpInfoAsync (string owner, string slug, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get application versions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="slug"></param>
        /// <param name="page">Page number starting from 1 (optional, default to 1)</param>
        /// <param name="perPage">Number of items per page (optional, default to 25)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApplicationVersionList</returns>
        System.Threading.Tasks.Task<ApplicationVersionList> GetApplicationVersionsAsync (string owner, string slug, int? page = default, int? perPage = default, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get application versions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="slug"></param>
        /// <param name="page">Page number starting from 1 (optional, default to 1)</param>
        /// <param name="perPage">Number of items per page (optional, default to 25)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApplicationVersionList)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApplicationVersionList>> GetApplicationVersionsWithHttpInfoAsync (string owner, string slug, int? page = default, int? perPage = default, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// List Applications
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="search">Search string to find applications (optional)</param>
        /// <param name="ids">The ID of a application to search for (optional)</param>
        /// <param name="names">The name of the application (optional)</param>
        /// <param name="owner">Owner of the application (optional)</param>
        /// <param name="_public">Boolean check for public/private applications (optional)</param>
        /// <param name="permissions">Filter by permission on given resource (optional)</param>
        /// <param name="keywords">Filter by keywords on given resource (optional)</param>
        /// <param name="sortBy">Key to sort the list by (optional)</param>
        /// <param name="sortOrder">The order to sort the list (optional)</param>
        /// <param name="page">Page number starting from 1 (optional, default to 1)</param>
        /// <param name="perPage">Number of items per page (optional, default to 25)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApplicationList</returns>
        System.Threading.Tasks.Task<ApplicationList> ListApplicationsAsync (string search = default, List<string> ids = default, List<string> names = default, List<string> owner = default, bool? _public = default, List<string> permissions = default, List<string> keywords = default, ApplicationSortKey? sortBy = default, SortEnum? sortOrder = default, int? page = default, int? perPage = default, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List Applications
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="search">Search string to find applications (optional)</param>
        /// <param name="ids">The ID of a application to search for (optional)</param>
        /// <param name="names">The name of the application (optional)</param>
        /// <param name="owner">Owner of the application (optional)</param>
        /// <param name="_public">Boolean check for public/private applications (optional)</param>
        /// <param name="permissions">Filter by permission on given resource (optional)</param>
        /// <param name="keywords">Filter by keywords on given resource (optional)</param>
        /// <param name="sortBy">Key to sort the list by (optional)</param>
        /// <param name="sortOrder">The order to sort the list (optional)</param>
        /// <param name="page">Page number starting from 1 (optional, default to 1)</param>
        /// <param name="perPage">Number of items per page (optional, default to 25)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApplicationList)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApplicationList>> ListApplicationsWithHttpInfoAsync (string search = default, List<string> ids = default, List<string> names = default, List<string> owner = default, bool? _public = default, List<string> permissions = default, List<string> keywords = default, ApplicationSortKey? sortBy = default, SortEnum? sortOrder = default, int? page = default, int? perPage = default, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update a Application
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="slug"></param>
        /// <param name="applicationUpdate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UpdateAccepted</returns>
        System.Threading.Tasks.Task<UpdateAccepted> UpdateApplicationAsync (string owner, string slug, ApplicationUpdate applicationUpdate, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update a Application
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="slug"></param>
        /// <param name="applicationUpdate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UpdateAccepted)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateAccepted>> UpdateApplicationWithHttpInfoAsync (string owner, string slug, ApplicationUpdate applicationUpdate, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Upsert a new permission to a application
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="slug"></param>
        /// <param name="applicationAccessPolicy"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UpdateAccepted</returns>
        System.Threading.Tasks.Task<UpdateAccepted> UpsertApplicationPermissionAsync (string owner, string slug, ApplicationAccessPolicy applicationAccessPolicy, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Upsert a new permission to a application
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="slug"></param>
        /// <param name="applicationAccessPolicy"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UpdateAccepted)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateAccepted>> UpsertApplicationPermissionWithHttpInfoAsync (string owner, string slug, ApplicationAccessPolicy applicationAccessPolicy, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Upsert a new version to a application
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="slug"></param>
        /// <param name="newApplicationVersion"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of S3UploadRequest</returns>
        System.Threading.Tasks.Task<S3UploadRequest> UpsertApplicationVersionAsync (string owner, string slug, NewApplicationVersion newApplicationVersion, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Upsert a new version to a application
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="slug"></param>
        /// <param name="newApplicationVersion"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (S3UploadRequest)</returns>
        System.Threading.Tasks.Task<ApiResponse<S3UploadRequest>> UpsertApplicationVersionWithHttpInfoAsync (string owner, string slug, NewApplicationVersion newApplicationVersion, CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ApplicationsApi : IApplicationsApi
    {
        private PollinationSDK.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ApplicationsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ApplicationsApi(String basePath)
        {
            this.Configuration = new PollinationSDK.Client.Configuration { BasePath = basePath };

            ExceptionFactory = PollinationSDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ApplicationsApi"/> class
        /// </summary>
        /// <returns></returns>
        public ApplicationsApi()
        {
            this.Configuration = PollinationSDK.Client.Configuration.Default;

            ExceptionFactory = PollinationSDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ApplicationsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ApplicationsApi(PollinationSDK.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = PollinationSDK.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = PollinationSDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public PollinationSDK.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public PollinationSDK.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create an Application 
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="applicationCreate"></param>
        /// <returns>Application</returns>
        public Application CreateApplication (string owner, ApplicationCreate applicationCreate)
        {
             ApiResponse<Application> localVarResponse = CreateApplicationWithHttpInfo(owner, applicationCreate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create an Application 
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="applicationCreate"></param>
        /// <returns>ApiResponse of Application</returns>
        public ApiResponse<Application> CreateApplicationWithHttpInfo (string owner, ApplicationCreate applicationCreate)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling ApplicationsApi->CreateApplication");
            // verify the required parameter 'applicationCreate' is set
            if (applicationCreate == null)
                throw new ApiException(400, "Missing required parameter 'applicationCreate' when calling ApplicationsApi->CreateApplication");

            var localVarPath = "/applications/{owner}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (applicationCreate != null && applicationCreate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(applicationCreate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = applicationCreate; // byte array
            }

            // authentication (APIKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-pollination-token")))
            {
                localVarHeaderParams["x-pollination-token"] = this.Configuration.GetApiKeyWithPrefix("x-pollination-token");
            }
            // authentication (JWTAuth) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateApplication", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Application>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Application) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Application)));
        }

        /// <summary>
        /// Create an Application 
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="applicationCreate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Application</returns>
        public async System.Threading.Tasks.Task<Application> CreateApplicationAsync (string owner, ApplicationCreate applicationCreate, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Application> localVarResponse = await CreateApplicationWithHttpInfoAsync(owner, applicationCreate, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create an Application 
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="applicationCreate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Application)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Application>> CreateApplicationWithHttpInfoAsync (string owner, ApplicationCreate applicationCreate, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling ApplicationsApi->CreateApplication");
            // verify the required parameter 'applicationCreate' is set
            if (applicationCreate == null)
                throw new ApiException(400, "Missing required parameter 'applicationCreate' when calling ApplicationsApi->CreateApplication");

            var localVarPath = "/applications/{owner}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (applicationCreate != null && applicationCreate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(applicationCreate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = applicationCreate; // byte array
            }

            // authentication (APIKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-pollination-token")))
            {
                localVarHeaderParams["x-pollination-token"] = this.Configuration.GetApiKeyWithPrefix("x-pollination-token");
            }
            // authentication (JWTAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateApplication", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Application>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Application) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Application)));
        }

        /// <summary>
        /// Delete a Application 
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="slug"></param>
        /// <returns></returns>
        public void DeleteApplication (string owner, string slug)
        {
             DeleteApplicationWithHttpInfo(owner, slug);
        }

        /// <summary>
        /// Delete a Application 
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="slug"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteApplicationWithHttpInfo (string owner, string slug)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling ApplicationsApi->DeleteApplication");
            // verify the required parameter 'slug' is set
            if (slug == null)
                throw new ApiException(400, "Missing required parameter 'slug' when calling ApplicationsApi->DeleteApplication");

            var localVarPath = "/applications/{owner}/{slug}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (slug != null) localVarPathParams.Add("slug", this.Configuration.ApiClient.ParameterToString(slug)); // path parameter

            // authentication (APIKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-pollination-token")))
            {
                localVarHeaderParams["x-pollination-token"] = this.Configuration.GetApiKeyWithPrefix("x-pollination-token");
            }
            // authentication (JWTAuth) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteApplication", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete a Application 
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="slug"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteApplicationAsync (string owner, string slug, CancellationToken cancellationToken = default(CancellationToken))
        {
             await DeleteApplicationWithHttpInfoAsync(owner, slug, cancellationToken);

        }

        /// <summary>
        /// Delete a Application 
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="slug"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteApplicationWithHttpInfoAsync (string owner, string slug, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling ApplicationsApi->DeleteApplication");
            // verify the required parameter 'slug' is set
            if (slug == null)
                throw new ApiException(400, "Missing required parameter 'slug' when calling ApplicationsApi->DeleteApplication");

            var localVarPath = "/applications/{owner}/{slug}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (slug != null) localVarPathParams.Add("slug", this.Configuration.ApiClient.ParameterToString(slug)); // path parameter

            // authentication (APIKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-pollination-token")))
            {
                localVarHeaderParams["x-pollination-token"] = this.Configuration.GetApiKeyWithPrefix("x-pollination-token");
            }
            // authentication (JWTAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteApplication", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Remove a Application permissions 
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="slug"></param>
        /// <param name="applicationPolicySubject"></param>
        /// <returns></returns>
        public void DeleteApplicationOrgPermission (string owner, string slug, ApplicationPolicySubject applicationPolicySubject)
        {
             DeleteApplicationOrgPermissionWithHttpInfo(owner, slug, applicationPolicySubject);
        }

        /// <summary>
        /// Remove a Application permissions 
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="slug"></param>
        /// <param name="applicationPolicySubject"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteApplicationOrgPermissionWithHttpInfo (string owner, string slug, ApplicationPolicySubject applicationPolicySubject)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling ApplicationsApi->DeleteApplicationOrgPermission");
            // verify the required parameter 'slug' is set
            if (slug == null)
                throw new ApiException(400, "Missing required parameter 'slug' when calling ApplicationsApi->DeleteApplicationOrgPermission");
            // verify the required parameter 'applicationPolicySubject' is set
            if (applicationPolicySubject == null)
                throw new ApiException(400, "Missing required parameter 'applicationPolicySubject' when calling ApplicationsApi->DeleteApplicationOrgPermission");

            var localVarPath = "/applications/{owner}/{slug}/permissions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (slug != null) localVarPathParams.Add("slug", this.Configuration.ApiClient.ParameterToString(slug)); // path parameter
            if (applicationPolicySubject != null && applicationPolicySubject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(applicationPolicySubject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = applicationPolicySubject; // byte array
            }

            // authentication (APIKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-pollination-token")))
            {
                localVarHeaderParams["x-pollination-token"] = this.Configuration.GetApiKeyWithPrefix("x-pollination-token");
            }
            // authentication (JWTAuth) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteApplicationOrgPermission", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Remove a Application permissions 
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="slug"></param>
        /// <param name="applicationPolicySubject"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteApplicationOrgPermissionAsync (string owner, string slug, ApplicationPolicySubject applicationPolicySubject, CancellationToken cancellationToken = default(CancellationToken))
        {
             await DeleteApplicationOrgPermissionWithHttpInfoAsync(owner, slug, applicationPolicySubject, cancellationToken);

        }

        /// <summary>
        /// Remove a Application permissions 
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="slug"></param>
        /// <param name="applicationPolicySubject"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteApplicationOrgPermissionWithHttpInfoAsync (string owner, string slug, ApplicationPolicySubject applicationPolicySubject, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling ApplicationsApi->DeleteApplicationOrgPermission");
            // verify the required parameter 'slug' is set
            if (slug == null)
                throw new ApiException(400, "Missing required parameter 'slug' when calling ApplicationsApi->DeleteApplicationOrgPermission");
            // verify the required parameter 'applicationPolicySubject' is set
            if (applicationPolicySubject == null)
                throw new ApiException(400, "Missing required parameter 'applicationPolicySubject' when calling ApplicationsApi->DeleteApplicationOrgPermission");

            var localVarPath = "/applications/{owner}/{slug}/permissions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (slug != null) localVarPathParams.Add("slug", this.Configuration.ApiClient.ParameterToString(slug)); // path parameter
            if (applicationPolicySubject != null && applicationPolicySubject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(applicationPolicySubject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = applicationPolicySubject; // byte array
            }

            // authentication (APIKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-pollination-token")))
            {
                localVarHeaderParams["x-pollination-token"] = this.Configuration.GetApiKeyWithPrefix("x-pollination-token");
            }
            // authentication (JWTAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteApplicationOrgPermission", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Remove a Application version 
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="slug"></param>
        /// <param name="tag"></param>
        /// <returns></returns>
        public void DeleteApplicationVersion (string owner, string slug, string tag)
        {
             DeleteApplicationVersionWithHttpInfo(owner, slug, tag);
        }

        /// <summary>
        /// Remove a Application version 
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="slug"></param>
        /// <param name="tag"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteApplicationVersionWithHttpInfo (string owner, string slug, string tag)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling ApplicationsApi->DeleteApplicationVersion");
            // verify the required parameter 'slug' is set
            if (slug == null)
                throw new ApiException(400, "Missing required parameter 'slug' when calling ApplicationsApi->DeleteApplicationVersion");
            // verify the required parameter 'tag' is set
            if (tag == null)
                throw new ApiException(400, "Missing required parameter 'tag' when calling ApplicationsApi->DeleteApplicationVersion");

            var localVarPath = "/applications/{owner}/{slug}/versions/{tag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (slug != null) localVarPathParams.Add("slug", this.Configuration.ApiClient.ParameterToString(slug)); // path parameter
            if (tag != null) localVarPathParams.Add("tag", this.Configuration.ApiClient.ParameterToString(tag)); // path parameter

            // authentication (APIKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-pollination-token")))
            {
                localVarHeaderParams["x-pollination-token"] = this.Configuration.GetApiKeyWithPrefix("x-pollination-token");
            }
            // authentication (JWTAuth) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteApplicationVersion", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Remove a Application version 
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="slug"></param>
        /// <param name="tag"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteApplicationVersionAsync (string owner, string slug, string tag, CancellationToken cancellationToken = default(CancellationToken))
        {
             await DeleteApplicationVersionWithHttpInfoAsync(owner, slug, tag, cancellationToken);

        }

        /// <summary>
        /// Remove a Application version 
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="slug"></param>
        /// <param name="tag"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteApplicationVersionWithHttpInfoAsync (string owner, string slug, string tag, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling ApplicationsApi->DeleteApplicationVersion");
            // verify the required parameter 'slug' is set
            if (slug == null)
                throw new ApiException(400, "Missing required parameter 'slug' when calling ApplicationsApi->DeleteApplicationVersion");
            // verify the required parameter 'tag' is set
            if (tag == null)
                throw new ApiException(400, "Missing required parameter 'tag' when calling ApplicationsApi->DeleteApplicationVersion");

            var localVarPath = "/applications/{owner}/{slug}/versions/{tag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (slug != null) localVarPathParams.Add("slug", this.Configuration.ApiClient.ParameterToString(slug)); // path parameter
            if (tag != null) localVarPathParams.Add("tag", this.Configuration.ApiClient.ParameterToString(tag)); // path parameter

            // authentication (APIKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-pollination-token")))
            {
                localVarHeaderParams["x-pollination-token"] = this.Configuration.GetApiKeyWithPrefix("x-pollination-token");
            }
            // authentication (JWTAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteApplicationVersion", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Get an application 
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="slug"></param>
        /// <returns>Application</returns>
        public Application GetApplication (string owner, string slug)
        {
             ApiResponse<Application> localVarResponse = GetApplicationWithHttpInfo(owner, slug);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get an application 
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="slug"></param>
        /// <returns>ApiResponse of Application</returns>
        public ApiResponse<Application> GetApplicationWithHttpInfo (string owner, string slug)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling ApplicationsApi->GetApplication");
            // verify the required parameter 'slug' is set
            if (slug == null)
                throw new ApiException(400, "Missing required parameter 'slug' when calling ApplicationsApi->GetApplication");

            var localVarPath = "/applications/{owner}/{slug}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (slug != null) localVarPathParams.Add("slug", this.Configuration.ApiClient.ParameterToString(slug)); // path parameter

            // authentication (APIKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-pollination-token")))
            {
                localVarHeaderParams["x-pollination-token"] = this.Configuration.GetApiKeyWithPrefix("x-pollination-token");
            }
            // authentication (JWTAuth) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetApplication", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Application>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Application) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Application)));
        }

        /// <summary>
        /// Get an application 
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="slug"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Application</returns>
        public async System.Threading.Tasks.Task<Application> GetApplicationAsync (string owner, string slug, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Application> localVarResponse = await GetApplicationWithHttpInfoAsync(owner, slug, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get an application 
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="slug"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Application)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Application>> GetApplicationWithHttpInfoAsync (string owner, string slug, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling ApplicationsApi->GetApplication");
            // verify the required parameter 'slug' is set
            if (slug == null)
                throw new ApiException(400, "Missing required parameter 'slug' when calling ApplicationsApi->GetApplication");

            var localVarPath = "/applications/{owner}/{slug}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (slug != null) localVarPathParams.Add("slug", this.Configuration.ApiClient.ParameterToString(slug)); // path parameter

            // authentication (APIKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-pollination-token")))
            {
                localVarHeaderParams["x-pollination-token"] = this.Configuration.GetApiKeyWithPrefix("x-pollination-token");
            }
            // authentication (JWTAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetApplication", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Application>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Application) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Application)));
        }

        /// <summary>
        /// Get application access permissions 
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="slug"></param>
        /// <param name="page">Page number starting from 1 (optional, default to 1)</param>
        /// <param name="perPage">Number of items per page (optional, default to 25)</param>
        /// <param name="subjectType">The type of access policy subject (optional)</param>
        /// <param name="permission">An access policy permission string (optional)</param>
        /// <returns>ApplicationAccessPolicyList</returns>
        public ApplicationAccessPolicyList GetApplicationAccessPermissions (string owner, string slug, int? page = default, int? perPage = default, List<string> subjectType = default, List<string> permission = default)
        {
             ApiResponse<ApplicationAccessPolicyList> localVarResponse = GetApplicationAccessPermissionsWithHttpInfo(owner, slug, page, perPage, subjectType, permission);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get application access permissions 
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="slug"></param>
        /// <param name="page">Page number starting from 1 (optional, default to 1)</param>
        /// <param name="perPage">Number of items per page (optional, default to 25)</param>
        /// <param name="subjectType">The type of access policy subject (optional)</param>
        /// <param name="permission">An access policy permission string (optional)</param>
        /// <returns>ApiResponse of ApplicationAccessPolicyList</returns>
        public ApiResponse<ApplicationAccessPolicyList> GetApplicationAccessPermissionsWithHttpInfo (string owner, string slug, int? page = default, int? perPage = default, List<string> subjectType = default, List<string> permission = default)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling ApplicationsApi->GetApplicationAccessPermissions");
            // verify the required parameter 'slug' is set
            if (slug == null)
                throw new ApiException(400, "Missing required parameter 'slug' when calling ApplicationsApi->GetApplicationAccessPermissions");

            var localVarPath = "/applications/{owner}/{slug}/permissions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (slug != null) localVarPathParams.Add("slug", this.Configuration.ApiClient.ParameterToString(slug)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per-page", perPage)); // query parameter
            if (subjectType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "subject_type", subjectType)); // query parameter
            if (permission != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "permission", permission)); // query parameter

            // authentication (APIKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-pollination-token")))
            {
                localVarHeaderParams["x-pollination-token"] = this.Configuration.GetApiKeyWithPrefix("x-pollination-token");
            }
            // authentication (JWTAuth) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetApplicationAccessPermissions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApplicationAccessPolicyList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApplicationAccessPolicyList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApplicationAccessPolicyList)));
        }

        /// <summary>
        /// Get application access permissions 
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="slug"></param>
        /// <param name="page">Page number starting from 1 (optional, default to 1)</param>
        /// <param name="perPage">Number of items per page (optional, default to 25)</param>
        /// <param name="subjectType">The type of access policy subject (optional)</param>
        /// <param name="permission">An access policy permission string (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApplicationAccessPolicyList</returns>
        public async System.Threading.Tasks.Task<ApplicationAccessPolicyList> GetApplicationAccessPermissionsAsync (string owner, string slug, int? page = default, int? perPage = default, List<string> subjectType = default, List<string> permission = default, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ApplicationAccessPolicyList> localVarResponse = await GetApplicationAccessPermissionsWithHttpInfoAsync(owner, slug, page, perPage, subjectType, permission, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get application access permissions 
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="slug"></param>
        /// <param name="page">Page number starting from 1 (optional, default to 1)</param>
        /// <param name="perPage">Number of items per page (optional, default to 25)</param>
        /// <param name="subjectType">The type of access policy subject (optional)</param>
        /// <param name="permission">An access policy permission string (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApplicationAccessPolicyList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApplicationAccessPolicyList>> GetApplicationAccessPermissionsWithHttpInfoAsync (string owner, string slug, int? page = default, int? perPage = default, List<string> subjectType = default, List<string> permission = default, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling ApplicationsApi->GetApplicationAccessPermissions");
            // verify the required parameter 'slug' is set
            if (slug == null)
                throw new ApiException(400, "Missing required parameter 'slug' when calling ApplicationsApi->GetApplicationAccessPermissions");

            var localVarPath = "/applications/{owner}/{slug}/permissions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (slug != null) localVarPathParams.Add("slug", this.Configuration.ApiClient.ParameterToString(slug)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per-page", perPage)); // query parameter
            if (subjectType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "subject_type", subjectType)); // query parameter
            if (permission != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "permission", permission)); // query parameter

            // authentication (APIKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-pollination-token")))
            {
                localVarHeaderParams["x-pollination-token"] = this.Configuration.GetApiKeyWithPrefix("x-pollination-token");
            }
            // authentication (JWTAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetApplicationAccessPermissions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApplicationAccessPolicyList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApplicationAccessPolicyList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApplicationAccessPolicyList)));
        }

        /// <summary>
        /// Get application deployment 
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="slug"></param>
        /// <returns>ApplicationDeployment</returns>
        public ApplicationDeployment GetApplicationDeployment (string owner, string slug)
        {
             ApiResponse<ApplicationDeployment> localVarResponse = GetApplicationDeploymentWithHttpInfo(owner, slug);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get application deployment 
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="slug"></param>
        /// <returns>ApiResponse of ApplicationDeployment</returns>
        public ApiResponse<ApplicationDeployment> GetApplicationDeploymentWithHttpInfo (string owner, string slug)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling ApplicationsApi->GetApplicationDeployment");
            // verify the required parameter 'slug' is set
            if (slug == null)
                throw new ApiException(400, "Missing required parameter 'slug' when calling ApplicationsApi->GetApplicationDeployment");

            var localVarPath = "/applications/{owner}/{slug}/deployment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (slug != null) localVarPathParams.Add("slug", this.Configuration.ApiClient.ParameterToString(slug)); // path parameter

            // authentication (APIKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-pollination-token")))
            {
                localVarHeaderParams["x-pollination-token"] = this.Configuration.GetApiKeyWithPrefix("x-pollination-token");
            }
            // authentication (JWTAuth) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetApplicationDeployment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApplicationDeployment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApplicationDeployment) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApplicationDeployment)));
        }

        /// <summary>
        /// Get application deployment 
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="slug"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApplicationDeployment</returns>
        public async System.Threading.Tasks.Task<ApplicationDeployment> GetApplicationDeploymentAsync (string owner, string slug, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ApplicationDeployment> localVarResponse = await GetApplicationDeploymentWithHttpInfoAsync(owner, slug, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get application deployment 
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="slug"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApplicationDeployment)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApplicationDeployment>> GetApplicationDeploymentWithHttpInfoAsync (string owner, string slug, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling ApplicationsApi->GetApplicationDeployment");
            // verify the required parameter 'slug' is set
            if (slug == null)
                throw new ApiException(400, "Missing required parameter 'slug' when calling ApplicationsApi->GetApplicationDeployment");

            var localVarPath = "/applications/{owner}/{slug}/deployment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (slug != null) localVarPathParams.Add("slug", this.Configuration.ApiClient.ParameterToString(slug)); // path parameter

            // authentication (APIKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-pollination-token")))
            {
                localVarHeaderParams["x-pollination-token"] = this.Configuration.GetApiKeyWithPrefix("x-pollination-token");
            }
            // authentication (JWTAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetApplicationDeployment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApplicationDeployment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApplicationDeployment) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApplicationDeployment)));
        }

        /// <summary>
        /// Get application versions 
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="slug"></param>
        /// <param name="page">Page number starting from 1 (optional, default to 1)</param>
        /// <param name="perPage">Number of items per page (optional, default to 25)</param>
        /// <returns>ApplicationVersionList</returns>
        public ApplicationVersionList GetApplicationVersions (string owner, string slug, int? page = default, int? perPage = default)
        {
             ApiResponse<ApplicationVersionList> localVarResponse = GetApplicationVersionsWithHttpInfo(owner, slug, page, perPage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get application versions 
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="slug"></param>
        /// <param name="page">Page number starting from 1 (optional, default to 1)</param>
        /// <param name="perPage">Number of items per page (optional, default to 25)</param>
        /// <returns>ApiResponse of ApplicationVersionList</returns>
        public ApiResponse<ApplicationVersionList> GetApplicationVersionsWithHttpInfo (string owner, string slug, int? page = default, int? perPage = default)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling ApplicationsApi->GetApplicationVersions");
            // verify the required parameter 'slug' is set
            if (slug == null)
                throw new ApiException(400, "Missing required parameter 'slug' when calling ApplicationsApi->GetApplicationVersions");

            var localVarPath = "/applications/{owner}/{slug}/versions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (slug != null) localVarPathParams.Add("slug", this.Configuration.ApiClient.ParameterToString(slug)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per-page", perPage)); // query parameter

            // authentication (APIKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-pollination-token")))
            {
                localVarHeaderParams["x-pollination-token"] = this.Configuration.GetApiKeyWithPrefix("x-pollination-token");
            }
            // authentication (JWTAuth) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetApplicationVersions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApplicationVersionList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApplicationVersionList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApplicationVersionList)));
        }

        /// <summary>
        /// Get application versions 
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="slug"></param>
        /// <param name="page">Page number starting from 1 (optional, default to 1)</param>
        /// <param name="perPage">Number of items per page (optional, default to 25)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApplicationVersionList</returns>
        public async System.Threading.Tasks.Task<ApplicationVersionList> GetApplicationVersionsAsync (string owner, string slug, int? page = default, int? perPage = default, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ApplicationVersionList> localVarResponse = await GetApplicationVersionsWithHttpInfoAsync(owner, slug, page, perPage, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get application versions 
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="slug"></param>
        /// <param name="page">Page number starting from 1 (optional, default to 1)</param>
        /// <param name="perPage">Number of items per page (optional, default to 25)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApplicationVersionList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApplicationVersionList>> GetApplicationVersionsWithHttpInfoAsync (string owner, string slug, int? page = default, int? perPage = default, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling ApplicationsApi->GetApplicationVersions");
            // verify the required parameter 'slug' is set
            if (slug == null)
                throw new ApiException(400, "Missing required parameter 'slug' when calling ApplicationsApi->GetApplicationVersions");

            var localVarPath = "/applications/{owner}/{slug}/versions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (slug != null) localVarPathParams.Add("slug", this.Configuration.ApiClient.ParameterToString(slug)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per-page", perPage)); // query parameter

            // authentication (APIKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-pollination-token")))
            {
                localVarHeaderParams["x-pollination-token"] = this.Configuration.GetApiKeyWithPrefix("x-pollination-token");
            }
            // authentication (JWTAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetApplicationVersions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApplicationVersionList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApplicationVersionList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApplicationVersionList)));
        }

        /// <summary>
        /// List Applications 
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="search">Search string to find applications (optional)</param>
        /// <param name="ids">The ID of a application to search for (optional)</param>
        /// <param name="names">The name of the application (optional)</param>
        /// <param name="owner">Owner of the application (optional)</param>
        /// <param name="_public">Boolean check for public/private applications (optional)</param>
        /// <param name="permissions">Filter by permission on given resource (optional)</param>
        /// <param name="keywords">Filter by keywords on given resource (optional)</param>
        /// <param name="sortBy">Key to sort the list by (optional)</param>
        /// <param name="sortOrder">The order to sort the list (optional)</param>
        /// <param name="page">Page number starting from 1 (optional, default to 1)</param>
        /// <param name="perPage">Number of items per page (optional, default to 25)</param>
        /// <returns>ApplicationList</returns>
        public ApplicationList ListApplications (string search = default, List<string> ids = default, List<string> names = default, List<string> owner = default, bool? _public = default, List<string> permissions = default, List<string> keywords = default, ApplicationSortKey? sortBy = default, SortEnum? sortOrder = default, int? page = default, int? perPage = default)
        {
             ApiResponse<ApplicationList> localVarResponse = ListApplicationsWithHttpInfo(search, ids, names, owner, _public, permissions, keywords, sortBy, sortOrder, page, perPage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Applications 
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="search">Search string to find applications (optional)</param>
        /// <param name="ids">The ID of a application to search for (optional)</param>
        /// <param name="names">The name of the application (optional)</param>
        /// <param name="owner">Owner of the application (optional)</param>
        /// <param name="_public">Boolean check for public/private applications (optional)</param>
        /// <param name="permissions">Filter by permission on given resource (optional)</param>
        /// <param name="keywords">Filter by keywords on given resource (optional)</param>
        /// <param name="sortBy">Key to sort the list by (optional)</param>
        /// <param name="sortOrder">The order to sort the list (optional)</param>
        /// <param name="page">Page number starting from 1 (optional, default to 1)</param>
        /// <param name="perPage">Number of items per page (optional, default to 25)</param>
        /// <returns>ApiResponse of ApplicationList</returns>
        public ApiResponse<ApplicationList> ListApplicationsWithHttpInfo (string search = default, List<string> ids = default, List<string> names = default, List<string> owner = default, bool? _public = default, List<string> permissions = default, List<string> keywords = default, ApplicationSortKey? sortBy = default, SortEnum? sortOrder = default, int? page = default, int? perPage = default)
        {

            var localVarPath = "/applications";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (search != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "search", search)); // query parameter
            if (ids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "ids", ids)); // query parameter
            if (names != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "names", names)); // query parameter
            if (owner != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "owner", owner)); // query parameter
            if (_public != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "public", _public)); // query parameter
            if (permissions != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "permissions", permissions)); // query parameter
            if (keywords != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "keywords", keywords)); // query parameter
            if (sortBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort_by", sortBy)); // query parameter
            if (sortOrder != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort_order", sortOrder)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per-page", perPage)); // query parameter

            // authentication (APIKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-pollination-token")))
            {
                localVarHeaderParams["x-pollination-token"] = this.Configuration.GetApiKeyWithPrefix("x-pollination-token");
            }
            // authentication (JWTAuth) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListApplications", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApplicationList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApplicationList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApplicationList)));
        }

        /// <summary>
        /// List Applications 
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="search">Search string to find applications (optional)</param>
        /// <param name="ids">The ID of a application to search for (optional)</param>
        /// <param name="names">The name of the application (optional)</param>
        /// <param name="owner">Owner of the application (optional)</param>
        /// <param name="_public">Boolean check for public/private applications (optional)</param>
        /// <param name="permissions">Filter by permission on given resource (optional)</param>
        /// <param name="keywords">Filter by keywords on given resource (optional)</param>
        /// <param name="sortBy">Key to sort the list by (optional)</param>
        /// <param name="sortOrder">The order to sort the list (optional)</param>
        /// <param name="page">Page number starting from 1 (optional, default to 1)</param>
        /// <param name="perPage">Number of items per page (optional, default to 25)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApplicationList</returns>
        public async System.Threading.Tasks.Task<ApplicationList> ListApplicationsAsync (string search = default, List<string> ids = default, List<string> names = default, List<string> owner = default, bool? _public = default, List<string> permissions = default, List<string> keywords = default, ApplicationSortKey? sortBy = default, SortEnum? sortOrder = default, int? page = default, int? perPage = default, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ApplicationList> localVarResponse = await ListApplicationsWithHttpInfoAsync(search, ids, names, owner, _public, permissions, keywords, sortBy, sortOrder, page, perPage, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Applications 
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="search">Search string to find applications (optional)</param>
        /// <param name="ids">The ID of a application to search for (optional)</param>
        /// <param name="names">The name of the application (optional)</param>
        /// <param name="owner">Owner of the application (optional)</param>
        /// <param name="_public">Boolean check for public/private applications (optional)</param>
        /// <param name="permissions">Filter by permission on given resource (optional)</param>
        /// <param name="keywords">Filter by keywords on given resource (optional)</param>
        /// <param name="sortBy">Key to sort the list by (optional)</param>
        /// <param name="sortOrder">The order to sort the list (optional)</param>
        /// <param name="page">Page number starting from 1 (optional, default to 1)</param>
        /// <param name="perPage">Number of items per page (optional, default to 25)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApplicationList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApplicationList>> ListApplicationsWithHttpInfoAsync (string search = default, List<string> ids = default, List<string> names = default, List<string> owner = default, bool? _public = default, List<string> permissions = default, List<string> keywords = default, ApplicationSortKey? sortBy = default, SortEnum? sortOrder = default, int? page = default, int? perPage = default, CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/applications";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (search != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "search", search)); // query parameter
            if (ids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "ids", ids)); // query parameter
            if (names != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "names", names)); // query parameter
            if (owner != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "owner", owner)); // query parameter
            if (_public != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "public", _public)); // query parameter
            if (permissions != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "permissions", permissions)); // query parameter
            if (keywords != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "keywords", keywords)); // query parameter
            if (sortBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort_by", sortBy)); // query parameter
            if (sortOrder != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort_order", sortOrder)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per-page", perPage)); // query parameter

            // authentication (APIKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-pollination-token")))
            {
                localVarHeaderParams["x-pollination-token"] = this.Configuration.GetApiKeyWithPrefix("x-pollination-token");
            }
            // authentication (JWTAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListApplications", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApplicationList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApplicationList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApplicationList)));
        }

        /// <summary>
        /// Update a Application 
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="slug"></param>
        /// <param name="applicationUpdate"></param>
        /// <returns>UpdateAccepted</returns>
        public UpdateAccepted UpdateApplication (string owner, string slug, ApplicationUpdate applicationUpdate)
        {
             ApiResponse<UpdateAccepted> localVarResponse = UpdateApplicationWithHttpInfo(owner, slug, applicationUpdate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a Application 
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="slug"></param>
        /// <param name="applicationUpdate"></param>
        /// <returns>ApiResponse of UpdateAccepted</returns>
        public ApiResponse<UpdateAccepted> UpdateApplicationWithHttpInfo (string owner, string slug, ApplicationUpdate applicationUpdate)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling ApplicationsApi->UpdateApplication");
            // verify the required parameter 'slug' is set
            if (slug == null)
                throw new ApiException(400, "Missing required parameter 'slug' when calling ApplicationsApi->UpdateApplication");
            // verify the required parameter 'applicationUpdate' is set
            if (applicationUpdate == null)
                throw new ApiException(400, "Missing required parameter 'applicationUpdate' when calling ApplicationsApi->UpdateApplication");

            var localVarPath = "/applications/{owner}/{slug}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (slug != null) localVarPathParams.Add("slug", this.Configuration.ApiClient.ParameterToString(slug)); // path parameter
            if (applicationUpdate != null && applicationUpdate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(applicationUpdate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = applicationUpdate; // byte array
            }

            // authentication (APIKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-pollination-token")))
            {
                localVarHeaderParams["x-pollination-token"] = this.Configuration.GetApiKeyWithPrefix("x-pollination-token");
            }
            // authentication (JWTAuth) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateApplication", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdateAccepted>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UpdateAccepted) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdateAccepted)));
        }

        /// <summary>
        /// Update a Application 
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="slug"></param>
        /// <param name="applicationUpdate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UpdateAccepted</returns>
        public async System.Threading.Tasks.Task<UpdateAccepted> UpdateApplicationAsync (string owner, string slug, ApplicationUpdate applicationUpdate, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<UpdateAccepted> localVarResponse = await UpdateApplicationWithHttpInfoAsync(owner, slug, applicationUpdate, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a Application 
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="slug"></param>
        /// <param name="applicationUpdate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UpdateAccepted)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UpdateAccepted>> UpdateApplicationWithHttpInfoAsync (string owner, string slug, ApplicationUpdate applicationUpdate, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling ApplicationsApi->UpdateApplication");
            // verify the required parameter 'slug' is set
            if (slug == null)
                throw new ApiException(400, "Missing required parameter 'slug' when calling ApplicationsApi->UpdateApplication");
            // verify the required parameter 'applicationUpdate' is set
            if (applicationUpdate == null)
                throw new ApiException(400, "Missing required parameter 'applicationUpdate' when calling ApplicationsApi->UpdateApplication");

            var localVarPath = "/applications/{owner}/{slug}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (slug != null) localVarPathParams.Add("slug", this.Configuration.ApiClient.ParameterToString(slug)); // path parameter
            if (applicationUpdate != null && applicationUpdate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(applicationUpdate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = applicationUpdate; // byte array
            }

            // authentication (APIKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-pollination-token")))
            {
                localVarHeaderParams["x-pollination-token"] = this.Configuration.GetApiKeyWithPrefix("x-pollination-token");
            }
            // authentication (JWTAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateApplication", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdateAccepted>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UpdateAccepted) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdateAccepted)));
        }

        /// <summary>
        /// Upsert a new permission to a application 
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="slug"></param>
        /// <param name="applicationAccessPolicy"></param>
        /// <returns>UpdateAccepted</returns>
        public UpdateAccepted UpsertApplicationPermission (string owner, string slug, ApplicationAccessPolicy applicationAccessPolicy)
        {
             ApiResponse<UpdateAccepted> localVarResponse = UpsertApplicationPermissionWithHttpInfo(owner, slug, applicationAccessPolicy);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Upsert a new permission to a application 
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="slug"></param>
        /// <param name="applicationAccessPolicy"></param>
        /// <returns>ApiResponse of UpdateAccepted</returns>
        public ApiResponse<UpdateAccepted> UpsertApplicationPermissionWithHttpInfo (string owner, string slug, ApplicationAccessPolicy applicationAccessPolicy)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling ApplicationsApi->UpsertApplicationPermission");
            // verify the required parameter 'slug' is set
            if (slug == null)
                throw new ApiException(400, "Missing required parameter 'slug' when calling ApplicationsApi->UpsertApplicationPermission");
            // verify the required parameter 'applicationAccessPolicy' is set
            if (applicationAccessPolicy == null)
                throw new ApiException(400, "Missing required parameter 'applicationAccessPolicy' when calling ApplicationsApi->UpsertApplicationPermission");

            var localVarPath = "/applications/{owner}/{slug}/permissions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (slug != null) localVarPathParams.Add("slug", this.Configuration.ApiClient.ParameterToString(slug)); // path parameter
            if (applicationAccessPolicy != null && applicationAccessPolicy.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(applicationAccessPolicy); // http body (model) parameter
            }
            else
            {
                localVarPostBody = applicationAccessPolicy; // byte array
            }

            // authentication (APIKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-pollination-token")))
            {
                localVarHeaderParams["x-pollination-token"] = this.Configuration.GetApiKeyWithPrefix("x-pollination-token");
            }
            // authentication (JWTAuth) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpsertApplicationPermission", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdateAccepted>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UpdateAccepted) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdateAccepted)));
        }

        /// <summary>
        /// Upsert a new permission to a application 
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="slug"></param>
        /// <param name="applicationAccessPolicy"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UpdateAccepted</returns>
        public async System.Threading.Tasks.Task<UpdateAccepted> UpsertApplicationPermissionAsync (string owner, string slug, ApplicationAccessPolicy applicationAccessPolicy, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<UpdateAccepted> localVarResponse = await UpsertApplicationPermissionWithHttpInfoAsync(owner, slug, applicationAccessPolicy, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Upsert a new permission to a application 
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="slug"></param>
        /// <param name="applicationAccessPolicy"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UpdateAccepted)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UpdateAccepted>> UpsertApplicationPermissionWithHttpInfoAsync (string owner, string slug, ApplicationAccessPolicy applicationAccessPolicy, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling ApplicationsApi->UpsertApplicationPermission");
            // verify the required parameter 'slug' is set
            if (slug == null)
                throw new ApiException(400, "Missing required parameter 'slug' when calling ApplicationsApi->UpsertApplicationPermission");
            // verify the required parameter 'applicationAccessPolicy' is set
            if (applicationAccessPolicy == null)
                throw new ApiException(400, "Missing required parameter 'applicationAccessPolicy' when calling ApplicationsApi->UpsertApplicationPermission");

            var localVarPath = "/applications/{owner}/{slug}/permissions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (slug != null) localVarPathParams.Add("slug", this.Configuration.ApiClient.ParameterToString(slug)); // path parameter
            if (applicationAccessPolicy != null && applicationAccessPolicy.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(applicationAccessPolicy); // http body (model) parameter
            }
            else
            {
                localVarPostBody = applicationAccessPolicy; // byte array
            }

            // authentication (APIKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-pollination-token")))
            {
                localVarHeaderParams["x-pollination-token"] = this.Configuration.GetApiKeyWithPrefix("x-pollination-token");
            }
            // authentication (JWTAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpsertApplicationPermission", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdateAccepted>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UpdateAccepted) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdateAccepted)));
        }

        /// <summary>
        /// Upsert a new version to a application 
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="slug"></param>
        /// <param name="newApplicationVersion"></param>
        /// <returns>S3UploadRequest</returns>
        public S3UploadRequest UpsertApplicationVersion (string owner, string slug, NewApplicationVersion newApplicationVersion)
        {
             ApiResponse<S3UploadRequest> localVarResponse = UpsertApplicationVersionWithHttpInfo(owner, slug, newApplicationVersion);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Upsert a new version to a application 
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="slug"></param>
        /// <param name="newApplicationVersion"></param>
        /// <returns>ApiResponse of S3UploadRequest</returns>
        public ApiResponse<S3UploadRequest> UpsertApplicationVersionWithHttpInfo (string owner, string slug, NewApplicationVersion newApplicationVersion)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling ApplicationsApi->UpsertApplicationVersion");
            // verify the required parameter 'slug' is set
            if (slug == null)
                throw new ApiException(400, "Missing required parameter 'slug' when calling ApplicationsApi->UpsertApplicationVersion");
            // verify the required parameter 'newApplicationVersion' is set
            if (newApplicationVersion == null)
                throw new ApiException(400, "Missing required parameter 'newApplicationVersion' when calling ApplicationsApi->UpsertApplicationVersion");

            var localVarPath = "/applications/{owner}/{slug}/versions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (slug != null) localVarPathParams.Add("slug", this.Configuration.ApiClient.ParameterToString(slug)); // path parameter
            if (newApplicationVersion != null && newApplicationVersion.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(newApplicationVersion); // http body (model) parameter
            }
            else
            {
                localVarPostBody = newApplicationVersion; // byte array
            }

            // authentication (APIKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-pollination-token")))
            {
                localVarHeaderParams["x-pollination-token"] = this.Configuration.GetApiKeyWithPrefix("x-pollination-token");
            }
            // authentication (JWTAuth) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpsertApplicationVersion", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<S3UploadRequest>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (S3UploadRequest) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(S3UploadRequest)));
        }

        /// <summary>
        /// Upsert a new version to a application 
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="slug"></param>
        /// <param name="newApplicationVersion"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of S3UploadRequest</returns>
        public async System.Threading.Tasks.Task<S3UploadRequest> UpsertApplicationVersionAsync (string owner, string slug, NewApplicationVersion newApplicationVersion, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<S3UploadRequest> localVarResponse = await UpsertApplicationVersionWithHttpInfoAsync(owner, slug, newApplicationVersion, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Upsert a new version to a application 
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="slug"></param>
        /// <param name="newApplicationVersion"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (S3UploadRequest)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<S3UploadRequest>> UpsertApplicationVersionWithHttpInfoAsync (string owner, string slug, NewApplicationVersion newApplicationVersion, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling ApplicationsApi->UpsertApplicationVersion");
            // verify the required parameter 'slug' is set
            if (slug == null)
                throw new ApiException(400, "Missing required parameter 'slug' when calling ApplicationsApi->UpsertApplicationVersion");
            // verify the required parameter 'newApplicationVersion' is set
            if (newApplicationVersion == null)
                throw new ApiException(400, "Missing required parameter 'newApplicationVersion' when calling ApplicationsApi->UpsertApplicationVersion");

            var localVarPath = "/applications/{owner}/{slug}/versions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (slug != null) localVarPathParams.Add("slug", this.Configuration.ApiClient.ParameterToString(slug)); // path parameter
            if (newApplicationVersion != null && newApplicationVersion.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(newApplicationVersion); // http body (model) parameter
            }
            else
            {
                localVarPostBody = newApplicationVersion; // byte array
            }

            // authentication (APIKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-pollination-token")))
            {
                localVarHeaderParams["x-pollination-token"] = this.Configuration.GetApiKeyWithPrefix("x-pollination-token");
            }
            // authentication (JWTAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpsertApplicationVersion", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<S3UploadRequest>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (S3UploadRequest) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(S3UploadRequest)));
        }

    }
}
