
using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using PollinationSDK.Client;
using PollinationSDK.Api;

namespace PollinationSDK.Test
{
    /// <summary>
    ///  Class for testing ArtifactsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class ArtifactsApiTests
    {
        private ArtifactsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new ArtifactsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of ArtifactsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' ArtifactsApi
            //Assert.IsInstanceOf(typeof(ArtifactsApi), instance);
        }

        
        /// <summary>
        /// Test CreateArtifact
        /// </summary>
        [Test]
        public void CreateArtifactTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string name = null;
            //KeyRequest keyRequest = null;
            //var response = instance.CreateArtifact(owner, name, keyRequest);
            //Assert.IsInstanceOf(typeof(S3UploadRequest), response, "response is S3UploadRequest");
        }
        
        /// <summary>
        /// Test DeleteArtifact
        /// </summary>
        [Test]
        public void DeleteArtifactTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string name = null;
            //List<string> path = null;
            //var response = instance.DeleteArtifact(owner, name, path);
            //Assert.IsInstanceOf(typeof(UpdateAccepted), response, "response is UpdateAccepted");
        }
        
        /// <summary>
        /// Test DownloadArtifact
        /// </summary>
        [Test]
        public void DownloadArtifactTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string name = null;
            //string path = null;
            //var response = instance.DownloadArtifact(owner, name, path);
            //Assert.IsInstanceOf(typeof(Object), response, "response is Object");
        }
        
        /// <summary>
        /// Test ListArtifacts
        /// </summary>
        [Test]
        public void ListArtifactsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string name = null;
            //int page = null;
            //int perPage = null;
            //List<string> path = null;
            //var response = instance.ListArtifacts(owner, name, page, perPage, path);
            //Assert.IsInstanceOf(typeof(List<FileMeta>), response, "response is List<FileMeta>");
        }
        
    }

}
