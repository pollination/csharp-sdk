/* 
 * Pollination Server
 *
 * Pollination Server OpenAPI Defintion
 *
 * The version of the OpenAPI document: 0.9.2
 * Contact: info@pollination.cloud
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using PollinationSDK.Client;
using PollinationSDK.Api;
using PollinationSDK.Model;

namespace PollinationSDK.Test
{
    /// <summary>
    ///  Class for testing OrgsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class OrgsApiTests
    {
        private OrgsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new OrgsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of OrgsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' OrgsApi
            //Assert.IsInstanceOf(typeof(OrgsApi), instance);
        }

        
        /// <summary>
        /// Test CreateOrg
        /// </summary>
        [Test]
        public void CreateOrgTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //OrganizationCreate organizationCreate = null;
            //var response = instance.CreateOrg(organizationCreate);
            //Assert.IsInstanceOf(typeof(CreatedContent), response, "response is CreatedContent");
        }
        
        /// <summary>
        /// Test DeleteOrg
        /// </summary>
        [Test]
        public void DeleteOrgTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //instance.DeleteOrg(name);
            
        }
        
        /// <summary>
        /// Test DeleteOrgMember
        /// </summary>
        [Test]
        public void DeleteOrgMemberTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string username = null;
            //instance.DeleteOrgMember(name, username);
            
        }
        
        /// <summary>
        /// Test GetOrg
        /// </summary>
        [Test]
        public void GetOrgTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //var response = instance.GetOrg(name);
            //Assert.IsInstanceOf(typeof(Organization), response, "response is Organization");
        }
        
        /// <summary>
        /// Test GetOrgMembers
        /// </summary>
        [Test]
        public void GetOrgMembersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //int page = null;
            //int perPage = null;
            //var response = instance.GetOrgMembers(name, page, perPage);
            //Assert.IsInstanceOf(typeof(OrganizationMemberList), response, "response is OrganizationMemberList");
        }
        
        /// <summary>
        /// Test ListOrgs
        /// </summary>
        [Test]
        public void ListOrgsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int page = null;
            //int perPage = null;
            //List<string> name = null;
            //List<string> member = null;
            //var response = instance.ListOrgs(page, perPage, name, member);
            //Assert.IsInstanceOf(typeof(OrganizationList), response, "response is OrganizationList");
        }
        
        /// <summary>
        /// Test UpdateOrg
        /// </summary>
        [Test]
        public void UpdateOrgTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //OrganizationUpdate organizationUpdate = null;
            //var response = instance.UpdateOrg(name, organizationUpdate);
            //Assert.IsInstanceOf(typeof(UpdateAccepted), response, "response is UpdateAccepted");
        }
        
        /// <summary>
        /// Test UpsertOrgMember
        /// </summary>
        [Test]
        public void UpsertOrgMemberTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string username = null;
            //OrganizationRoleEnum role = null;
            //var response = instance.UpsertOrgMember(name, username, role);
            //Assert.IsInstanceOf(typeof(UpdateAccepted), response, "response is UpdateAccepted");
        }
        
    }

}
