
using NUnit.Framework;
using System.Linq;
using System.Net;

namespace PollinationSDK.Test
{
    /// <summary>
    ///  Class for testing RecipePackage
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>
    public class RecipeTests
    {
        private RecipeInterface daylightFactor;
        private RecipeInterface annualDaylight;
        private RecipeInterface annualEnergyUse;

        [SetUp]
        public void Init()
        {
            
            using (WebClient wc = new WebClient())
            {
                // Annual daylight
                var url = @"https://api.staging.pollination.cloud/recipes/ladybug-tools/annual-daylight/tags/latest";
                var json = wc.DownloadString(url);
                this.annualDaylight = RecipePackage.FromJson(json).Manifest;

                // Daylight factor
                url = @"https://api.staging.pollination.cloud/recipes/ladybug-tools/daylight-factor/tags/latest";
                json = wc.DownloadString(url);
                this.daylightFactor = RecipePackage.FromJson(json).Manifest;

                // Daylight factor
                url = @"https://api.staging.pollination.cloud/recipes/ladybug-tools/annual-energy-use/tags/latest";
                json = wc.DownloadString(url);
                this.annualEnergyUse = RecipePackage.FromJson(json).Manifest;
            }

            //var file = @"../../../testResources/RecipePackage.json";
            //var text = File.ReadAllText(file);
            //instance = RecipePackage.FromJson(text);
        }

        /// <summary>
        /// Clean up after each test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of RecipePackage
        /// </summary>
        [Test]
        public void RecipeInstanceTest()
        {
            Assert.IsTrue(this.annualDaylight != null);
            Assert.IsTrue(this.daylightFactor != null);
        }


        [Test]
        public void InputOutputTest()
        {
            Assert.IsTrue(this.annualDaylight.Inputs.Count > 0);
            Assert.IsTrue(this.annualDaylight.Outputs.Count > 0);

            Assert.IsTrue(this.daylightFactor.Inputs.Count > 0);
            Assert.IsTrue(this.daylightFactor.Outputs.Count > 0);
        }

        [Test]
        public void ReadmeTest()
        {
            Assert.IsTrue(!string.IsNullOrEmpty(this.daylightFactor.Source));
            Assert.IsTrue(!string.IsNullOrEmpty(this.annualDaylight.Source));
        }
        [Test]
        public void TagTest()
        {
            Assert.IsTrue(this.annualDaylight.Metadata.Tag != "latest");
            Assert.IsTrue(this.daylightFactor.Metadata.Tag != "latest");
        }

        [Test]
        public void ValidateInputTest()
        {
            var numInput = this.daylightFactor.Inputs.OfType<DAGIntegerInput>().First();
            var isValid = numInput.ValidateWithSpec(1);
            Assert.IsTrue(isValid);

            // invalid type
            isValid = numInput.ValidateWithSpec(0.5, out var msgFailed);
            Assert.IsTrue(!isValid);
            Assert.IsTrue(msgFailed.Any());

            // invalid value
            isValid = numInput.ValidateWithSpec(0, out var msgFailed2);
            Assert.IsTrue(!isValid);
            Assert.IsTrue(msgFailed2.Any());
        }


        [Test]
        public void ToJson()
        {
            var dup = this.annualDaylight.DuplicateRecipeInterface();
            Assert.IsTrue(this.annualDaylight.Metadata.Equals(dup.Metadata));
            Assert.IsTrue(this.annualDaylight.Metadata.Equals(this.annualDaylight.Metadata.DuplicateMetaData()));

            // check if all inputs are GenericInput
            var inputs = this.annualDaylight.Inputs.OfType<GenericInput>();
            Assert.IsTrue(inputs.Count() == this.annualDaylight.Inputs.Count);

            // check inputs 
            for (int i = 0; i < this.annualDaylight.Inputs.Count; i++)
            {
                var item = this.annualDaylight.Inputs[i];
                var itemDup = dup.Inputs[i];
                Assert.IsTrue(item.ToJson().Equals(itemDup.ToJson()));
                Assert.IsTrue(item.Equals(itemDup));
            }

            Assert.IsTrue(this.annualDaylight.Inputs.SequenceEqual(dup.Inputs));

            // check outputs 
            var outputs = this.annualDaylight.Outputs.OfType<GenericOutput>();
            Assert.IsTrue(outputs.Count() == this.annualDaylight.Outputs.Count);
            for (int i = 0; i < this.annualDaylight.Outputs.Count; i++)
            {
                var item = this.annualDaylight.Outputs[i];
                var itemDup = dup.Outputs[i];
                Assert.IsTrue(item.ToJson().Equals(itemDup.ToJson()));
                Assert.IsTrue(item.Equals(itemDup));
            }
            Assert.IsTrue(this.annualDaylight.Outputs.SequenceEqual(dup.Outputs));


            //Assert.IsTrue(this.annualDaylight.Inputs.First().Equals(this.annualDaylight.Inputs.First().));

            var dup1 = this.annualDaylight.Duplicate();
            Assert.IsTrue(dup1.Equals(this.annualDaylight));

            var dup2 = this.daylightFactor.DuplicateRecipeInterface();
            Assert.IsTrue(this.daylightFactor.Equals(dup2));
        }

        [Test]
        public void AnnualEnergyUseTest()
        {
            var rec = this.annualEnergyUse;
            var filterInput = rec.Inputs.OfType<DAGStringInput>().First(_ => _.Name == "filter-des-days");
            var alias = filterInput.Alias.OfType<DAGGenericInputAlias>().First();


            Assert.IsTrue(alias.Default == true.ToString());
        }


        [Test]
        public void RunAssetsTest()
        {
            var DAG = this.daylightFactor.Outputs.OfType<DAGFolderOutput>().First();
            var asset = new Wrapper.RunOutputAsset(DAG, "grasshopper", "mingbo/demo/adoe2-54sd4f6s54f454a");
            Assert.IsTrue(asset.Handlers.Any());


            var dup = asset.Duplicate() as Wrapper.RunOutputAsset;

            Assert.IsTrue(dup.Name == asset.Name);
            Assert.IsTrue(dup.RunSource == asset.RunSource);
            Assert.IsTrue(dup.RelativePath == asset.RelativePath);
            Assert.IsTrue(dup.Handlers.First().Function == asset.Handlers.First().Function);

        }
    }

}
