/* 
 * Pollination Server
 *
 * Pollination Server OpenAPI Defintion
 *
 * The version of the OpenAPI document: 0.9.2
 * Contact: info@pollination.cloud
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using NUnit.Framework;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using PollinationSDK.Api;
using PollinationSDK.Model;
using PollinationSDK.Client;
using System.Reflection;
using Newtonsoft.Json;
using System.Net;

namespace PollinationSDK.Test
{
    /// <summary>
    ///  Class for testing RecipePackage
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>
    public class RecipePackageTests
    {
        private RecipePackage instance;

        [SetUp]
        public void Init()
        {
            var url = @"https://api.staging.pollination.cloud/recipes/ladybug-tools/annual-daylight/tags/latest";
            url = @"https://api.staging.pollination.cloud/recipes/ladybug-tools/daylight-factor/tags/latest";
            using (WebClient wc = new WebClient())
            {
                var json = wc.DownloadString(url);
                this.instance = RecipePackage.FromJson(json);
            }

            //var file = @"../../../testResources/RecipePackage.json";
            //var text = File.ReadAllText(file);
            //instance = RecipePackage.FromJson(text);
        }

        /// <summary>
        /// Clean up after each test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of RecipePackage
        /// </summary>
        [Test]
        public void RecipePackageInstanceTest()
        {
            // TODO uncomment below to test "IsInstanceOf" RecipePackage
            Assert.IsInstanceOf(typeof(RecipePackage), instance);
        }


        [Test]
        public void ManifestTest()
        {
            var mainFlow = this.instance.Manifest.Flow.FirstOrDefault(_ => _.Name == "main");
           
            Assert.IsTrue(mainFlow.Inputs.Artifacts.Count > 0);
            Assert.IsTrue(mainFlow.Inputs.Parameters.Count > 0);
        }
        /// <summary>
        /// Test the property 'Readme'
        /// </summary>
        [Test]
        public void ReadmeTest()
        {
            // TODO unit test for the property 'Readme'
        }
        /// <summary>
        /// Test the property 'Tag'
        /// </summary>
        [Test]
        public void TagTest()
        {
            var tag = this.instance.Tag;
            Assert.IsTrue(tag != "latest");
        }

        [Test]
        public void ToJson()
        {
            var metadata = this.instance.Manifest.Metadata;
            var dup1 = metadata.DuplicateMetaData();

            Assert.IsTrue(dup1.Equals(metadata));

            // test inputs
            var dag = this.instance.Manifest.Flow.First();
            var inputs = dag.Inputs.DuplicateDAGInputs();
            Assert.IsTrue(inputs.Equals(dag.Inputs));

            // test outputs
            var outputs = dag.Outputs;
            var outputsDup = outputs.DuplicateDAGOutputs();
            Assert.IsTrue(outputsDup.Equals(outputs));



            var task = dag.Tasks.First();
            var taskDup = task.DuplicateDAGTask();
            Assert.IsTrue(task.Equals(taskDup));


            var dup2 = dag.DuplicateDAG();
            Assert.IsTrue(dup2.Equals(dag));



            //var json = this.instance.ToJson();
            //var recipe = RecipePackage.FromJson(json);

            var dup = this.instance.DuplicateRecipePackage();
            Assert.IsTrue(dup.Equals(this.instance));
        }

    }

}
