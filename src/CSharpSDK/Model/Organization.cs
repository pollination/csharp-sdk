/* 
 * pollination-server
 *
 * Pollination Server OpenAPI Definition
 *
 * Contact: info@pollination.cloud
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

extern alias LBTRestSharp; using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using LBT.Newtonsoft.Json;
using LBT.Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;


namespace PollinationSDK
{
    /// <summary>
    /// Organization
    /// </summary>
    [DataContract(Name = "Organization")]
    public partial class Organization : OrganizationUpdate, IEquatable<Organization>, IValidatableObject
    {
        /// <summary>
        /// The role the user has within the organization
        /// </summary>
        /// <value>The role the user has within the organization</value>
        [DataMember(Name="role")]
        public OrganizationRoleEnum Role { get; set; }   
        /// <summary>
        /// Initializes a new instance of the <see cref="Organization" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Organization() 
        { 
            // Set non-required readonly properties with defaultValue
            this.Type = "Organization";
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Organization" /> class.
        /// </summary>
        /// <param name="id">The org ID (required).</param>
        /// <param name="owner">The account the organization represents (required).</param>
        /// <param name="role">The role the user has within the organization.</param>
        /// <param name="memberCount">The number of members that are part of this org (default to 0).</param>
        /// <param name="teamCount">The number of teams that are part of this org (default to 0).</param>
        /// <param name="accountName">The unique name of the org in small case without spaces.</param>
        /// <param name="name">The display name for this org.</param>
        /// <param name="pictureUrl">URL to the picture associated with this org.</param>
        /// <param name="contactEmail">The contact email for the Organization.</param>
        /// <param name="description">A description of the org.</param>
        public Organization
        (
           string id, AccountPublic owner, // Required parameters
            string accountName= default, string name= default, string pictureUrl= default, string contactEmail= default, string description= default, OrganizationRoleEnum role= default, int memberCount = 0, int teamCount = 0 // Optional parameters
        ) : base(accountName: accountName, name: name, pictureUrl: pictureUrl, contactEmail: contactEmail, description: description )// BaseClass
        {
            // to ensure "id" is required (not null)
            this.Id = id ?? throw new ArgumentNullException("id is a required property for Organization and cannot be null");
            // to ensure "owner" is required (not null)
            this.Owner = owner ?? throw new ArgumentNullException("owner is a required property for Organization and cannot be null");
            this.Role = role;
            this.MemberCount = memberCount;
            this.TeamCount = teamCount;

            // Set non-required readonly properties with defaultValue
            this.Type = "Organization";
        }

        //============================================== is ReadOnly 
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type")]
        public override string Type { get; protected set; }  = "Organization";

        /// <summary>
        /// The org ID
        /// </summary>
        /// <value>The org ID</value>
        [DataMember(Name = "id", IsRequired = true)]
        public string Id { get; set; } 
        /// <summary>
        /// The account the organization represents
        /// </summary>
        /// <value>The account the organization represents</value>
        [DataMember(Name = "owner", IsRequired = true)]
        public AccountPublic Owner { get; set; } 
        /// <summary>
        /// The number of members that are part of this org
        /// </summary>
        /// <value>The number of members that are part of this org</value>
        [DataMember(Name = "member_count")]
        public int MemberCount { get; set; }  = 0;
        /// <summary>
        /// The number of teams that are part of this org
        /// </summary>
        /// <value>The number of teams that are part of this org</value>
        [DataMember(Name = "team_count")]
        public int TeamCount { get; set; }  = 0;

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            return "Organization";
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString(bool detailed)
        {
            if (!detailed)
                return this.ToString();
            
            var sb = new StringBuilder();
            sb.Append("Organization:\n");
            sb.Append("  Type: ").Append(this.Type).Append("\n");
            sb.Append("  AccountName: ").Append(this.AccountName).Append("\n");
            sb.Append("  Name: ").Append(this.Name).Append("\n");
            sb.Append("  PictureUrl: ").Append(this.PictureUrl).Append("\n");
            sb.Append("  ContactEmail: ").Append(this.ContactEmail).Append("\n");
            sb.Append("  Description: ").Append(this.Description).Append("\n");
            sb.Append("  Id: ").Append(this.Id).Append("\n");
            sb.Append("  Owner: ").Append(this.Owner).Append("\n");
            sb.Append("  Role: ").Append(this.Role).Append("\n");
            sb.Append("  MemberCount: ").Append(this.MemberCount).Append("\n");
            sb.Append("  TeamCount: ").Append(this.TeamCount).Append("\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the object from JSON string
        /// </summary>
        /// <returns>Organization object</returns>
        public static Organization FromJson(string json)
        {
            var obj = JsonConvert.DeserializeObject<Organization>(json, JsonSetting.AnyOfConvertSetting);
            if (obj == null)
                return null;
            return obj.Type.ToLower() == obj.GetType().Name.ToLower() ? obj : null;
        }

        /// <summary>
        /// Creates a new instance with the same properties.
        /// </summary>
        /// <returns>Organization object</returns>
        public virtual Organization DuplicateOrganization()
        {
            return FromJson(this.ToJson());
        }

        /// <summary>
        /// Creates a new instance with the same properties.
        /// </summary>
        /// <returns>OpenAPIGenBaseModel</returns>
        public override OpenAPIGenBaseModel Duplicate()
        {
            return DuplicateOrganization();
        }

        /// <summary>
        /// Creates a new instance with the same properties.
        /// </summary>
        /// <returns>OpenAPIGenBaseModel</returns>
        public override OrganizationUpdate DuplicateOrganizationUpdate()
        {
            return DuplicateOrganization();
        }
     
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            input = input is AnyOf anyOf ? anyOf.Obj : input;
            return this.Equals(input as Organization);
        }

        /// <summary>
        /// Returns true if Organization instances are equal
        /// </summary>
        /// <param name="input">Instance of Organization to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Organization input)
        {
            if (input == null)
                return false;
            return base.Equals(input) && 
                    Extension.Equals(this.Id, input.Id) && 
                    Extension.Equals(this.Owner, input.Owner) && 
                    Extension.Equals(this.Role, input.Role) && 
                    Extension.Equals(this.MemberCount, input.MemberCount) && 
                    Extension.Equals(this.TeamCount, input.TeamCount) && 
                    Extension.Equals(this.Type, input.Type);
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Owner != null)
                    hashCode = hashCode * 59 + this.Owner.GetHashCode();
                if (this.Role != null)
                    hashCode = hashCode * 59 + this.Role.GetHashCode();
                if (this.MemberCount != null)
                    hashCode = hashCode * 59 + this.MemberCount.GetHashCode();
                if (this.TeamCount != null)
                    hashCode = hashCode * 59 + this.TeamCount.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in base.BaseValidate(validationContext)) yield return x;

            
            // Type (string) pattern
            Regex regexType = new Regex(@"^Organization$", RegexOptions.CultureInvariant);
            if (this.Type != null && false == regexType.Match(this.Type).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Type, must match a pattern of " + regexType, new [] { "Type" });
            }

            yield break;
        }
    }
}
