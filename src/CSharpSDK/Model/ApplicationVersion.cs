/* 
 * pollination-server
 *
 * Pollination Server OpenAPI Definition
 *
 * Contact: info@pollination.cloud
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

extern alias LBTRestSharp; using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using LBT.Newtonsoft.Json;
using LBT.Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;


namespace PollinationSDK
{
    /// <summary>
    /// ApplicationVersion
    /// </summary>
    [DataContract(Name = "ApplicationVersion")]
    public partial class ApplicationVersion : OpenAPIGenBaseModel, IEquatable<ApplicationVersion>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ApplicationVersion" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ApplicationVersion() 
        { 
            // Set non-required readonly properties with defaultValue
            this.Type = "ApplicationVersion";
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ApplicationVersion" /> class.
        /// </summary>
        /// <param name="id">The application version ID (required).</param>
        /// <param name="author">The author that created the application version (required).</param>
        /// <param name="tag">The tag for this version of the application (required).</param>
        /// <param name="buildStatus">The status of the application version build (required).</param>
        /// <param name="releaseNotes">The release notes for the application version (default to &quot;&quot;).</param>
        /// <param name="createdAt">The time the application version was created.</param>
        public ApplicationVersion
        (
           Guid id, AccountPublic author, string tag, BuildStatus buildStatus, // Required parameters
           string releaseNotes = "", DateTime createdAt= default // Optional parameters
        ) : base()// BaseClass
        {
            this.Id = id;
            // to ensure "author" is required (not null)
            this.Author = author ?? throw new ArgumentNullException("author is a required property for ApplicationVersion and cannot be null");
            // to ensure "tag" is required (not null)
            this.Tag = tag ?? throw new ArgumentNullException("tag is a required property for ApplicationVersion and cannot be null");
            // to ensure "buildStatus" is required (not null)
            this.BuildStatus = buildStatus ?? throw new ArgumentNullException("buildStatus is a required property for ApplicationVersion and cannot be null");
            // use default value if no "releaseNotes" provided
            this.ReleaseNotes = releaseNotes ?? "";
            this.CreatedAt = createdAt;

            // Set non-required readonly properties with defaultValue
            this.Type = "ApplicationVersion";
        }

        //============================================== is ReadOnly 
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type")]
        public override string Type { get; protected set; }  = "ApplicationVersion";

        /// <summary>
        /// The application version ID
        /// </summary>
        /// <value>The application version ID</value>
        [DataMember(Name = "id", IsRequired = true)]
        public Guid Id { get; set; } 
        /// <summary>
        /// The author that created the application version
        /// </summary>
        /// <value>The author that created the application version</value>
        [DataMember(Name = "author", IsRequired = true)]
        public AccountPublic Author { get; set; } 
        /// <summary>
        /// The tag for this version of the application
        /// </summary>
        /// <value>The tag for this version of the application</value>
        [DataMember(Name = "tag", IsRequired = true)]
        public string Tag { get; set; } 
        /// <summary>
        /// The status of the application version build
        /// </summary>
        /// <value>The status of the application version build</value>
        [DataMember(Name = "build_status", IsRequired = true)]
        public BuildStatus BuildStatus { get; set; } 
        /// <summary>
        /// The release notes for the application version
        /// </summary>
        /// <value>The release notes for the application version</value>
        [DataMember(Name = "release_notes")]
        public string ReleaseNotes { get; set; }  = "";
        /// <summary>
        /// The time the application version was created
        /// </summary>
        /// <value>The time the application version was created</value>
        [DataMember(Name = "created_at")]
        public DateTime CreatedAt { get; set; } 

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            return "ApplicationVersion";
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString(bool detailed)
        {
            if (!detailed)
                return this.ToString();
            
            var sb = new StringBuilder();
            sb.Append("ApplicationVersion:\n");
            sb.Append("  Type: ").Append(this.Type).Append("\n");
            sb.Append("  Id: ").Append(this.Id).Append("\n");
            sb.Append("  Author: ").Append(this.Author).Append("\n");
            sb.Append("  Tag: ").Append(this.Tag).Append("\n");
            sb.Append("  BuildStatus: ").Append(this.BuildStatus).Append("\n");
            sb.Append("  ReleaseNotes: ").Append(this.ReleaseNotes).Append("\n");
            sb.Append("  CreatedAt: ").Append(this.CreatedAt).Append("\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the object from JSON string
        /// </summary>
        /// <returns>ApplicationVersion object</returns>
        public static ApplicationVersion FromJson(string json)
        {
            var obj = JsonConvert.DeserializeObject<ApplicationVersion>(json, JsonSetting.AnyOfConvertSetting);
            if (obj == null)
                return null;
            return obj.Type.ToLower() == obj.GetType().Name.ToLower() ? obj : null;
        }

        /// <summary>
        /// Creates a new instance with the same properties.
        /// </summary>
        /// <returns>ApplicationVersion object</returns>
        public virtual ApplicationVersion DuplicateApplicationVersion()
        {
            return FromJson(this.ToJson());
        }

        /// <summary>
        /// Creates a new instance with the same properties.
        /// </summary>
        /// <returns>OpenAPIGenBaseModel</returns>
        public override OpenAPIGenBaseModel Duplicate()
        {
            return DuplicateApplicationVersion();
        }

        /// <summary>
        /// Creates a new instance with the same properties.
        /// </summary>
        /// <returns>OpenAPIGenBaseModel</returns>
        public override OpenAPIGenBaseModel DuplicateOpenAPIGenBaseModel()
        {
            return DuplicateApplicationVersion();
        }
     
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            input = input is AnyOf anyOf ? anyOf.Obj : input;
            return this.Equals(input as ApplicationVersion);
        }

        /// <summary>
        /// Returns true if ApplicationVersion instances are equal
        /// </summary>
        /// <param name="input">Instance of ApplicationVersion to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ApplicationVersion input)
        {
            if (input == null)
                return false;
            return base.Equals(input) && 
                    Extension.Equals(this.Id, input.Id) && 
                    Extension.Equals(this.Author, input.Author) && 
                    Extension.Equals(this.Tag, input.Tag) && 
                    Extension.Equals(this.BuildStatus, input.BuildStatus) && 
                    Extension.Equals(this.ReleaseNotes, input.ReleaseNotes) && 
                    Extension.Equals(this.CreatedAt, input.CreatedAt) && 
                    Extension.Equals(this.Type, input.Type);
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Author != null)
                    hashCode = hashCode * 59 + this.Author.GetHashCode();
                if (this.Tag != null)
                    hashCode = hashCode * 59 + this.Tag.GetHashCode();
                if (this.BuildStatus != null)
                    hashCode = hashCode * 59 + this.BuildStatus.GetHashCode();
                if (this.ReleaseNotes != null)
                    hashCode = hashCode * 59 + this.ReleaseNotes.GetHashCode();
                if (this.CreatedAt != null)
                    hashCode = hashCode * 59 + this.CreatedAt.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in base.BaseValidate(validationContext)) yield return x;

            
            // Type (string) pattern
            Regex regexType = new Regex(@"^ApplicationVersion$", RegexOptions.CultureInvariant);
            if (this.Type != null && false == regexType.Match(this.Type).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Type, must match a pattern of " + regexType, new [] { "Type" });
            }

            yield break;
        }
    }
}
