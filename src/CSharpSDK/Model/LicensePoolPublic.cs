/* 
 * pollination-server
 *
 * Pollination Server OpenAPI Definition
 *
 * Contact: info@pollination.cloud
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

extern alias LBTRestSharp; using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using LBT.Newtonsoft.Json;
using LBT.Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;


namespace PollinationSDK
{
    /// <summary>
    /// LicensePoolPublic
    /// </summary>
    [DataContract(Name = "LicensePoolPublic")]
    public partial class LicensePoolPublic : OpenAPIGenBaseModel, IEquatable<LicensePoolPublic>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LicensePoolPublic" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected LicensePoolPublic() 
        { 
            // Set non-required readonly properties with defaultValue
            this.Type = "LicensePoolPublic";
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="LicensePoolPublic" /> class.
        /// </summary>
        /// <param name="id">The ID of the pool (required).</param>
        /// <param name="licenseId">The ID of the license to which the pool provides access (required).</param>
        /// <param name="owner">The account that owns the license (required).</param>
        /// <param name="permissions">permissions (required).</param>
        /// <param name="product">The pollination product to which this pool provides access (required).</param>
        /// <param name="totalActivations">The number of current activations for this license (required).</param>
        /// <param name="allowedActivations">The number of allowable activations for this license (required).</param>
        /// <param name="accessors">The entities that can access the license though the pool.</param>
        /// <param name="description">The description of the pool.</param>
        public LicensePoolPublic
        (
           Guid id, string licenseId, AccountPublic owner, UserPermission permissions, string product, int totalActivations, int allowedActivations, // Required parameters
           List<Accessor> accessors= default, string description= default // Optional parameters
        ) : base()// BaseClass
        {
            this.Id = id;
            // to ensure "licenseId" is required (not null)
            this.LicenseId = licenseId ?? throw new ArgumentNullException("licenseId is a required property for LicensePoolPublic and cannot be null");
            // to ensure "owner" is required (not null)
            this.Owner = owner ?? throw new ArgumentNullException("owner is a required property for LicensePoolPublic and cannot be null");
            // to ensure "permissions" is required (not null)
            this.Permissions = permissions ?? throw new ArgumentNullException("permissions is a required property for LicensePoolPublic and cannot be null");
            // to ensure "product" is required (not null)
            this.Product = product ?? throw new ArgumentNullException("product is a required property for LicensePoolPublic and cannot be null");
            this.TotalActivations = totalActivations;
            this.AllowedActivations = allowedActivations;
            this.Accessors = accessors;
            this.Description = description;

            // Set non-required readonly properties with defaultValue
            this.Type = "LicensePoolPublic";
        }

        //============================================== is ReadOnly 
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type")]
        public override string Type { get; protected set; }  = "LicensePoolPublic";

        /// <summary>
        /// The ID of the pool
        /// </summary>
        /// <value>The ID of the pool</value>
        [DataMember(Name = "id", IsRequired = true)]
        public Guid Id { get; set; } 
        /// <summary>
        /// The ID of the license to which the pool provides access
        /// </summary>
        /// <value>The ID of the license to which the pool provides access</value>
        [DataMember(Name = "license_id", IsRequired = true)]
        public string LicenseId { get; set; } 
        /// <summary>
        /// The account that owns the license
        /// </summary>
        /// <value>The account that owns the license</value>
        [DataMember(Name = "owner", IsRequired = true)]
        public AccountPublic Owner { get; set; } 
        /// <summary>
        /// Gets or Sets Permissions
        /// </summary>
        [DataMember(Name = "permissions", IsRequired = true)]
        public UserPermission Permissions { get; set; } 
        /// <summary>
        /// The pollination product to which this pool provides access
        /// </summary>
        /// <value>The pollination product to which this pool provides access</value>
        [DataMember(Name = "product", IsRequired = true)]
        public string Product { get; set; } 
        /// <summary>
        /// The number of current activations for this license
        /// </summary>
        /// <value>The number of current activations for this license</value>
        [DataMember(Name = "total_activations", IsRequired = true)]
        public int TotalActivations { get; set; } 
        /// <summary>
        /// The number of allowable activations for this license
        /// </summary>
        /// <value>The number of allowable activations for this license</value>
        [DataMember(Name = "allowed_activations", IsRequired = true)]
        public int AllowedActivations { get; set; } 
        /// <summary>
        /// The entities that can access the license though the pool
        /// </summary>
        /// <value>The entities that can access the license though the pool</value>
        [DataMember(Name = "accessors")]
        public List<Accessor> Accessors { get; set; } 
        /// <summary>
        /// The description of the pool
        /// </summary>
        /// <value>The description of the pool</value>
        [DataMember(Name = "description")]
        public string Description { get; set; } 

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            return "LicensePoolPublic";
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString(bool detailed)
        {
            if (!detailed)
                return this.ToString();
            
            var sb = new StringBuilder();
            sb.Append("LicensePoolPublic:\n");
            sb.Append("  Type: ").Append(this.Type).Append("\n");
            sb.Append("  Id: ").Append(this.Id).Append("\n");
            sb.Append("  LicenseId: ").Append(this.LicenseId).Append("\n");
            sb.Append("  Owner: ").Append(this.Owner).Append("\n");
            sb.Append("  Permissions: ").Append(this.Permissions).Append("\n");
            sb.Append("  Product: ").Append(this.Product).Append("\n");
            sb.Append("  TotalActivations: ").Append(this.TotalActivations).Append("\n");
            sb.Append("  AllowedActivations: ").Append(this.AllowedActivations).Append("\n");
            sb.Append("  Accessors: ").Append(this.Accessors).Append("\n");
            sb.Append("  Description: ").Append(this.Description).Append("\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the object from JSON string
        /// </summary>
        /// <returns>LicensePoolPublic object</returns>
        public static LicensePoolPublic FromJson(string json)
        {
            var obj = JsonConvert.DeserializeObject<LicensePoolPublic>(json, JsonSetting.AnyOfConvertSetting);
            if (obj == null)
                return null;
            return obj.Type.ToLower() == obj.GetType().Name.ToLower() ? obj : null;
        }

        /// <summary>
        /// Creates a new instance with the same properties.
        /// </summary>
        /// <returns>LicensePoolPublic object</returns>
        public virtual LicensePoolPublic DuplicateLicensePoolPublic()
        {
            return FromJson(this.ToJson());
        }

        /// <summary>
        /// Creates a new instance with the same properties.
        /// </summary>
        /// <returns>OpenAPIGenBaseModel</returns>
        public override OpenAPIGenBaseModel Duplicate()
        {
            return DuplicateLicensePoolPublic();
        }

        /// <summary>
        /// Creates a new instance with the same properties.
        /// </summary>
        /// <returns>OpenAPIGenBaseModel</returns>
        public override OpenAPIGenBaseModel DuplicateOpenAPIGenBaseModel()
        {
            return DuplicateLicensePoolPublic();
        }
     
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            input = input is AnyOf anyOf ? anyOf.Obj : input;
            return this.Equals(input as LicensePoolPublic);
        }

        /// <summary>
        /// Returns true if LicensePoolPublic instances are equal
        /// </summary>
        /// <param name="input">Instance of LicensePoolPublic to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LicensePoolPublic input)
        {
            if (input == null)
                return false;
            return base.Equals(input) && 
                    Extension.Equals(this.Id, input.Id) && 
                    Extension.Equals(this.LicenseId, input.LicenseId) && 
                    Extension.Equals(this.Owner, input.Owner) && 
                    Extension.Equals(this.Permissions, input.Permissions) && 
                    Extension.Equals(this.Product, input.Product) && 
                    Extension.Equals(this.TotalActivations, input.TotalActivations) && 
                    Extension.Equals(this.AllowedActivations, input.AllowedActivations) && 
                (
                    this.Accessors == input.Accessors ||
                    Extension.AllEquals(this.Accessors, input.Accessors)
                ) && 
                    Extension.Equals(this.Description, input.Description) && 
                    Extension.Equals(this.Type, input.Type);
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.LicenseId != null)
                    hashCode = hashCode * 59 + this.LicenseId.GetHashCode();
                if (this.Owner != null)
                    hashCode = hashCode * 59 + this.Owner.GetHashCode();
                if (this.Permissions != null)
                    hashCode = hashCode * 59 + this.Permissions.GetHashCode();
                if (this.Product != null)
                    hashCode = hashCode * 59 + this.Product.GetHashCode();
                if (this.TotalActivations != null)
                    hashCode = hashCode * 59 + this.TotalActivations.GetHashCode();
                if (this.AllowedActivations != null)
                    hashCode = hashCode * 59 + this.AllowedActivations.GetHashCode();
                if (this.Accessors != null)
                    hashCode = hashCode * 59 + this.Accessors.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in base.BaseValidate(validationContext)) yield return x;

            
            // Type (string) pattern
            Regex regexType = new Regex(@"^LicensePoolPublic$", RegexOptions.CultureInvariant);
            if (this.Type != null && false == regexType.Match(this.Type).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Type, must match a pattern of " + regexType, new [] { "Type" });
            }

            yield break;
        }
    }
}
